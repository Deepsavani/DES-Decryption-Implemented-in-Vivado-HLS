-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity des_dec is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r : IN STD_LOGIC_VECTOR (63 downto 0);
    key : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of des_dec is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "des_dec,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35tl-cpg236-2L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.689625,HLS_SYN_LAT=4867,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=0,HLS_SYN_FF=963,HLS_SYN_LUT=2036,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_38 : STD_LOGIC_VECTOR (5 downto 0) := "111000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_2A : STD_LOGIC_VECTOR (5 downto 0) := "101010";
    constant ap_const_lv6_2B : STD_LOGIC_VECTOR (5 downto 0) := "101011";
    constant ap_const_lv48_840000000000 : STD_LOGIC_VECTOR (47 downto 0) := "100001000000000000000000000000000000000000000000";
    constant ap_const_lv47_780000000000 : STD_LOGIC_VECTOR (46 downto 0) := "11110000000000000000000000000000000000000000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal PC2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal PC2_ce0 : STD_LOGIC;
    signal PC2_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal E_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal E_ce0 : STD_LOGIC;
    signal E_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal S_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal S_ce0 : STD_LOGIC;
    signal S_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal P_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal P_ce0 : STD_LOGIC;
    signal P_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal PI_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal PI_ce0 : STD_LOGIC;
    signal PI_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal L_fu_1038_p33 : STD_LOGIC_VECTOR (31 downto 0);
    signal L_reg_2434 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_fu_1106_p33 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_reg_2439 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_1758_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_reg_2447 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub_key_addr_reg_2455 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln192_fu_1752_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_1920_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_11_reg_2467 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_4_fu_1934_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_4_reg_2475 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln216_fu_1928_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln218_1_fu_1945_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln218_1_reg_2485 : STD_LOGIC_VECTOR (62 downto 0);
    signal or_ln_fu_1968_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_5_fu_1981_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_5_reg_2498 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal pre_output_fu_1987_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal pre_output_reg_2503 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln223_fu_1975_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_2001_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_2511 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln227_fu_1995_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_input_fu_2047_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal xor_ln232_fu_2071_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal xor_ln232_reg_2531 : STD_LOGIC_VECTOR (46 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal xor_ln232_1_fu_2077_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal xor_ln232_1_reg_2536 : STD_LOGIC_VECTOR (47 downto 0);
    signal j_5_fu_2089_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_5_reg_2544 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal sub_ln240_fu_2125_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln240_reg_2549 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln235_fu_2083_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln240_2_fu_2149_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln240_2_reg_2554 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln243_1_fu_2161_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln243_1_reg_2559 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln246_1_fu_2290_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln246_1_reg_2564 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal j_6_fu_2323_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_6_reg_2577 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal icmp_ln252_fu_2317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln254_1_fu_2334_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln254_1_reg_2587 : STD_LOGIC_VECTOR (30 downto 0);
    signal R_1_fu_2338_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_function_res_fu_2364_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal i_fu_2377_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_2605 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal icmp_ln267_fu_2371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln270_1_fu_2388_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln270_1_reg_2615 : STD_LOGIC_VECTOR (62 downto 0);
    signal inv_init_perm_res_fu_2411_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal sub_key_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_key_ce0 : STD_LOGIC;
    signal sub_key_we0 : STD_LOGIC;
    signal sub_key_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_reg_375 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_key_load_1_reg_386 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_0_reg_398 : STD_LOGIC_VECTOR (5 downto 0);
    signal temp_reg_409 : STD_LOGIC_VECTOR (31 downto 0);
    signal L_0_reg_419 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_reg_430 : STD_LOGIC_VECTOR (4 downto 0);
    signal s_input_0_reg_442 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_reg_454 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_2_reg_465 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal f_function_res_0_reg_477 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_3_reg_488 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_4_reg_499 : STD_LOGIC_VECTOR (6 downto 0);
    signal inv_init_perm_res_0_reg_510 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln214_fu_1910_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln218_fu_1940_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln229_fu_2007_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln232_fu_2018_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln246_3_fu_2296_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln254_fu_2329_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln270_1_fu_2383_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal C_1_fu_264 : STD_LOGIC_VECTOR (27 downto 0);
    signal C_fu_1622_p29 : STD_LOGIC_VECTOR (27 downto 0);
    signal C_2_fu_1820_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal empty_13_fu_1800_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal C_3_fu_1872_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal D_1_fu_268 : STD_LOGIC_VECTOR (27 downto 0);
    signal D_fu_1682_p29 : STD_LOGIC_VECTOR (27 downto 0);
    signal D_2_fu_1842_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal D_3_fu_1892_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal s_output_1_fu_276 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_output_fu_2304_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_538_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_530_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_546_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_554_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_562_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_570_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_578_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_586_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_594_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_602_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_610_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_618_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_626_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_634_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_642_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_650_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_658_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_666_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_674_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_682_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_690_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_698_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_706_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_714_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln174_fu_722_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_726_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_734_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_742_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_750_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_758_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_fu_766_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_774_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_fu_782_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_790_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_fu_798_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_806_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_fu_814_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_fu_822_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_830_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_fu_838_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_fu_846_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_fu_854_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_fu_862_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_50_fu_870_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_51_fu_878_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_fu_886_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_fu_894_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_fu_902_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_55_fu_910_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_fu_918_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_fu_926_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_fu_934_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_59_fu_942_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_60_fu_950_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_61_fu_958_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_62_fu_966_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_63_fu_974_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_64_fu_982_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_65_fu_990_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_66_fu_998_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_67_fu_1006_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_68_fu_1014_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_69_fu_1022_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_70_fu_1030_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_73_fu_1190_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_72_fu_1182_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_74_fu_1198_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_75_fu_1206_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_76_fu_1214_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_77_fu_1222_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_78_fu_1230_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_79_fu_1238_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_71_fu_1174_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_80_fu_1246_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_81_fu_1254_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_82_fu_1262_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_83_fu_1270_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_84_fu_1278_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_85_fu_1286_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_86_fu_1294_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_87_fu_1302_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_88_fu_1310_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_89_fu_1318_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_90_fu_1326_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_91_fu_1334_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_92_fu_1342_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_93_fu_1350_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_94_fu_1358_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_95_fu_1366_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_96_fu_1374_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_97_fu_1382_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_98_fu_1390_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_99_fu_1398_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_100_fu_1406_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_101_fu_1414_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_102_fu_1422_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_103_fu_1430_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_104_fu_1438_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_105_fu_1446_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_106_fu_1454_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_107_fu_1462_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_108_fu_1470_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_109_fu_1478_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_110_fu_1486_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_111_fu_1494_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_112_fu_1502_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_fu_1510_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_114_fu_1518_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_115_fu_1526_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_116_fu_1534_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_117_fu_1542_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_118_fu_1550_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_119_fu_1558_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_120_fu_1566_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_121_fu_1574_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_122_fu_1582_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_123_fu_1590_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_124_fu_1598_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_125_fu_1606_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_126_fu_1614_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_8_fu_1770_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_7_fu_1764_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_10_fu_1782_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_9_fu_1776_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_12_fu_1794_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_11_fu_1788_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln203_fu_1806_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_s_fu_1810_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln204_fu_1828_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_17_fu_1832_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln197_fu_1868_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_127_fu_1860_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln198_fu_1888_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_128_fu_1880_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln218_fu_1949_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln218_1_fu_1955_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal lshr_ln218_fu_1959_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal trunc_ln218_fu_1964_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln232_fu_2012_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln229_fu_2023_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln229_1_fu_2029_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln229_fu_2033_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln229_1_fu_2043_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln229_fu_2039_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln232_3_fu_2067_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal trunc_ln232_2_fu_2063_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal trunc_ln232_1_fu_2059_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln232_fu_2055_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln240_fu_2095_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_2099_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln240_fu_2111_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln240_fu_2107_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln240_2_fu_2121_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln240_1_fu_2131_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln240_1_fu_2117_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln240_1_fu_2143_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln240_5_fu_2139_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln243_fu_2155_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln240_fu_2167_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln240_4_fu_2174_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal lshr_ln240_fu_2178_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal and_ln240_fu_2184_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln240_6_fu_2189_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal lshr_ln240_1_fu_2192_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_129_fu_2202_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln240_1_fu_2198_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln240_3_fu_2170_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal lshr_ln243_fu_2226_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal and_ln243_fu_2232_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal zext_ln243_fu_2237_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_15_fu_2216_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln241_fu_2210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_2246_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln243_1_fu_2240_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal trunc_ln246_fu_2260_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln246_1_fu_2264_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln246_fu_2256_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln246_fu_2268_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_24_fu_2278_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln246_2_fu_2274_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln246_fu_2286_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln246_1_fu_2300_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sub_ln254_fu_2344_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln254_1_fu_2350_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln254_fu_2354_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln254_fu_2360_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln270_fu_2392_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln270_fu_2398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln270_fu_2402_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln270_fu_2407_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);

    component des_dec_PC2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component des_dec_E IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component des_dec_S IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component des_dec_P IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component des_dec_PI IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component des_dec_sub_key IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    PC2_U : component des_dec_PC2
    generic map (
        DataWidth => 6,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => PC2_address0,
        ce0 => PC2_ce0,
        q0 => PC2_q0);

    E_U : component des_dec_E
    generic map (
        DataWidth => 6,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => E_address0,
        ce0 => E_ce0,
        q0 => E_q0);

    S_U : component des_dec_S
    generic map (
        DataWidth => 4,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => S_address0,
        ce0 => S_ce0,
        q0 => S_q0);

    P_U : component des_dec_P
    generic map (
        DataWidth => 6,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => P_address0,
        ce0 => P_ce0,
        q0 => P_q0);

    PI_U : component des_dec_PI
    generic map (
        DataWidth => 7,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => PI_address0,
        ce0 => PI_ce0,
        q0 => PI_q0);

    sub_key_U : component des_dec_sub_key
    generic map (
        DataWidth => 64,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sub_key_address0,
        ce0 => sub_key_ce0,
        we0 => sub_key_we0,
        d0 => sub_key_load_1_reg_386,
        q0 => sub_key_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    C_1_fu_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln192_fu_1752_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (empty_13_fu_1800_p2 = ap_const_lv1_1))) then 
                C_1_fu_264 <= C_3_fu_1872_p3;
            elsif (((empty_13_fu_1800_p2 = ap_const_lv1_0) and (icmp_ln192_fu_1752_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                C_1_fu_264 <= C_2_fu_1820_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                C_1_fu_264 <= C_fu_1622_p29;
            end if; 
        end if;
    end process;

    D_1_fu_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln192_fu_1752_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (empty_13_fu_1800_p2 = ap_const_lv1_1))) then 
                D_1_fu_268 <= D_3_fu_1892_p3;
            elsif (((empty_13_fu_1800_p2 = ap_const_lv1_0) and (icmp_ln192_fu_1752_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                D_1_fu_268 <= D_2_fu_1842_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                D_1_fu_268 <= D_fu_1682_p29;
            end if; 
        end if;
    end process;

    L_0_reg_419_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln192_fu_1752_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                L_0_reg_419 <= L_reg_2434;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln252_fu_2317_p2 = ap_const_lv1_1))) then 
                L_0_reg_419 <= temp_reg_409;
            end if; 
        end if;
    end process;

    f_function_res_0_reg_477_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln235_fu_2083_p2 = ap_const_lv1_1))) then 
                f_function_res_0_reg_477 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                f_function_res_0_reg_477 <= f_function_res_fu_2364_p3;
            end if; 
        end if;
    end process;

    i_2_reg_375_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln216_fu_1928_p2 = ap_const_lv1_1))) then 
                i_2_reg_375 <= i_1_reg_2447;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_2_reg_375 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_3_reg_430_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln192_fu_1752_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_3_reg_430 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln252_fu_2317_p2 = ap_const_lv1_1))) then 
                i_3_reg_430 <= i_5_reg_2498;
            end if; 
        end if;
    end process;

    i_4_reg_499_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                i_4_reg_499 <= i_reg_2605;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln223_fu_1975_p2 = ap_const_lv1_1))) then 
                i_4_reg_499 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    inv_init_perm_res_0_reg_510_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                inv_init_perm_res_0_reg_510 <= inv_init_perm_res_fu_2411_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln223_fu_1975_p2 = ap_const_lv1_1))) then 
                inv_init_perm_res_0_reg_510 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    j_0_reg_398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_0_reg_398 <= j_4_reg_2475;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                j_0_reg_398 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_1_reg_454_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j_1_reg_454 <= j_reg_2511;
            elsif (((icmp_ln223_fu_1975_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                j_1_reg_454 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_2_reg_465_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                j_2_reg_465 <= j_5_reg_2544;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                j_2_reg_465 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_3_reg_488_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln235_fu_2083_p2 = ap_const_lv1_1))) then 
                j_3_reg_488 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                j_3_reg_488 <= j_6_reg_2577;
            end if; 
        end if;
    end process;

    s_input_0_reg_442_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                s_input_0_reg_442 <= s_input_fu_2047_p3;
            elsif (((icmp_ln223_fu_1975_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                s_input_0_reg_442 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_output_1_fu_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                s_output_1_fu_276 <= s_output_fu_2304_p3;
            elsif (((icmp_ln192_fu_1752_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                s_output_1_fu_276 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sub_key_load_1_reg_386_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                sub_key_load_1_reg_386 <= or_ln_fu_1968_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                sub_key_load_1_reg_386 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    temp_reg_409_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln192_fu_1752_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                temp_reg_409 <= R_reg_2439;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln252_fu_2317_p2 = ap_const_lv1_1))) then 
                temp_reg_409 <= R_1_fu_2338_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                L_reg_2434 <= L_fu_1038_p33;
                R_reg_2439 <= R_fu_1106_p33;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                add_ln246_1_reg_2564 <= add_ln246_1_fu_2290_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_2447 <= i_1_fu_1758_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_5_reg_2498 <= i_5_fu_1981_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                i_reg_2605 <= i_fu_2377_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j_4_reg_2475 <= j_4_fu_1934_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                j_5_reg_2544 <= j_5_fu_2089_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                j_6_reg_2577 <= j_6_fu_2323_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                j_reg_2511 <= j_fu_2001_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln223_fu_1975_p2 = ap_const_lv1_1))) then
                pre_output_reg_2503 <= pre_output_fu_1987_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln192_fu_1752_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                sub_key_addr_reg_2455 <= zext_ln214_fu_1910_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln235_fu_2083_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    sub_ln240_2_reg_2554(5 downto 1) <= sub_ln240_2_fu_2149_p2(5 downto 1);
                    sub_ln240_reg_2549(6 downto 1) <= sub_ln240_fu_2125_p2(6 downto 1);
                    sub_ln243_1_reg_2559(5 downto 1) <= sub_ln243_1_fu_2161_p2(5 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_11_reg_2467 <= tmp_11_fu_1920_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln216_fu_1928_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                trunc_ln218_1_reg_2485 <= trunc_ln218_1_fu_1945_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln252_fu_2317_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                trunc_ln254_1_reg_2587 <= trunc_ln254_1_fu_2334_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln267_fu_2371_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                trunc_ln270_1_reg_2615 <= trunc_ln270_1_fu_2388_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                xor_ln232_1_reg_2536 <= xor_ln232_1_fu_2077_p2;
                xor_ln232_reg_2531 <= xor_ln232_fu_2071_p2;
            end if;
        end if;
    end process;
    sub_ln240_reg_2549(0) <= '0';
    sub_ln240_2_reg_2554(0) <= '0';
    sub_ln243_1_reg_2559(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln192_fu_1752_p2, ap_CS_fsm_state4, icmp_ln216_fu_1928_p2, ap_CS_fsm_state6, icmp_ln223_fu_1975_p2, ap_CS_fsm_state7, icmp_ln227_fu_1995_p2, ap_CS_fsm_state10, icmp_ln235_fu_2083_p2, ap_CS_fsm_state14, icmp_ln252_fu_2317_p2, ap_CS_fsm_state16, icmp_ln267_fu_2371_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln192_fu_1752_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln216_fu_1928_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln223_fu_1975_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln227_fu_1995_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln235_fu_2083_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln252_fu_2317_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln267_fu_2371_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    C_2_fu_1820_p3 <= (trunc_ln203_fu_1806_p1 & tmp_s_fu_1810_p4);
    C_3_fu_1872_p3 <= (trunc_ln197_fu_1868_p1 & tmp_127_fu_1860_p3);
    C_fu_1622_p29 <= (((((((((((((((((((((((((((tmp_73_fu_1190_p3 & tmp_72_fu_1182_p3) & tmp_74_fu_1198_p3) & tmp_75_fu_1206_p3) & tmp_76_fu_1214_p3) & tmp_77_fu_1222_p3) & tmp_78_fu_1230_p3) & tmp_79_fu_1238_p3) & tmp_71_fu_1174_p3) & tmp_80_fu_1246_p3) & tmp_81_fu_1254_p3) & tmp_82_fu_1262_p3) & tmp_83_fu_1270_p3) & tmp_84_fu_1278_p3) & tmp_85_fu_1286_p3) & tmp_86_fu_1294_p3) & tmp_87_fu_1302_p3) & tmp_88_fu_1310_p3) & tmp_89_fu_1318_p3) & tmp_90_fu_1326_p3) & tmp_91_fu_1334_p3) & tmp_92_fu_1342_p3) & tmp_93_fu_1350_p3) & tmp_94_fu_1358_p3) & tmp_95_fu_1366_p3) & tmp_96_fu_1374_p3) & tmp_97_fu_1382_p3) & tmp_98_fu_1390_p3);
    D_2_fu_1842_p3 <= (trunc_ln204_fu_1828_p1 & tmp_17_fu_1832_p4);
    D_3_fu_1892_p3 <= (trunc_ln198_fu_1888_p1 & tmp_128_fu_1880_p3);
    D_fu_1682_p29 <= (((((((((((((((((((((((((((tmp_99_fu_1398_p3 & tmp_100_fu_1406_p3) & tmp_101_fu_1414_p3) & tmp_102_fu_1422_p3) & tmp_103_fu_1430_p3) & tmp_104_fu_1438_p3) & tmp_105_fu_1446_p3) & tmp_106_fu_1454_p3) & tmp_107_fu_1462_p3) & tmp_108_fu_1470_p3) & tmp_109_fu_1478_p3) & tmp_110_fu_1486_p3) & tmp_111_fu_1494_p3) & tmp_112_fu_1502_p3) & tmp_113_fu_1510_p3) & tmp_114_fu_1518_p3) & tmp_115_fu_1526_p3) & tmp_116_fu_1534_p3) & tmp_117_fu_1542_p3) & tmp_118_fu_1550_p3) & tmp_119_fu_1558_p3) & tmp_120_fu_1566_p3) & tmp_121_fu_1574_p3) & tmp_122_fu_1582_p3) & tmp_123_fu_1590_p3) & tmp_124_fu_1598_p3) & tmp_125_fu_1606_p3) & tmp_126_fu_1614_p3);
    E_address0 <= zext_ln229_fu_2007_p1(6 - 1 downto 0);

    E_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            E_ce0 <= ap_const_logic_1;
        else 
            E_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    L_fu_1038_p33 <= (((((((((((((((((((((((((((((((tmp_3_fu_538_p3 & tmp_2_fu_530_p3) & tmp_4_fu_546_p3) & tmp_5_fu_554_p3) & tmp_6_fu_562_p3) & tmp_7_fu_570_p3) & tmp_8_fu_578_p3) & tmp_9_fu_586_p3) & tmp_10_fu_594_p3) & tmp_12_fu_602_p3) & tmp_13_fu_610_p3) & tmp_14_fu_618_p3) & tmp_16_fu_626_p3) & tmp_18_fu_634_p3) & tmp_19_fu_642_p3) & tmp_21_fu_650_p3) & tmp_22_fu_658_p3) & tmp_23_fu_666_p3) & tmp_26_fu_674_p3) & tmp_27_fu_682_p3) & tmp_28_fu_690_p3) & tmp_29_fu_698_p3) & tmp_30_fu_706_p3) & tmp_31_fu_714_p3) & trunc_ln174_fu_722_p1) & tmp_32_fu_726_p3) & tmp_33_fu_734_p3) & tmp_34_fu_742_p3) & tmp_35_fu_750_p3) & tmp_36_fu_758_p3) & tmp_37_fu_766_p3) & tmp_38_fu_774_p3);
    PC2_address0 <= zext_ln218_fu_1940_p1(6 - 1 downto 0);

    PC2_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            PC2_ce0 <= ap_const_logic_1;
        else 
            PC2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    PI_address0 <= zext_ln270_1_fu_2383_p1(6 - 1 downto 0);

    PI_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            PI_ce0 <= ap_const_logic_1;
        else 
            PI_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    P_address0 <= zext_ln254_fu_2329_p1(5 - 1 downto 0);

    P_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            P_ce0 <= ap_const_logic_1;
        else 
            P_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    R_1_fu_2338_p2 <= (f_function_res_0_reg_477 xor L_0_reg_419);
    R_fu_1106_p33 <= (((((((((((((((((((((((((((((((tmp_39_fu_782_p3 & tmp_40_fu_790_p3) & tmp_41_fu_798_p3) & tmp_42_fu_806_p3) & tmp_43_fu_814_p3) & tmp_44_fu_822_p3) & tmp_45_fu_830_p3) & tmp_46_fu_838_p3) & tmp_47_fu_846_p3) & tmp_48_fu_854_p3) & tmp_49_fu_862_p3) & tmp_50_fu_870_p3) & tmp_51_fu_878_p3) & tmp_52_fu_886_p3) & tmp_53_fu_894_p3) & tmp_54_fu_902_p3) & tmp_55_fu_910_p3) & tmp_56_fu_918_p3) & tmp_57_fu_926_p3) & tmp_58_fu_934_p3) & tmp_59_fu_942_p3) & tmp_60_fu_950_p3) & tmp_61_fu_958_p3) & tmp_62_fu_966_p3) & tmp_63_fu_974_p3) & tmp_64_fu_982_p3) & tmp_65_fu_990_p3) & tmp_66_fu_998_p3) & tmp_67_fu_1006_p3) & tmp_68_fu_1014_p3) & tmp_69_fu_1022_p3) & tmp_70_fu_1030_p3);
    S_address0 <= sext_ln246_3_fu_2296_p1(9 - 1 downto 0);

    S_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            S_ce0 <= ap_const_logic_1;
        else 
            S_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln246_1_fu_2290_p2 <= std_logic_vector(signed(sext_ln246_2_fu_2274_p1) + signed(zext_ln246_fu_2286_p1));
    add_ln246_fu_2268_p2 <= std_logic_vector(signed(sext_ln246_1_fu_2264_p1) + signed(sext_ln246_fu_2256_p1));
    and_ln240_fu_2184_p2 <= (xor_ln232_1_reg_2536 and lshr_ln240_fu_2178_p2);
    and_ln243_fu_2232_p2 <= (xor_ln232_reg_2531 and lshr_ln243_fu_2226_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state16, icmp_ln267_fu_2371_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln267_fu_2371_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16, icmp_ln267_fu_2371_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln267_fu_2371_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= inv_init_perm_res_0_reg_510;
    empty_10_fu_1782_p2 <= "1" when (i_2_reg_375 = ap_const_lv5_1) else "0";
    empty_11_fu_1788_p2 <= (empty_9_fu_1776_p2 or empty_10_fu_1782_p2);
    empty_12_fu_1794_p2 <= "1" when (i_2_reg_375 = ap_const_lv5_0) else "0";
    empty_13_fu_1800_p2 <= (empty_12_fu_1794_p2 or empty_11_fu_1788_p2);
    empty_7_fu_1764_p2 <= "1" when (i_2_reg_375 = ap_const_lv5_F) else "0";
    empty_8_fu_1770_p2 <= "1" when (i_2_reg_375 = ap_const_lv5_8) else "0";
    empty_9_fu_1776_p2 <= (empty_8_fu_1770_p2 or empty_7_fu_1764_p2);
    f_function_res_fu_2364_p3 <= (trunc_ln254_1_reg_2587 & trunc_ln254_fu_2360_p1);
    i_1_fu_1758_p2 <= std_logic_vector(unsigned(i_2_reg_375) + unsigned(ap_const_lv5_1));
    i_5_fu_1981_p2 <= std_logic_vector(unsigned(i_3_reg_430) + unsigned(ap_const_lv5_1));
    i_fu_2377_p2 <= std_logic_vector(unsigned(i_4_reg_499) + unsigned(ap_const_lv7_1));
    icmp_ln192_fu_1752_p2 <= "1" when (i_2_reg_375 = ap_const_lv5_10) else "0";
    icmp_ln216_fu_1928_p2 <= "1" when (j_0_reg_398 = ap_const_lv6_30) else "0";
    icmp_ln223_fu_1975_p2 <= "1" when (i_3_reg_430 = ap_const_lv5_10) else "0";
    icmp_ln227_fu_1995_p2 <= "1" when (j_1_reg_454 = ap_const_lv6_30) else "0";
    icmp_ln235_fu_2083_p2 <= "1" when (j_2_reg_465 = ap_const_lv4_8) else "0";
    icmp_ln252_fu_2317_p2 <= "1" when (j_3_reg_488 = ap_const_lv6_20) else "0";
    icmp_ln267_fu_2371_p2 <= "1" when (i_4_reg_499 = ap_const_lv7_40) else "0";
    inv_init_perm_res_fu_2411_p3 <= (trunc_ln270_1_reg_2615 & trunc_ln270_fu_2407_p1);
    j_4_fu_1934_p2 <= std_logic_vector(unsigned(j_0_reg_398) + unsigned(ap_const_lv6_1));
    j_5_fu_2089_p2 <= std_logic_vector(unsigned(j_2_reg_465) + unsigned(ap_const_lv4_1));
    j_6_fu_2323_p2 <= std_logic_vector(unsigned(j_3_reg_488) + unsigned(ap_const_lv6_1));
    j_fu_2001_p2 <= std_logic_vector(unsigned(j_1_reg_454) + unsigned(ap_const_lv6_1));
    lshr_ln218_fu_1959_p2 <= std_logic_vector(shift_right(unsigned(tmp_11_reg_2467),to_integer(unsigned('0' & zext_ln218_1_fu_1955_p1(31-1 downto 0)))));
    lshr_ln229_fu_2033_p2 <= std_logic_vector(shift_right(unsigned(temp_reg_409),to_integer(unsigned('0' & zext_ln229_1_fu_2029_p1(31-1 downto 0)))));
    lshr_ln240_1_fu_2192_p2 <= std_logic_vector(shift_right(unsigned(and_ln240_fu_2184_p2),to_integer(unsigned('0' & zext_ln240_6_fu_2189_p1(31-1 downto 0)))));
    lshr_ln240_fu_2178_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv48_840000000000),to_integer(unsigned('0' & zext_ln240_4_fu_2174_p1(31-1 downto 0)))));
    lshr_ln243_1_fu_2240_p2 <= std_logic_vector(shift_right(unsigned(and_ln243_fu_2232_p2),to_integer(unsigned('0' & zext_ln243_fu_2237_p1(31-1 downto 0)))));
    lshr_ln243_fu_2226_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv47_780000000000),to_integer(unsigned('0' & zext_ln240_3_fu_2170_p1(31-1 downto 0)))));
    lshr_ln254_fu_2354_p2 <= std_logic_vector(shift_right(unsigned(s_output_1_fu_276),to_integer(unsigned('0' & zext_ln254_1_fu_2350_p1(31-1 downto 0)))));
    lshr_ln270_fu_2402_p2 <= std_logic_vector(shift_right(unsigned(pre_output_reg_2503),to_integer(unsigned('0' & zext_ln270_fu_2398_p1(31-1 downto 0)))));
    or_ln241_fu_2210_p2 <= (trunc_ln240_1_fu_2198_p1 or tmp_129_fu_2202_p3);
    or_ln_fu_1968_p3 <= (trunc_ln218_1_reg_2485 & trunc_ln218_fu_1964_p1);
    pre_output_fu_1987_p3 <= (temp_reg_409 & L_0_reg_419);
    s_input_fu_2047_p3 <= (trunc_ln229_1_fu_2043_p1 & trunc_ln229_fu_2039_p1);
    s_output_fu_2304_p3 <= (trunc_ln246_1_fu_2300_p1 & S_q0);
        sext_ln240_fu_2167_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln240_reg_2549),32));

        sext_ln246_1_fu_2264_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln246_fu_2260_p1),9));

        sext_ln246_2_fu_2274_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln246_fu_2268_p2),11));

        sext_ln246_3_fu_2296_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln246_1_reg_2564),64));

        sext_ln246_fu_2256_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_20_fu_2246_p4),9));

    shl_ln240_1_fu_2131_p3 <= (trunc_ln240_fu_2095_p1 & ap_const_lv2_0);
    shl_ln240_fu_2111_p2 <= std_logic_vector(shift_left(unsigned(j_2_reg_465),to_integer(unsigned('0' & ap_const_lv4_1(4-1 downto 0)))));
    shl_ln_fu_2099_p3 <= (trunc_ln240_fu_2095_p1 & ap_const_lv3_0);

    sub_key_address0_assign_proc : process(sub_key_addr_reg_2455, ap_CS_fsm_state4, ap_CS_fsm_state7, zext_ln232_fu_2018_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sub_key_address0 <= zext_ln232_fu_2018_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sub_key_address0 <= sub_key_addr_reg_2455;
        else 
            sub_key_address0 <= "XXXX";
        end if; 
    end process;


    sub_key_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            sub_key_ce0 <= ap_const_logic_1;
        else 
            sub_key_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sub_key_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sub_key_we0 <= ap_const_logic_1;
        else 
            sub_key_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln218_fu_1949_p2 <= std_logic_vector(signed(ap_const_lv6_38) - signed(PC2_q0));
    sub_ln229_fu_2023_p2 <= std_logic_vector(signed(ap_const_lv6_20) - signed(E_q0));
    sub_ln232_fu_2012_p2 <= std_logic_vector(unsigned(ap_const_lv5_F) - unsigned(i_3_reg_430));
    sub_ln240_1_fu_2143_p2 <= std_logic_vector(signed(ap_const_lv6_2A) - signed(zext_ln240_1_fu_2117_p1));
    sub_ln240_2_fu_2149_p2 <= std_logic_vector(unsigned(sub_ln240_1_fu_2143_p2) - unsigned(zext_ln240_5_fu_2139_p1));
    sub_ln240_fu_2125_p2 <= std_logic_vector(unsigned(zext_ln240_fu_2107_p1) - unsigned(zext_ln240_2_fu_2121_p1));
    sub_ln243_1_fu_2161_p2 <= std_logic_vector(unsigned(sub_ln243_fu_2155_p2) - unsigned(zext_ln240_5_fu_2139_p1));
    sub_ln243_fu_2155_p2 <= std_logic_vector(signed(ap_const_lv6_2B) - signed(zext_ln240_1_fu_2117_p1));
    sub_ln254_fu_2344_p2 <= std_logic_vector(signed(ap_const_lv6_20) - signed(P_q0));
    sub_ln270_fu_2392_p2 <= std_logic_vector(signed(ap_const_lv7_40) - signed(PI_q0));
    tmp_100_fu_1406_p3 <= key(9 downto 9);
    tmp_101_fu_1414_p3 <= key(17 downto 17);
    tmp_102_fu_1422_p3 <= key(25 downto 25);
    tmp_103_fu_1430_p3 <= key(33 downto 33);
    tmp_104_fu_1438_p3 <= key(41 downto 41);
    tmp_105_fu_1446_p3 <= key(49 downto 49);
    tmp_106_fu_1454_p3 <= key(57 downto 57);
    tmp_107_fu_1462_p3 <= key(2 downto 2);
    tmp_108_fu_1470_p3 <= key(10 downto 10);
    tmp_109_fu_1478_p3 <= key(18 downto 18);
    tmp_10_fu_594_p3 <= input_r(4 downto 4);
    tmp_110_fu_1486_p3 <= key(26 downto 26);
    tmp_111_fu_1494_p3 <= key(34 downto 34);
    tmp_112_fu_1502_p3 <= key(42 downto 42);
    tmp_113_fu_1510_p3 <= key(50 downto 50);
    tmp_114_fu_1518_p3 <= key(58 downto 58);
    tmp_115_fu_1526_p3 <= key(3 downto 3);
    tmp_116_fu_1534_p3 <= key(11 downto 11);
    tmp_117_fu_1542_p3 <= key(19 downto 19);
    tmp_118_fu_1550_p3 <= key(27 downto 27);
    tmp_119_fu_1558_p3 <= key(35 downto 35);
    tmp_11_fu_1920_p3 <= (C_1_fu_264 & D_1_fu_268);
    tmp_120_fu_1566_p3 <= key(43 downto 43);
    tmp_121_fu_1574_p3 <= key(51 downto 51);
    tmp_122_fu_1582_p3 <= key(59 downto 59);
    tmp_123_fu_1590_p3 <= key(36 downto 36);
    tmp_124_fu_1598_p3 <= key(44 downto 44);
    tmp_125_fu_1606_p3 <= key(52 downto 52);
    tmp_126_fu_1614_p3 <= key(60 downto 60);
    tmp_127_fu_1860_p3 <= C_1_fu_264(27 downto 27);
    tmp_128_fu_1880_p3 <= D_1_fu_268(27 downto 27);
    tmp_129_fu_2202_p3 <= lshr_ln240_1_fu_2192_p2(4 downto 4);
    tmp_12_fu_602_p3 <= input_r(12 downto 12);
    tmp_13_fu_610_p3 <= input_r(20 downto 20);
    tmp_14_fu_618_p3 <= input_r(28 downto 28);
    tmp_15_fu_2216_p4 <= lshr_ln240_1_fu_2192_p2(7 downto 5);
    tmp_16_fu_626_p3 <= input_r(36 downto 36);
    tmp_17_fu_1832_p4 <= D_1_fu_268(27 downto 26);
    tmp_18_fu_634_p3 <= input_r(44 downto 44);
    tmp_19_fu_642_p3 <= input_r(52 downto 52);
    tmp_20_fu_2246_p4 <= ((tmp_15_fu_2216_p4 & or_ln241_fu_2210_p2) & ap_const_lv4_0);
    tmp_21_fu_650_p3 <= input_r(60 downto 60);
    tmp_22_fu_658_p3 <= input_r(2 downto 2);
    tmp_23_fu_666_p3 <= input_r(10 downto 10);
    tmp_24_fu_2278_p3 <= (j_2_reg_465 & ap_const_lv6_0);
    tmp_26_fu_674_p3 <= input_r(18 downto 18);
    tmp_27_fu_682_p3 <= input_r(26 downto 26);
    tmp_28_fu_690_p3 <= input_r(34 downto 34);
    tmp_29_fu_698_p3 <= input_r(42 downto 42);
    tmp_2_fu_530_p3 <= input_r(14 downto 14);
    tmp_30_fu_706_p3 <= input_r(50 downto 50);
    tmp_31_fu_714_p3 <= input_r(58 downto 58);
    tmp_32_fu_726_p3 <= input_r(8 downto 8);
    tmp_33_fu_734_p3 <= input_r(16 downto 16);
    tmp_34_fu_742_p3 <= input_r(24 downto 24);
    tmp_35_fu_750_p3 <= input_r(32 downto 32);
    tmp_36_fu_758_p3 <= input_r(40 downto 40);
    tmp_37_fu_766_p3 <= input_r(48 downto 48);
    tmp_38_fu_774_p3 <= input_r(56 downto 56);
    tmp_39_fu_782_p3 <= input_r(7 downto 7);
    tmp_3_fu_538_p3 <= input_r(6 downto 6);
    tmp_40_fu_790_p3 <= input_r(15 downto 15);
    tmp_41_fu_798_p3 <= input_r(23 downto 23);
    tmp_42_fu_806_p3 <= input_r(31 downto 31);
    tmp_43_fu_814_p3 <= input_r(39 downto 39);
    tmp_44_fu_822_p3 <= input_r(47 downto 47);
    tmp_45_fu_830_p3 <= input_r(55 downto 55);
    tmp_46_fu_838_p3 <= input_r(63 downto 63);
    tmp_47_fu_846_p3 <= input_r(5 downto 5);
    tmp_48_fu_854_p3 <= input_r(13 downto 13);
    tmp_49_fu_862_p3 <= input_r(21 downto 21);
    tmp_4_fu_546_p3 <= input_r(22 downto 22);
    tmp_50_fu_870_p3 <= input_r(29 downto 29);
    tmp_51_fu_878_p3 <= input_r(37 downto 37);
    tmp_52_fu_886_p3 <= input_r(45 downto 45);
    tmp_53_fu_894_p3 <= input_r(53 downto 53);
    tmp_54_fu_902_p3 <= input_r(61 downto 61);
    tmp_55_fu_910_p3 <= input_r(3 downto 3);
    tmp_56_fu_918_p3 <= input_r(11 downto 11);
    tmp_57_fu_926_p3 <= input_r(19 downto 19);
    tmp_58_fu_934_p3 <= input_r(27 downto 27);
    tmp_59_fu_942_p3 <= input_r(35 downto 35);
    tmp_5_fu_554_p3 <= input_r(30 downto 30);
    tmp_60_fu_950_p3 <= input_r(43 downto 43);
    tmp_61_fu_958_p3 <= input_r(51 downto 51);
    tmp_62_fu_966_p3 <= input_r(59 downto 59);
    tmp_63_fu_974_p3 <= input_r(1 downto 1);
    tmp_64_fu_982_p3 <= input_r(9 downto 9);
    tmp_65_fu_990_p3 <= input_r(17 downto 17);
    tmp_66_fu_998_p3 <= input_r(25 downto 25);
    tmp_67_fu_1006_p3 <= input_r(33 downto 33);
    tmp_68_fu_1014_p3 <= input_r(41 downto 41);
    tmp_69_fu_1022_p3 <= input_r(49 downto 49);
    tmp_6_fu_562_p3 <= input_r(38 downto 38);
    tmp_70_fu_1030_p3 <= input_r(57 downto 57);
    tmp_71_fu_1174_p3 <= key(6 downto 6);
    tmp_72_fu_1182_p3 <= key(15 downto 15);
    tmp_73_fu_1190_p3 <= key(7 downto 7);
    tmp_74_fu_1198_p3 <= key(23 downto 23);
    tmp_75_fu_1206_p3 <= key(31 downto 31);
    tmp_76_fu_1214_p3 <= key(39 downto 39);
    tmp_77_fu_1222_p3 <= key(47 downto 47);
    tmp_78_fu_1230_p3 <= key(55 downto 55);
    tmp_79_fu_1238_p3 <= key(63 downto 63);
    tmp_7_fu_570_p3 <= input_r(46 downto 46);
    tmp_80_fu_1246_p3 <= key(14 downto 14);
    tmp_81_fu_1254_p3 <= key(22 downto 22);
    tmp_82_fu_1262_p3 <= key(30 downto 30);
    tmp_83_fu_1270_p3 <= key(38 downto 38);
    tmp_84_fu_1278_p3 <= key(46 downto 46);
    tmp_85_fu_1286_p3 <= key(54 downto 54);
    tmp_86_fu_1294_p3 <= key(62 downto 62);
    tmp_87_fu_1302_p3 <= key(5 downto 5);
    tmp_88_fu_1310_p3 <= key(13 downto 13);
    tmp_89_fu_1318_p3 <= key(21 downto 21);
    tmp_8_fu_578_p3 <= input_r(54 downto 54);
    tmp_90_fu_1326_p3 <= key(29 downto 29);
    tmp_91_fu_1334_p3 <= key(37 downto 37);
    tmp_92_fu_1342_p3 <= key(45 downto 45);
    tmp_93_fu_1350_p3 <= key(53 downto 53);
    tmp_94_fu_1358_p3 <= key(61 downto 61);
    tmp_95_fu_1366_p3 <= key(4 downto 4);
    tmp_96_fu_1374_p3 <= key(12 downto 12);
    tmp_97_fu_1382_p3 <= key(20 downto 20);
    tmp_98_fu_1390_p3 <= key(28 downto 28);
    tmp_99_fu_1398_p3 <= key(1 downto 1);
    tmp_9_fu_586_p3 <= input_r(62 downto 62);
    tmp_s_fu_1810_p4 <= C_1_fu_264(27 downto 26);
    trunc_ln174_fu_722_p1 <= input_r(1 - 1 downto 0);
    trunc_ln197_fu_1868_p1 <= C_1_fu_264(27 - 1 downto 0);
    trunc_ln198_fu_1888_p1 <= D_1_fu_268(27 - 1 downto 0);
    trunc_ln203_fu_1806_p1 <= C_1_fu_264(26 - 1 downto 0);
    trunc_ln204_fu_1828_p1 <= D_1_fu_268(26 - 1 downto 0);
    trunc_ln218_1_fu_1945_p1 <= sub_key_load_1_reg_386(63 - 1 downto 0);
    trunc_ln218_fu_1964_p1 <= lshr_ln218_fu_1959_p2(1 - 1 downto 0);
    trunc_ln229_1_fu_2043_p1 <= s_input_0_reg_442(63 - 1 downto 0);
    trunc_ln229_fu_2039_p1 <= lshr_ln229_fu_2033_p2(1 - 1 downto 0);
    trunc_ln232_1_fu_2059_p1 <= sub_key_q0(48 - 1 downto 0);
    trunc_ln232_2_fu_2063_p1 <= s_input_0_reg_442(47 - 1 downto 0);
    trunc_ln232_3_fu_2067_p1 <= sub_key_q0(47 - 1 downto 0);
    trunc_ln232_fu_2055_p1 <= s_input_0_reg_442(48 - 1 downto 0);
    trunc_ln240_1_fu_2198_p1 <= lshr_ln240_1_fu_2192_p2(1 - 1 downto 0);
    trunc_ln240_fu_2095_p1 <= j_2_reg_465(3 - 1 downto 0);
    trunc_ln246_1_fu_2300_p1 <= s_output_1_fu_276(28 - 1 downto 0);
    trunc_ln246_fu_2260_p1 <= lshr_ln243_1_fu_2240_p2(8 - 1 downto 0);
    trunc_ln254_1_fu_2334_p1 <= f_function_res_0_reg_477(31 - 1 downto 0);
    trunc_ln254_fu_2360_p1 <= lshr_ln254_fu_2354_p2(1 - 1 downto 0);
    trunc_ln270_1_fu_2388_p1 <= inv_init_perm_res_0_reg_510(63 - 1 downto 0);
    trunc_ln270_fu_2407_p1 <= lshr_ln270_fu_2402_p2(1 - 1 downto 0);
    xor_ln232_1_fu_2077_p2 <= (trunc_ln232_fu_2055_p1 xor trunc_ln232_1_fu_2059_p1);
    xor_ln232_fu_2071_p2 <= (trunc_ln232_3_fu_2067_p1 xor trunc_ln232_2_fu_2063_p1);
    zext_ln214_fu_1910_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_375),64));
    zext_ln218_1_fu_1955_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln218_fu_1949_p2),56));
    zext_ln218_fu_1940_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_398),64));
    zext_ln229_1_fu_2029_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln229_fu_2023_p2),32));
    zext_ln229_fu_2007_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_454),64));
    zext_ln232_fu_2018_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln232_fu_2012_p2),64));
    zext_ln240_1_fu_2117_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln240_fu_2111_p2),6));
    zext_ln240_2_fu_2121_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln240_fu_2111_p2),7));
    zext_ln240_3_fu_2170_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln240_fu_2167_p1),47));
    zext_ln240_4_fu_2174_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln240_fu_2167_p1),48));
    zext_ln240_5_fu_2139_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln240_1_fu_2131_p3),6));
    zext_ln240_6_fu_2189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln240_2_reg_2554),48));
    zext_ln240_fu_2107_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_2099_p3),7));
    zext_ln243_fu_2237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln243_1_reg_2559),47));
    zext_ln246_fu_2286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_fu_2278_p3),11));
    zext_ln254_1_fu_2350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln254_fu_2344_p2),32));
    zext_ln254_fu_2329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_3_reg_488),64));
    zext_ln270_1_fu_2383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_499),64));
    zext_ln270_fu_2398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln270_fu_2392_p2),64));
end behav;

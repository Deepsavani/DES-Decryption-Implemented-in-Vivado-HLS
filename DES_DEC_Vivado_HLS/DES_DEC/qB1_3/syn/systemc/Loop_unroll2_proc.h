// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Loop_unroll2_proc_HH_
#define _Loop_unroll2_proc_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Loop_unroll2_proccud.h"

namespace ap_rtl {

struct Loop_unroll2_proc : public sc_module {
    // Port declarations 12
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<64> > key_dout;
    sc_in< sc_logic > key_empty_n;
    sc_out< sc_logic > key_read;
    sc_out< sc_lv<64> > ap_return_0;
    sc_out< sc_lv<60> > ap_return_1;


    // Module declarations
    Loop_unroll2_proc(sc_module_name name);
    SC_HAS_PROCESS(Loop_unroll2_proc);

    ~Loop_unroll2_proc();

    sc_trace_file* mVcdFile;

    Loop_unroll2_proccud* PC1_U;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<6> > PC1_address0;
    sc_signal< sc_logic > PC1_ce0;
    sc_signal< sc_lv<6> > PC1_q0;
    sc_signal< sc_logic > key_blk_n;
    sc_signal< sc_lv<64> > key_read_reg_158;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<6> > i_fu_97_p2;
    sc_signal< sc_lv<6> > i_reg_166;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln182_fu_91_p2;
    sc_signal< sc_lv<63> > trunc_ln184_1_fu_108_p1;
    sc_signal< sc_lv<63> > trunc_ln184_1_reg_176;
    sc_signal< sc_lv<64> > permuted_choice_1_fu_151_p3;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<64> > permuted_choice_1_0_s_reg_69;
    sc_signal< sc_lv<6> > i_1_i_reg_80;
    sc_signal< sc_lv<64> > zext_ln184_fu_103_p1;
    sc_signal< sc_lv<60> > trunc_ln182_fu_112_p1;
    sc_signal< sc_lv<7> > zext_ln184_1_fu_128_p1;
    sc_signal< sc_lv<7> > sub_ln184_fu_132_p2;
    sc_signal< sc_lv<64> > zext_ln184_2_fu_138_p1;
    sc_signal< sc_lv<64> > lshr_ln184_fu_142_p2;
    sc_signal< sc_lv<1> > trunc_ln184_fu_147_p1;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<6> ap_const_lv6_38;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<7> ap_const_lv7_40;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_PC1_address0();
    void thread_PC1_ce0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_i_fu_97_p2();
    void thread_icmp_ln182_fu_91_p2();
    void thread_key_blk_n();
    void thread_key_read();
    void thread_lshr_ln184_fu_142_p2();
    void thread_permuted_choice_1_fu_151_p3();
    void thread_sub_ln184_fu_132_p2();
    void thread_trunc_ln182_fu_112_p1();
    void thread_trunc_ln184_1_fu_108_p1();
    void thread_trunc_ln184_fu_147_p1();
    void thread_zext_ln184_1_fu_128_p1();
    void thread_zext_ln184_2_fu_138_p1();
    void thread_zext_ln184_fu_103_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif

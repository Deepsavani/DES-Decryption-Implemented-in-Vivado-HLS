-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_Pipeline_loop4_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    sub_key_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    sub_key_ce0 : OUT STD_LOGIC;
    sub_key_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Loop_Pipeline_loop4_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_2A : STD_LOGIC_VECTOR (5 downto 0) := "101010";
    constant ap_const_lv6_2B : STD_LOGIC_VECTOR (5 downto 0) := "101011";
    constant ap_const_lv48_840000000000 : STD_LOGIC_VECTOR (47 downto 0) := "100001000000000000000000000000000000000000000000";
    constant ap_const_lv47_780000000000 : STD_LOGIC_VECTOR (46 downto 0) := "11110000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal P_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal P_ce0 : STD_LOGIC;
    signal P_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal E_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal E_ce0 : STD_LOGIC;
    signal E_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal S_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal S_ce0 : STD_LOGIC;
    signal S_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal i_fu_276_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_690 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal j_fu_300_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_698 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln227_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_input_fu_346_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal xor_ln232_fu_370_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal xor_ln232_reg_718 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal xor_ln232_1_fu_376_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal xor_ln232_1_reg_723 : STD_LOGIC_VECTOR (46 downto 0);
    signal j_1_fu_388_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_reg_731 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal sub_ln240_fu_420_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln240_reg_736 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln235_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln240_2_fu_448_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln240_2_reg_741 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln243_1_fu_460_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln243_1_reg_746 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln246_1_fu_589_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln246_1_reg_751 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal j_2_fu_622_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_2_reg_764 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln252_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln254_1_fu_633_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln254_1_reg_774 : STD_LOGIC_VECTOR (30 downto 0);
    signal R_fu_637_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_function_res_fu_663_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal temp_reg_172 : STD_LOGIC_VECTOR (31 downto 0);
    signal L_0_loc_0_reg_182 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_i_reg_193 : STD_LOGIC_VECTOR (4 downto 0);
    signal s_input_0_i_reg_205 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln223_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_i_reg_217 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_2_i_reg_228 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal f_function_res_0_i_reg_240 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_3_i_reg_251 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln229_fu_306_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln232_fu_317_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln246_2_fu_595_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln254_fu_628_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_output_1_fu_104 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_output_fu_603_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln232_fu_311_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln229_fu_322_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln229_1_fu_328_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln229_fu_332_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln229_1_fu_342_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln229_fu_338_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln232_3_fu_366_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln232_2_fu_362_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln232_1_fu_358_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal trunc_ln232_fu_354_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal trunc_ln240_fu_394_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_398_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln240_fu_410_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln240_fu_406_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln240_1_fu_416_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln240_2_fu_430_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln240_4_fu_426_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln240_1_fu_442_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln240_5_fu_438_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln243_fu_454_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln240_fu_466_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln240_3_fu_473_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal lshr_ln240_fu_477_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal and_ln240_fu_483_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln240_6_fu_488_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal lshr_ln240_1_fu_491_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_fu_501_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln240_1_fu_497_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln240_2_fu_469_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal lshr_ln243_fu_525_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal and_ln243_fu_531_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal zext_ln243_fu_536_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal lshr_ln243_1_fu_539_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal trunc_ln243_fu_545_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_515_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln241_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_553_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln246_fu_563_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln243_fu_549_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln246_fu_567_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_fu_577_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln246_1_fu_573_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln246_fu_585_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln246_fu_599_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sub_ln254_fu_643_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln254_1_fu_649_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln254_fu_653_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln254_fu_659_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component Loop_Pipeline_loodEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component Loop_Pipeline_looeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component Loop_Pipeline_loofYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;



begin
    P_U : component Loop_Pipeline_loodEe
    generic map (
        DataWidth => 6,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => P_address0,
        ce0 => P_ce0,
        q0 => P_q0);

    E_U : component Loop_Pipeline_looeOg
    generic map (
        DataWidth => 6,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => E_address0,
        ce0 => E_ce0,
        q0 => E_q0);

    S_U : component Loop_Pipeline_loofYi
    generic map (
        DataWidth => 4,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => S_address0,
        ce0 => S_ce0,
        q0 => S_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln223_fu_270_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if (((icmp_ln223_fu_270_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_return_0_preg <= temp_reg_172;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if (((icmp_ln223_fu_270_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_return_1_preg <= L_0_loc_0_reg_182;
                end if; 
            end if;
        end if;
    end process;


    L_0_loc_0_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                L_0_loc_0_reg_182 <= p_read1;
            elsif (((icmp_ln252_fu_616_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                L_0_loc_0_reg_182 <= temp_reg_172;
            end if; 
        end if;
    end process;

    f_function_res_0_i_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln235_fu_382_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                f_function_res_0_i_reg_240 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                f_function_res_0_i_reg_240 <= f_function_res_fu_663_p3;
            end if; 
        end if;
    end process;

    i_3_i_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_3_i_reg_193 <= ap_const_lv5_0;
            elsif (((icmp_ln252_fu_616_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i_3_i_reg_193 <= i_reg_690;
            end if; 
        end if;
    end process;

    j_1_i_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_1_i_reg_217 <= j_reg_698;
            elsif (((icmp_ln223_fu_270_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_1_i_reg_217 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_2_i_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                j_2_i_reg_228 <= j_1_reg_731;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_2_i_reg_228 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_3_i_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln235_fu_382_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                j_3_i_reg_251 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                j_3_i_reg_251 <= j_2_reg_764;
            end if; 
        end if;
    end process;

    s_input_0_i_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                s_input_0_i_reg_205 <= s_input_fu_346_p3;
            elsif (((icmp_ln223_fu_270_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                s_input_0_i_reg_205 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_output_1_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                s_output_1_fu_104 <= s_output_fu_603_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                s_output_1_fu_104 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    temp_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                temp_reg_172 <= p_read;
            elsif (((icmp_ln252_fu_616_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                temp_reg_172 <= R_fu_637_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln246_1_reg_751 <= add_ln246_1_fu_589_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_690 <= i_fu_276_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                j_1_reg_731 <= j_1_fu_388_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                j_2_reg_764 <= j_2_fu_622_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_698 <= j_fu_300_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln235_fu_382_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    sub_ln240_2_reg_741(5 downto 1) <= sub_ln240_2_fu_448_p2(5 downto 1);
                    sub_ln240_reg_736(6 downto 1) <= sub_ln240_fu_420_p2(6 downto 1);
                    sub_ln243_1_reg_746(5 downto 1) <= sub_ln243_1_fu_460_p2(5 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln252_fu_616_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                trunc_ln254_1_reg_774 <= trunc_ln254_1_fu_633_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                xor_ln232_1_reg_723 <= xor_ln232_1_fu_376_p2;
                xor_ln232_reg_718 <= xor_ln232_fu_370_p2;
            end if;
        end if;
    end process;
    sub_ln240_reg_736(0) <= '0';
    sub_ln240_2_reg_741(0) <= '0';
    sub_ln243_1_reg_746(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln227_fu_294_p2, ap_CS_fsm_state6, icmp_ln235_fu_382_p2, ap_CS_fsm_state10, icmp_ln252_fu_616_p2, icmp_ln223_fu_270_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln223_fu_270_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln227_fu_294_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln235_fu_382_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln252_fu_616_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    E_address0 <= zext_ln229_fu_306_p1(6 - 1 downto 0);

    E_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            E_ce0 <= ap_const_logic_1;
        else 
            E_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    P_address0 <= zext_ln254_fu_628_p1(5 - 1 downto 0);

    P_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            P_ce0 <= ap_const_logic_1;
        else 
            P_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    R_fu_637_p2 <= (f_function_res_0_i_reg_240 xor L_0_loc_0_reg_182);
    S_address0 <= sext_ln246_2_fu_595_p1(9 - 1 downto 0);

    S_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            S_ce0 <= ap_const_logic_1;
        else 
            S_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln246_1_fu_589_p2 <= std_logic_vector(signed(sext_ln246_1_fu_573_p1) + signed(zext_ln246_fu_585_p1));
    add_ln246_fu_567_p2 <= std_logic_vector(signed(sext_ln246_fu_563_p1) + signed(sext_ln243_fu_549_p1));
    and_ln240_fu_483_p2 <= (xor_ln232_reg_718 and lshr_ln240_fu_477_p2);
    and_ln243_fu_531_p2 <= (xor_ln232_1_reg_723 and lshr_ln243_fu_525_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln223_fu_270_p2)
    begin
        if (((icmp_ln223_fu_270_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln223_fu_270_p2)
    begin
        if (((icmp_ln223_fu_270_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state2, temp_reg_172, icmp_ln223_fu_270_p2, ap_return_0_preg)
    begin
        if (((icmp_ln223_fu_270_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_return_0 <= temp_reg_172;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state2, L_0_loc_0_reg_182, icmp_ln223_fu_270_p2, ap_return_1_preg)
    begin
        if (((icmp_ln223_fu_270_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_return_1 <= L_0_loc_0_reg_182;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;

    f_function_res_fu_663_p3 <= (trunc_ln254_1_reg_774 & trunc_ln254_fu_659_p1);
    i_fu_276_p2 <= std_logic_vector(unsigned(i_3_i_reg_193) + unsigned(ap_const_lv5_1));
    icmp_ln223_fu_270_p2 <= "1" when (i_3_i_reg_193 = ap_const_lv5_10) else "0";
    icmp_ln227_fu_294_p2 <= "1" when (j_1_i_reg_217 = ap_const_lv6_30) else "0";
    icmp_ln235_fu_382_p2 <= "1" when (j_2_i_reg_228 = ap_const_lv4_8) else "0";
    icmp_ln252_fu_616_p2 <= "1" when (j_3_i_reg_251 = ap_const_lv6_20) else "0";
    j_1_fu_388_p2 <= std_logic_vector(unsigned(j_2_i_reg_228) + unsigned(ap_const_lv4_1));
    j_2_fu_622_p2 <= std_logic_vector(unsigned(j_3_i_reg_251) + unsigned(ap_const_lv6_1));
    j_fu_300_p2 <= std_logic_vector(unsigned(j_1_i_reg_217) + unsigned(ap_const_lv6_1));
    lshr_ln229_fu_332_p2 <= std_logic_vector(shift_right(unsigned(temp_reg_172),to_integer(unsigned('0' & zext_ln229_1_fu_328_p1(31-1 downto 0)))));
    lshr_ln240_1_fu_491_p2 <= std_logic_vector(shift_right(unsigned(and_ln240_fu_483_p2),to_integer(unsigned('0' & zext_ln240_6_fu_488_p1(31-1 downto 0)))));
    lshr_ln240_fu_477_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv48_840000000000),to_integer(unsigned('0' & zext_ln240_3_fu_473_p1(31-1 downto 0)))));
    lshr_ln243_1_fu_539_p2 <= std_logic_vector(shift_right(unsigned(and_ln243_fu_531_p2),to_integer(unsigned('0' & zext_ln243_fu_536_p1(31-1 downto 0)))));
    lshr_ln243_fu_525_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv47_780000000000),to_integer(unsigned('0' & zext_ln240_2_fu_469_p1(31-1 downto 0)))));
    lshr_ln254_fu_653_p2 <= std_logic_vector(shift_right(unsigned(s_output_1_fu_104),to_integer(unsigned('0' & zext_ln254_1_fu_649_p1(31-1 downto 0)))));
    or_ln241_fu_509_p2 <= (trunc_ln240_1_fu_497_p1 or tmp_fu_501_p3);
    s_input_fu_346_p3 <= (trunc_ln229_1_fu_342_p1 & trunc_ln229_fu_338_p1);
    s_output_fu_603_p3 <= (trunc_ln246_fu_599_p1 & S_q0);
        sext_ln240_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln240_reg_736),32));

        sext_ln243_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln243_fu_545_p1),9));

        sext_ln246_1_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln246_fu_567_p2),11));

        sext_ln246_2_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln246_1_reg_751),64));

        sext_ln246_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_fu_553_p4),9));

    shl_ln240_2_fu_430_p3 <= (trunc_ln240_fu_394_p1 & ap_const_lv2_0);
    shl_ln240_fu_410_p2 <= std_logic_vector(shift_left(unsigned(j_2_i_reg_228),to_integer(unsigned('0' & ap_const_lv4_1(4-1 downto 0)))));
    shl_ln_fu_398_p3 <= (trunc_ln240_fu_394_p1 & ap_const_lv3_0);
    sub_key_address0 <= zext_ln232_fu_317_p1(4 - 1 downto 0);

    sub_key_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sub_key_ce0 <= ap_const_logic_1;
        else 
            sub_key_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln229_fu_322_p2 <= std_logic_vector(signed(ap_const_lv6_20) - signed(E_q0));
    sub_ln232_fu_311_p2 <= std_logic_vector(unsigned(ap_const_lv5_F) - unsigned(i_3_i_reg_193));
    sub_ln240_1_fu_442_p2 <= std_logic_vector(signed(ap_const_lv6_2A) - signed(zext_ln240_4_fu_426_p1));
    sub_ln240_2_fu_448_p2 <= std_logic_vector(unsigned(sub_ln240_1_fu_442_p2) - unsigned(zext_ln240_5_fu_438_p1));
    sub_ln240_fu_420_p2 <= std_logic_vector(unsigned(zext_ln240_fu_406_p1) - unsigned(zext_ln240_1_fu_416_p1));
    sub_ln243_1_fu_460_p2 <= std_logic_vector(unsigned(sub_ln243_fu_454_p2) - unsigned(zext_ln240_5_fu_438_p1));
    sub_ln243_fu_454_p2 <= std_logic_vector(signed(ap_const_lv6_2B) - signed(zext_ln240_4_fu_426_p1));
    sub_ln254_fu_643_p2 <= std_logic_vector(signed(ap_const_lv6_20) - signed(P_q0));
    tmp_1_fu_577_p3 <= (j_2_i_reg_228 & ap_const_lv6_0);
    tmp_6_fu_515_p4 <= lshr_ln240_1_fu_491_p2(7 downto 5);
    tmp_fu_501_p3 <= lshr_ln240_1_fu_491_p2(4 downto 4);
    tmp_s_fu_553_p4 <= ((tmp_6_fu_515_p4 & or_ln241_fu_509_p2) & ap_const_lv4_0);
    trunc_ln229_1_fu_342_p1 <= s_input_0_i_reg_205(63 - 1 downto 0);
    trunc_ln229_fu_338_p1 <= lshr_ln229_fu_332_p2(1 - 1 downto 0);
    trunc_ln232_1_fu_358_p1 <= sub_key_q0(47 - 1 downto 0);
    trunc_ln232_2_fu_362_p1 <= s_input_0_i_reg_205(48 - 1 downto 0);
    trunc_ln232_3_fu_366_p1 <= sub_key_q0(48 - 1 downto 0);
    trunc_ln232_fu_354_p1 <= s_input_0_i_reg_205(47 - 1 downto 0);
    trunc_ln240_1_fu_497_p1 <= lshr_ln240_1_fu_491_p2(1 - 1 downto 0);
    trunc_ln240_fu_394_p1 <= j_2_i_reg_228(3 - 1 downto 0);
    trunc_ln243_fu_545_p1 <= lshr_ln243_1_fu_539_p2(8 - 1 downto 0);
    trunc_ln246_fu_599_p1 <= s_output_1_fu_104(28 - 1 downto 0);
    trunc_ln254_1_fu_633_p1 <= f_function_res_0_i_reg_240(31 - 1 downto 0);
    trunc_ln254_fu_659_p1 <= lshr_ln254_fu_653_p2(1 - 1 downto 0);
    xor_ln232_1_fu_376_p2 <= (trunc_ln232_fu_354_p1 xor trunc_ln232_1_fu_358_p1);
    xor_ln232_fu_370_p2 <= (trunc_ln232_3_fu_366_p1 xor trunc_ln232_2_fu_362_p1);
    zext_ln229_1_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln229_fu_322_p2),32));
    zext_ln229_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_i_reg_217),64));
    zext_ln232_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln232_fu_311_p2),64));
    zext_ln240_1_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln240_fu_410_p2),7));
    zext_ln240_2_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln240_fu_466_p1),47));
    zext_ln240_3_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln240_fu_466_p1),48));
    zext_ln240_4_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln240_fu_410_p2),6));
    zext_ln240_5_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln240_2_fu_430_p3),6));
    zext_ln240_6_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln240_2_reg_741),48));
    zext_ln240_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_398_p3),7));
    zext_ln243_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln243_1_reg_746),47));
    zext_ln246_fu_585_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_577_p3),11));
    zext_ln254_1_fu_649_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln254_fu_643_p2),32));
    zext_ln254_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_3_i_reg_251),64));
end behav;

// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_unroll2_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        key_dout,
        key_empty_n,
        key_read,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] key_dout;
input   key_empty_n;
output   key_read;
output  [63:0] ap_return_0;
output  [59:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg key_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] PC1_address0;
reg    PC1_ce0;
wire   [5:0] PC1_q0;
reg    key_blk_n;
reg   [63:0] key_read_reg_158;
reg    ap_block_state1;
wire   [5:0] i_fu_97_p2;
reg   [5:0] i_reg_166;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln182_fu_91_p2;
wire   [62:0] trunc_ln184_1_fu_108_p1;
reg   [62:0] trunc_ln184_1_reg_176;
wire   [63:0] permuted_choice_1_fu_151_p3;
wire    ap_CS_fsm_state3;
reg   [63:0] permuted_choice_1_0_s_reg_69;
reg   [5:0] i_1_i_reg_80;
wire   [63:0] zext_ln184_fu_103_p1;
wire   [59:0] trunc_ln182_fu_112_p1;
wire   [6:0] zext_ln184_1_fu_128_p1;
wire   [6:0] sub_ln184_fu_132_p2;
wire   [63:0] zext_ln184_2_fu_138_p1;
wire   [63:0] lshr_ln184_fu_142_p2;
wire   [0:0] trunc_ln184_fu_147_p1;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
end

Loop_unroll2_proccud #(
    .DataWidth( 6 ),
    .AddressRange( 56 ),
    .AddressWidth( 6 ))
PC1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(PC1_address0),
    .ce0(PC1_ce0),
    .q0(PC1_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln182_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_1_i_reg_80 <= i_reg_166;
    end else if ((~((ap_start == 1'b0) | (key_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_1_i_reg_80 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        permuted_choice_1_0_s_reg_69 <= permuted_choice_1_fu_151_p3;
    end else if ((~((ap_start == 1'b0) | (key_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        permuted_choice_1_0_s_reg_69 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_166 <= i_fu_97_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (key_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        key_read_reg_158 <= key_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln182_fu_91_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln184_1_reg_176 <= trunc_ln184_1_fu_108_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        PC1_ce0 = 1'b1;
    end else begin
        PC1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln182_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln182_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        key_blk_n = key_empty_n;
    end else begin
        key_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (key_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        key_read = 1'b1;
    end else begin
        key_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (key_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln182_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign PC1_address0 = zext_ln184_fu_103_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (key_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_return_0 = permuted_choice_1_0_s_reg_69;

assign ap_return_1 = trunc_ln182_fu_112_p1;

assign i_fu_97_p2 = (i_1_i_reg_80 + 6'd1);

assign icmp_ln182_fu_91_p2 = ((i_1_i_reg_80 == 6'd56) ? 1'b1 : 1'b0);

assign lshr_ln184_fu_142_p2 = key_read_reg_158 >> zext_ln184_2_fu_138_p1;

assign permuted_choice_1_fu_151_p3 = {{trunc_ln184_1_reg_176}, {trunc_ln184_fu_147_p1}};

assign sub_ln184_fu_132_p2 = ($signed(7'd64) - $signed(zext_ln184_1_fu_128_p1));

assign trunc_ln182_fu_112_p1 = permuted_choice_1_0_s_reg_69[59:0];

assign trunc_ln184_1_fu_108_p1 = permuted_choice_1_0_s_reg_69[62:0];

assign trunc_ln184_fu_147_p1 = lshr_ln184_fu_142_p2[0:0];

assign zext_ln184_1_fu_128_p1 = PC1_q0;

assign zext_ln184_2_fu_138_p1 = sub_ln184_fu_132_p2;

assign zext_ln184_fu_103_p1 = i_1_i_reg_80;

endmodule //Loop_unroll2_proc

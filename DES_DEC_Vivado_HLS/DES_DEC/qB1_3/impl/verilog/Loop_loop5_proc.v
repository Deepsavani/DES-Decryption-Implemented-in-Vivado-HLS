// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_loop5_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        ap_return
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] p_read;
input  [31:0] p_read1;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] PI_address0;
reg    PI_ce0;
wire   [6:0] PI_q0;
wire   [63:0] pre_output_fu_75_p3;
reg   [63:0] pre_output_reg_130;
reg    ap_block_state1;
wire   [6:0] i_fu_89_p2;
reg   [6:0] i_reg_138;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln267_fu_83_p2;
wire   [62:0] trunc_ln270_1_fu_100_p1;
reg   [62:0] trunc_ln270_1_reg_148;
wire   [63:0] inv_init_perm_res_fu_123_p3;
wire    ap_CS_fsm_state3;
reg   [6:0] i_4_i_reg_53;
reg   [63:0] inv_init_perm_res_0_s_reg_64;
wire   [63:0] zext_ln270_fu_95_p1;
wire   [6:0] sub_ln270_fu_104_p2;
wire   [63:0] zext_ln270_1_fu_110_p1;
wire   [63:0] lshr_ln270_fu_114_p2;
wire   [0:0] trunc_ln270_fu_119_p1;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
end

Loop_loop5_proc_PI #(
    .DataWidth( 7 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
PI_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(PI_address0),
    .ce0(PI_ce0),
    .q0(PI_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln267_fu_83_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_4_i_reg_53 <= i_reg_138;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_4_i_reg_53 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        inv_init_perm_res_0_s_reg_64 <= inv_init_perm_res_fu_123_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        inv_init_perm_res_0_s_reg_64 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_138 <= i_fu_89_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        pre_output_reg_130 <= pre_output_fu_75_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln267_fu_83_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln270_1_reg_148 <= trunc_ln270_1_fu_100_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        PI_ce0 = 1'b1;
    end else begin
        PI_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln267_fu_83_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln267_fu_83_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln267_fu_83_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign PI_address0 = zext_ln270_fu_95_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_return = inv_init_perm_res_0_s_reg_64;

assign i_fu_89_p2 = (i_4_i_reg_53 + 7'd1);

assign icmp_ln267_fu_83_p2 = ((i_4_i_reg_53 == 7'd64) ? 1'b1 : 1'b0);

assign inv_init_perm_res_fu_123_p3 = {{trunc_ln270_1_reg_148}, {trunc_ln270_fu_119_p1}};

assign lshr_ln270_fu_114_p2 = pre_output_reg_130 >> zext_ln270_1_fu_110_p1;

assign pre_output_fu_75_p3 = {{p_read}, {p_read1}};

assign sub_ln270_fu_104_p2 = ($signed(7'd64) - $signed(PI_q0));

assign trunc_ln270_1_fu_100_p1 = inv_init_perm_res_0_s_reg_64[62:0];

assign trunc_ln270_fu_119_p1 = lshr_ln270_fu_114_p2[0:0];

assign zext_ln270_1_fu_110_p1 = sub_ln270_fu_104_p2;

assign zext_ln270_fu_95_p1 = i_4_i_reg_53;

endmodule //Loop_loop5_proc

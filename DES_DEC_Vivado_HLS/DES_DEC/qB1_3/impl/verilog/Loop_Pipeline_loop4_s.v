// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_Pipeline_loop4_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        sub_key_address0,
        sub_key_ce0,
        sub_key_q0,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] p_read;
input  [31:0] p_read1;
output  [3:0] sub_key_address0;
output   sub_key_ce0;
input  [63:0] sub_key_q0;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg sub_key_ce0;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] P_address0;
reg    P_ce0;
wire   [5:0] P_q0;
wire   [5:0] E_address0;
reg    E_ce0;
wire   [5:0] E_q0;
wire   [8:0] S_address0;
reg    S_ce0;
wire   [3:0] S_q0;
reg    ap_block_state1;
wire   [4:0] i_fu_276_p2;
reg   [4:0] i_reg_690;
wire    ap_CS_fsm_state2;
wire   [5:0] j_fu_300_p2;
reg   [5:0] j_reg_698;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln227_fu_294_p2;
wire   [63:0] s_input_fu_346_p3;
wire    ap_CS_fsm_state4;
wire   [47:0] xor_ln232_fu_370_p2;
reg   [47:0] xor_ln232_reg_718;
wire    ap_CS_fsm_state5;
wire   [46:0] xor_ln232_1_fu_376_p2;
reg   [46:0] xor_ln232_1_reg_723;
wire   [3:0] j_1_fu_388_p2;
reg   [3:0] j_1_reg_731;
wire    ap_CS_fsm_state6;
wire   [6:0] sub_ln240_fu_420_p2;
reg   [6:0] sub_ln240_reg_736;
wire   [0:0] icmp_ln235_fu_382_p2;
wire   [5:0] sub_ln240_2_fu_448_p2;
reg   [5:0] sub_ln240_2_reg_741;
wire   [5:0] sub_ln243_1_fu_460_p2;
reg   [5:0] sub_ln243_1_reg_746;
wire   [10:0] add_ln246_1_fu_589_p2;
reg   [10:0] add_ln246_1_reg_751;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire   [5:0] j_2_fu_622_p2;
reg   [5:0] j_2_reg_764;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln252_fu_616_p2;
wire   [30:0] trunc_ln254_1_fu_633_p1;
reg   [30:0] trunc_ln254_1_reg_774;
wire   [31:0] R_fu_637_p2;
wire   [31:0] f_function_res_fu_663_p3;
wire    ap_CS_fsm_state11;
reg   [31:0] temp_reg_172;
reg   [31:0] L_0_loc_0_reg_182;
reg   [4:0] i_3_i_reg_193;
reg   [63:0] s_input_0_i_reg_205;
wire   [0:0] icmp_ln223_fu_270_p2;
reg   [5:0] j_1_i_reg_217;
reg   [3:0] j_2_i_reg_228;
wire    ap_CS_fsm_state9;
reg   [31:0] f_function_res_0_i_reg_240;
reg   [5:0] j_3_i_reg_251;
wire   [63:0] zext_ln229_fu_306_p1;
wire   [63:0] zext_ln232_fu_317_p1;
wire  signed [63:0] sext_ln246_2_fu_595_p1;
wire   [63:0] zext_ln254_fu_628_p1;
reg   [31:0] s_output_1_fu_104;
wire   [31:0] s_output_fu_603_p3;
wire   [4:0] sub_ln232_fu_311_p2;
wire   [5:0] sub_ln229_fu_322_p2;
wire   [31:0] zext_ln229_1_fu_328_p1;
wire   [31:0] lshr_ln229_fu_332_p2;
wire   [62:0] trunc_ln229_1_fu_342_p1;
wire   [0:0] trunc_ln229_fu_338_p1;
wire   [47:0] trunc_ln232_3_fu_366_p1;
wire   [47:0] trunc_ln232_2_fu_362_p1;
wire   [46:0] trunc_ln232_1_fu_358_p1;
wire   [46:0] trunc_ln232_fu_354_p1;
wire   [2:0] trunc_ln240_fu_394_p1;
wire   [5:0] shl_ln_fu_398_p3;
wire   [3:0] shl_ln240_fu_410_p2;
wire   [6:0] zext_ln240_fu_406_p1;
wire   [6:0] zext_ln240_1_fu_416_p1;
wire   [4:0] shl_ln240_2_fu_430_p3;
wire   [5:0] zext_ln240_4_fu_426_p1;
wire   [5:0] sub_ln240_1_fu_442_p2;
wire   [5:0] zext_ln240_5_fu_438_p1;
wire   [5:0] sub_ln243_fu_454_p2;
wire  signed [31:0] sext_ln240_fu_466_p1;
wire   [47:0] zext_ln240_3_fu_473_p1;
wire   [47:0] lshr_ln240_fu_477_p2;
wire   [47:0] and_ln240_fu_483_p2;
wire   [47:0] zext_ln240_6_fu_488_p1;
wire   [47:0] lshr_ln240_1_fu_491_p2;
wire   [0:0] tmp_fu_501_p3;
wire   [0:0] trunc_ln240_1_fu_497_p1;
wire   [46:0] zext_ln240_2_fu_469_p1;
wire   [46:0] lshr_ln243_fu_525_p2;
wire   [46:0] and_ln243_fu_531_p2;
wire   [46:0] zext_ln243_fu_536_p1;
wire   [46:0] lshr_ln243_1_fu_539_p2;
wire   [7:0] trunc_ln243_fu_545_p1;
wire   [2:0] tmp_6_fu_515_p4;
wire   [0:0] or_ln241_fu_509_p2;
wire   [7:0] tmp_s_fu_553_p4;
wire  signed [8:0] sext_ln246_fu_563_p1;
wire  signed [8:0] sext_ln243_fu_549_p1;
wire   [8:0] add_ln246_fu_567_p2;
wire   [9:0] tmp_1_fu_577_p3;
wire  signed [10:0] sext_ln246_1_fu_573_p1;
wire   [10:0] zext_ln246_fu_585_p1;
wire   [27:0] trunc_ln246_fu_599_p1;
wire   [5:0] sub_ln254_fu_643_p2;
wire   [31:0] zext_ln254_1_fu_649_p1;
wire   [31:0] lshr_ln254_fu_653_p2;
wire   [0:0] trunc_ln254_fu_659_p1;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 11'd1;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
end

Loop_Pipeline_loodEe #(
    .DataWidth( 6 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
P_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(P_address0),
    .ce0(P_ce0),
    .q0(P_q0)
);

Loop_Pipeline_looeOg #(
    .DataWidth( 6 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
E_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(E_address0),
    .ce0(E_ce0),
    .q0(E_q0)
);

Loop_Pipeline_loofYi #(
    .DataWidth( 4 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
S_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(S_address0),
    .ce0(S_ce0),
    .q0(S_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln223_fu_270_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if (((icmp_ln223_fu_270_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_return_0_preg <= temp_reg_172;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if (((icmp_ln223_fu_270_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_return_1_preg <= L_0_loc_0_reg_182;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        L_0_loc_0_reg_182 <= p_read1;
    end else if (((icmp_ln252_fu_616_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        L_0_loc_0_reg_182 <= temp_reg_172;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln235_fu_382_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        f_function_res_0_i_reg_240 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        f_function_res_0_i_reg_240 <= f_function_res_fu_663_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_3_i_reg_193 <= 5'd0;
    end else if (((icmp_ln252_fu_616_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        i_3_i_reg_193 <= i_reg_690;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_1_i_reg_217 <= j_reg_698;
    end else if (((icmp_ln223_fu_270_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_1_i_reg_217 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        j_2_i_reg_228 <= j_1_reg_731;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        j_2_i_reg_228 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln235_fu_382_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        j_3_i_reg_251 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        j_3_i_reg_251 <= j_2_reg_764;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        s_input_0_i_reg_205 <= s_input_fu_346_p3;
    end else if (((icmp_ln223_fu_270_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        s_input_0_i_reg_205 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        s_output_1_fu_104 <= s_output_fu_603_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        s_output_1_fu_104 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        temp_reg_172 <= p_read;
    end else if (((icmp_ln252_fu_616_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        temp_reg_172 <= R_fu_637_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln246_1_reg_751 <= add_ln246_1_fu_589_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_690 <= i_fu_276_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_1_reg_731 <= j_1_fu_388_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        j_2_reg_764 <= j_2_fu_622_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_698 <= j_fu_300_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln235_fu_382_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        sub_ln240_2_reg_741[5 : 1] <= sub_ln240_2_fu_448_p2[5 : 1];
        sub_ln240_reg_736[6 : 1] <= sub_ln240_fu_420_p2[6 : 1];
        sub_ln243_1_reg_746[5 : 1] <= sub_ln243_1_fu_460_p2[5 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln252_fu_616_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        trunc_ln254_1_reg_774 <= trunc_ln254_1_fu_633_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        xor_ln232_1_reg_723 <= xor_ln232_1_fu_376_p2;
        xor_ln232_reg_718 <= xor_ln232_fu_370_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        E_ce0 = 1'b1;
    end else begin
        E_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        P_ce0 = 1'b1;
    end else begin
        P_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        S_ce0 = 1'b1;
    end else begin
        S_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln223_fu_270_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln223_fu_270_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln223_fu_270_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_return_0 = temp_reg_172;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if (((icmp_ln223_fu_270_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_return_1 = L_0_loc_0_reg_182;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sub_key_ce0 = 1'b1;
    end else begin
        sub_key_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln223_fu_270_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln227_fu_294_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln235_fu_382_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state10 : begin
            if (((icmp_ln252_fu_616_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign E_address0 = zext_ln229_fu_306_p1;

assign P_address0 = zext_ln254_fu_628_p1;

assign R_fu_637_p2 = (f_function_res_0_i_reg_240 ^ L_0_loc_0_reg_182);

assign S_address0 = sext_ln246_2_fu_595_p1;

assign add_ln246_1_fu_589_p2 = ($signed(sext_ln246_1_fu_573_p1) + $signed(zext_ln246_fu_585_p1));

assign add_ln246_fu_567_p2 = ($signed(sext_ln246_fu_563_p1) + $signed(sext_ln243_fu_549_p1));

assign and_ln240_fu_483_p2 = (xor_ln232_reg_718 & lshr_ln240_fu_477_p2);

assign and_ln243_fu_531_p2 = (xor_ln232_1_reg_723 & lshr_ln243_fu_525_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign f_function_res_fu_663_p3 = {{trunc_ln254_1_reg_774}, {trunc_ln254_fu_659_p1}};

assign i_fu_276_p2 = (i_3_i_reg_193 + 5'd1);

assign icmp_ln223_fu_270_p2 = ((i_3_i_reg_193 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln227_fu_294_p2 = ((j_1_i_reg_217 == 6'd48) ? 1'b1 : 1'b0);

assign icmp_ln235_fu_382_p2 = ((j_2_i_reg_228 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln252_fu_616_p2 = ((j_3_i_reg_251 == 6'd32) ? 1'b1 : 1'b0);

assign j_1_fu_388_p2 = (j_2_i_reg_228 + 4'd1);

assign j_2_fu_622_p2 = (j_3_i_reg_251 + 6'd1);

assign j_fu_300_p2 = (j_1_i_reg_217 + 6'd1);

assign lshr_ln229_fu_332_p2 = temp_reg_172 >> zext_ln229_1_fu_328_p1;

assign lshr_ln240_1_fu_491_p2 = and_ln240_fu_483_p2 >> zext_ln240_6_fu_488_p1;

assign lshr_ln240_fu_477_p2 = 48'd145135534866432 >> zext_ln240_3_fu_473_p1;

assign lshr_ln243_1_fu_539_p2 = and_ln243_fu_531_p2 >> zext_ln243_fu_536_p1;

assign lshr_ln243_fu_525_p2 = 47'd131941395333120 >> zext_ln240_2_fu_469_p1;

assign lshr_ln254_fu_653_p2 = s_output_1_fu_104 >> zext_ln254_1_fu_649_p1;

assign or_ln241_fu_509_p2 = (trunc_ln240_1_fu_497_p1 | tmp_fu_501_p3);

assign s_input_fu_346_p3 = {{trunc_ln229_1_fu_342_p1}, {trunc_ln229_fu_338_p1}};

assign s_output_fu_603_p3 = {{trunc_ln246_fu_599_p1}, {S_q0}};

assign sext_ln240_fu_466_p1 = $signed(sub_ln240_reg_736);

assign sext_ln243_fu_549_p1 = $signed(trunc_ln243_fu_545_p1);

assign sext_ln246_1_fu_573_p1 = $signed(add_ln246_fu_567_p2);

assign sext_ln246_2_fu_595_p1 = $signed(add_ln246_1_reg_751);

assign sext_ln246_fu_563_p1 = $signed(tmp_s_fu_553_p4);

assign shl_ln240_2_fu_430_p3 = {{trunc_ln240_fu_394_p1}, {2'd0}};

assign shl_ln240_fu_410_p2 = j_2_i_reg_228 << 4'd1;

assign shl_ln_fu_398_p3 = {{trunc_ln240_fu_394_p1}, {3'd0}};

assign sub_key_address0 = zext_ln232_fu_317_p1;

assign sub_ln229_fu_322_p2 = ($signed(6'd32) - $signed(E_q0));

assign sub_ln232_fu_311_p2 = (5'd15 - i_3_i_reg_193);

assign sub_ln240_1_fu_442_p2 = ($signed(6'd42) - $signed(zext_ln240_4_fu_426_p1));

assign sub_ln240_2_fu_448_p2 = (sub_ln240_1_fu_442_p2 - zext_ln240_5_fu_438_p1);

assign sub_ln240_fu_420_p2 = (zext_ln240_fu_406_p1 - zext_ln240_1_fu_416_p1);

assign sub_ln243_1_fu_460_p2 = (sub_ln243_fu_454_p2 - zext_ln240_5_fu_438_p1);

assign sub_ln243_fu_454_p2 = ($signed(6'd43) - $signed(zext_ln240_4_fu_426_p1));

assign sub_ln254_fu_643_p2 = ($signed(6'd32) - $signed(P_q0));

assign tmp_1_fu_577_p3 = {{j_2_i_reg_228}, {6'd0}};

assign tmp_6_fu_515_p4 = {{lshr_ln240_1_fu_491_p2[7:5]}};

assign tmp_fu_501_p3 = lshr_ln240_1_fu_491_p2[32'd4];

assign tmp_s_fu_553_p4 = {{{tmp_6_fu_515_p4}, {or_ln241_fu_509_p2}}, {4'd0}};

assign trunc_ln229_1_fu_342_p1 = s_input_0_i_reg_205[62:0];

assign trunc_ln229_fu_338_p1 = lshr_ln229_fu_332_p2[0:0];

assign trunc_ln232_1_fu_358_p1 = sub_key_q0[46:0];

assign trunc_ln232_2_fu_362_p1 = s_input_0_i_reg_205[47:0];

assign trunc_ln232_3_fu_366_p1 = sub_key_q0[47:0];

assign trunc_ln232_fu_354_p1 = s_input_0_i_reg_205[46:0];

assign trunc_ln240_1_fu_497_p1 = lshr_ln240_1_fu_491_p2[0:0];

assign trunc_ln240_fu_394_p1 = j_2_i_reg_228[2:0];

assign trunc_ln243_fu_545_p1 = lshr_ln243_1_fu_539_p2[7:0];

assign trunc_ln246_fu_599_p1 = s_output_1_fu_104[27:0];

assign trunc_ln254_1_fu_633_p1 = f_function_res_0_i_reg_240[30:0];

assign trunc_ln254_fu_659_p1 = lshr_ln254_fu_653_p2[0:0];

assign xor_ln232_1_fu_376_p2 = (trunc_ln232_fu_354_p1 ^ trunc_ln232_1_fu_358_p1);

assign xor_ln232_fu_370_p2 = (trunc_ln232_3_fu_366_p1 ^ trunc_ln232_2_fu_362_p1);

assign zext_ln229_1_fu_328_p1 = sub_ln229_fu_322_p2;

assign zext_ln229_fu_306_p1 = j_1_i_reg_217;

assign zext_ln232_fu_317_p1 = sub_ln232_fu_311_p2;

assign zext_ln240_1_fu_416_p1 = shl_ln240_fu_410_p2;

assign zext_ln240_2_fu_469_p1 = $unsigned(sext_ln240_fu_466_p1);

assign zext_ln240_3_fu_473_p1 = $unsigned(sext_ln240_fu_466_p1);

assign zext_ln240_4_fu_426_p1 = shl_ln240_fu_410_p2;

assign zext_ln240_5_fu_438_p1 = shl_ln240_2_fu_430_p3;

assign zext_ln240_6_fu_488_p1 = sub_ln240_2_reg_741;

assign zext_ln240_fu_406_p1 = shl_ln_fu_398_p3;

assign zext_ln243_fu_536_p1 = sub_ln243_1_reg_746;

assign zext_ln246_fu_585_p1 = tmp_1_fu_577_p3;

assign zext_ln254_1_fu_649_p1 = sub_ln254_fu_643_p2;

assign zext_ln254_fu_628_p1 = j_3_i_reg_251;

always @ (posedge ap_clk) begin
    sub_ln240_reg_736[0] <= 1'b0;
    sub_ln240_2_reg_741[0] <= 1'b0;
    sub_ln243_1_reg_746[0] <= 1'b1;
end

endmodule //Loop_Pipeline_loop4_s

-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity des_dec is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r : IN STD_LOGIC_VECTOR (63 downto 0);
    key : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of des_dec is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "des_dec,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35tl-cpg236-2L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.909000,HLS_SYN_LAT=5557,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=0,HLS_SYN_FF=1296,HLS_SYN_LUT=1687,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (27 downto 0) := "0000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (27 downto 0) := "0000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (27 downto 0) := "0000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (27 downto 0) := "0000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (27 downto 0) := "0000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (27 downto 0) := "0000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (27 downto 0) := "0001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (27 downto 0) := "0010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (27 downto 0) := "0100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (27 downto 0) := "1000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv6_38 : STD_LOGIC_VECTOR (5 downto 0) := "111000";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_2A : STD_LOGIC_VECTOR (5 downto 0) := "101010";
    constant ap_const_lv6_2B : STD_LOGIC_VECTOR (5 downto 0) := "101011";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv48_840000000000 : STD_LOGIC_VECTOR (47 downto 0) := "100001000000000000000000000000000000000000000000";
    constant ap_const_lv47_780000000000 : STD_LOGIC_VECTOR (46 downto 0) := "11110000000000000000000000000000000000000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal IP_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal IP_ce0 : STD_LOGIC;
    signal IP_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal PC1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal PC1_ce0 : STD_LOGIC;
    signal PC1_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal PC2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal PC2_ce0 : STD_LOGIC;
    signal PC2_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal E_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal E_ce0 : STD_LOGIC;
    signal E_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal S_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal S_ce0 : STD_LOGIC;
    signal S_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal P_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal P_ce0 : STD_LOGIC;
    signal P_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal PI_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal PI_ce0 : STD_LOGIC;
    signal PI_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_512_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal reg_354 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal reg_365 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal reg_389 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal reg_433 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal reg_479 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal reg_490 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_746_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal reg_757 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal reg_781 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_868_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal trunc_ln174_1_fu_926_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln174_1_reg_1485 : STD_LOGIC_VECTOR (62 downto 0);
    signal L_reg_1490 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_fu_940_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_reg_1495 : STD_LOGIC_VECTOR (31 downto 0);
    signal init_perm_res_fu_953_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln184_1_fu_965_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln184_1_reg_1513 : STD_LOGIC_VECTOR (62 downto 0);
    signal permuted_choice_1_fu_1007_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal empty_11_reg_1549 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal empty_12_reg_1554 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal empty_14_reg_1559 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal sub_key_addr_reg_1567 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_9_fu_1143_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_9_reg_1572 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal trunc_ln218_1_fu_1156_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln218_1_reg_1585 : STD_LOGIC_VECTOR (62 downto 0);
    signal or_ln_fu_1169_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal pre_output_fu_1176_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal pre_output_reg_1598 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_input_fu_1207_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal xor_ln232_fu_1231_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal xor_ln232_reg_1621 : STD_LOGIC_VECTOR (46 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal xor_ln232_1_fu_1237_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal xor_ln232_1_reg_1626 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln240_fu_1243_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln240_reg_1634 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln240_fu_1260_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln240_reg_1639 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln240_1_fu_1271_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln240_1_reg_1644 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln240_5_fu_1282_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln240_5_reg_1649 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln240_fu_1287_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln240_reg_1654 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln240_1_fu_895_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal lshr_ln240_1_reg_1659 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal trunc_ln254_1_fu_1416_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln254_1_reg_1679 : STD_LOGIC_VECTOR (30 downto 0);
    signal R_1_fu_1420_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_function_res_fu_1435_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal trunc_ln270_1_fu_1447_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln270_1_reg_1702 : STD_LOGIC_VECTOR (62 downto 0);
    signal inv_init_perm_res_fu_1460_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal sub_key_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_key_ce0 : STD_LOGIC;
    signal sub_key_we0 : STD_LOGIC;
    signal sub_key_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal init_perm_res_0_reg_321 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_0_reg_332 : STD_LOGIC_VECTOR (6 downto 0);
    signal permuted_choice_1_0_reg_343 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_i_2_phi_fu_369_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_key_load_1_reg_377 : STD_LOGIC_VECTOR (63 downto 0);
    signal temp_reg_400 : STD_LOGIC_VECTOR (31 downto 0);
    signal L_0_reg_410 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_reg_421 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_reg_445 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_2_reg_456 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal f_function_res_0_reg_468 : STD_LOGIC_VECTOR (31 downto 0);
    signal inv_init_perm_res_0_reg_501 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln174_1_fu_921_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln184_1_fu_960_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln214_fu_1138_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln218_fu_1151_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln229_fu_1184_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln232_fu_1189_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln246_3_fu_1389_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln254_fu_1411_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln270_1_fu_1442_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal C_1_fu_188 : STD_LOGIC_VECTOR (27 downto 0);
    signal C_2_fu_1048_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal empty_17_fu_1028_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal C_3_fu_1100_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal D_fu_192 : STD_LOGIC_VECTOR (27 downto 0);
    signal D_1_fu_979_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal D_2_fu_1070_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal D_3_fu_1120_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal s_output_1_fu_196 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_output_fu_1398_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_512_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln246_1_fu_1366_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln246_2_fu_1371_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_512_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln246_fu_1357_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln246_fu_1384_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_746_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln240_fu_1255_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_746_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln184_2_fu_993_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln240_2_fu_1266_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_868_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_868_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_874_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_874_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln174_fu_944_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln184_fu_998_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln218_1_fu_1160_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal zext_ln229_1_fu_1194_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln240_4_fu_1291_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln254_1_fu_1426_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln270_fu_1451_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln240_fu_1296_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln240_6_fu_1302_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln240_3_fu_1307_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal and_ln243_fu_1336_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal zext_ln243_fu_1342_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal grp_fu_874_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln174_fu_949_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln184_fu_1003_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_13_fu_1019_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_15_fu_1023_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln203_fu_1034_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_3_fu_1038_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln204_fu_1056_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_s_fu_1060_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln197_fu_1096_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_2_fu_1088_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln198_fu_1116_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_4_fu_1108_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln218_1_fu_1160_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln218_fu_1165_p0 : STD_LOGIC_VECTOR (55 downto 0);
    signal trunc_ln218_fu_1165_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln232_fu_1189_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln229_1_fu_1194_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln229_fu_1199_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln229_1_fu_1203_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln229_fu_1199_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln232_3_fu_1227_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal trunc_ln232_2_fu_1223_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal trunc_ln232_1_fu_1219_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln232_fu_1215_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal shl_ln_fu_1247_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln240_1_fu_1275_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln240_fu_1296_p0 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_5_fu_1314_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln240_1_fu_1311_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln243_fu_899_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal zext_ln243_fu_1342_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_fu_1327_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln241_fu_1321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_1347_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln243_1_fu_904_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal trunc_ln246_fu_1362_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln246_2_fu_1371_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_8_fu_1376_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln246_1_fu_1394_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln254_1_fu_1426_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln254_fu_1431_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln254_fu_1431_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln270_fu_1456_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (27 downto 0);

    component des_dec_IP IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component des_dec_PC1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component des_dec_PC2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component des_dec_E IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component des_dec_S IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component des_dec_P IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component des_dec_PI IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component des_dec_sub_key IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    IP_U : component des_dec_IP
    generic map (
        DataWidth => 7,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => IP_address0,
        ce0 => IP_ce0,
        q0 => IP_q0);

    PC1_U : component des_dec_PC1
    generic map (
        DataWidth => 6,
        AddressRange => 56,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => PC1_address0,
        ce0 => PC1_ce0,
        q0 => PC1_q0);

    PC2_U : component des_dec_PC2
    generic map (
        DataWidth => 6,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => PC2_address0,
        ce0 => PC2_ce0,
        q0 => PC2_q0);

    E_U : component des_dec_E
    generic map (
        DataWidth => 6,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => E_address0,
        ce0 => E_ce0,
        q0 => E_q0);

    S_U : component des_dec_S
    generic map (
        DataWidth => 4,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => S_address0,
        ce0 => S_ce0,
        q0 => S_q0);

    P_U : component des_dec_P
    generic map (
        DataWidth => 6,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => P_address0,
        ce0 => P_ce0,
        q0 => P_q0);

    PI_U : component des_dec_PI
    generic map (
        DataWidth => 7,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => PI_address0,
        ce0 => PI_ce0,
        q0 => PI_q0);

    sub_key_U : component des_dec_sub_key
    generic map (
        DataWidth => 64,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sub_key_address0,
        ce0 => sub_key_ce0,
        we0 => sub_key_we0,
        d0 => sub_key_load_1_reg_377,
        q0 => sub_key_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    C_1_fu_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (empty_17_fu_1028_p2 = ap_const_lv1_1))) then 
                C_1_fu_188 <= C_3_fu_1100_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (empty_17_fu_1028_p2 = ap_const_lv1_0))) then 
                C_1_fu_188 <= C_2_fu_1048_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_fu_868_p2 = ap_const_lv1_1))) then 
                C_1_fu_188 <= permuted_choice_1_0_reg_343(55 downto 28);
            end if; 
        end if;
    end process;

    D_fu_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (empty_17_fu_1028_p2 = ap_const_lv1_1))) then 
                D_fu_192 <= D_3_fu_1120_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (empty_17_fu_1028_p2 = ap_const_lv1_0))) then 
                D_fu_192 <= D_2_fu_1070_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_fu_868_p2 = ap_const_lv1_1))) then 
                D_fu_192 <= D_1_fu_979_p1;
            end if; 
        end if;
    end process;

    L_0_reg_410_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_fu_868_p2 = ap_const_lv1_1)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    L_0_reg_410 <= L_reg_1490;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    L_0_reg_410 <= temp_reg_400;
                end if;
            end if; 
        end if;
    end process;

    f_function_res_0_reg_468_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (grp_fu_868_p2 = ap_const_lv1_1))) then 
                f_function_res_0_reg_468 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                f_function_res_0_reg_468 <= f_function_res_fu_1435_p3;
            end if; 
        end if;
    end process;

    i_0_reg_332_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_332 <= reg_433(7 - 1 downto 0);
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_332 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i_3_reg_421_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_fu_868_p2 = ap_const_lv1_1)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    i_3_reg_421 <= ap_const_lv5_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    i_3_reg_421 <= reg_354(5 - 1 downto 0);
                end if;
            end if; 
        end if;
    end process;

    init_perm_res_0_reg_321_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                init_perm_res_0_reg_321 <= init_perm_res_fu_953_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                init_perm_res_0_reg_321 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    inv_init_perm_res_0_reg_501_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                inv_init_perm_res_0_reg_501 <= inv_init_perm_res_fu_1460_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_fu_868_p2 = ap_const_lv1_1))) then 
                inv_init_perm_res_0_reg_501 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    j_1_reg_445_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                j_1_reg_445 <= reg_490(6 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_fu_868_p2 = ap_const_lv1_0))) then 
                j_1_reg_445 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_2_reg_456_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                j_2_reg_456 <= reg_365(4 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                j_2_reg_456 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    permuted_choice_1_0_reg_343_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                permuted_choice_1_0_reg_343 <= permuted_choice_1_fu_1007_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_fu_868_p2 = ap_const_lv1_1))) then 
                permuted_choice_1_0_reg_343 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    reg_354_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                reg_354 <= reg_479;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_fu_868_p2 = ap_const_lv1_1))) then 
                reg_354 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                reg_354 <= grp_fu_512_p2(6 - 1 downto 0);
            end if; 
        end if;
    end process;

    reg_365_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_fu_868_p2 = ap_const_lv1_1))) then 
                reg_365 <= reg_433(5 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_fu_868_p2 = ap_const_lv1_1))) then 
                reg_365 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                reg_365 <= grp_fu_512_p2(5 - 1 downto 0);
            end if; 
        end if;
    end process;

    reg_389_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                reg_389 <= reg_479;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                reg_389 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                reg_389 <= grp_fu_512_p2(6 - 1 downto 0);
            end if; 
        end if;
    end process;

    reg_433_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                reg_433 <= s_input_fu_1207_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_fu_868_p2 = ap_const_lv1_0))) then 
                reg_433 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                reg_433 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_512_p2),64));
            end if; 
        end if;
    end process;

    reg_479_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (grp_fu_868_p2 = ap_const_lv1_1))) then 
                reg_479 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                reg_479 <= reg_389;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                reg_479 <= grp_fu_512_p2(6 - 1 downto 0);
            end if; 
        end if;
    end process;

    reg_490_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                reg_490 <= reg_433(7 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_fu_868_p2 = ap_const_lv1_1))) then 
                reg_490 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                reg_490 <= grp_fu_512_p2(7 - 1 downto 0);
            end if; 
        end if;
    end process;

    s_output_1_fu_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                s_output_1_fu_196 <= s_output_fu_1398_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_fu_868_p2 = ap_const_lv1_1))) then 
                s_output_1_fu_196 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sub_key_load_1_reg_377_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                sub_key_load_1_reg_377 <= or_ln_fu_1169_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                sub_key_load_1_reg_377 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    temp_reg_400_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((grp_fu_868_p2 = ap_const_lv1_1)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    temp_reg_400 <= R_reg_1495;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    temp_reg_400 <= R_1_fu_1420_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_fu_868_p2 = ap_const_lv1_1))) then
                L_reg_1490 <= init_perm_res_0_reg_321(63 downto 32);
                R_reg_1495 <= R_fu_940_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                empty_11_reg_1549 <= grp_fu_868_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                empty_12_reg_1554 <= grp_fu_868_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                empty_14_reg_1559 <= grp_fu_868_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                lshr_ln240_1_reg_1659 <= lshr_ln240_1_fu_895_p2;
                sext_ln240_reg_1654 <= sext_ln240_fu_1287_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_fu_868_p2 = ap_const_lv1_1))) then
                pre_output_reg_1598 <= pre_output_fu_1176_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19))) then
                reg_757 <= grp_fu_746_p2(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_const_logic_1 = ap_CS_fsm_state18) and (grp_fu_868_p2 = ap_const_lv1_0)))) then
                reg_781 <= grp_fu_746_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (grp_fu_868_p2 = ap_const_lv1_0))) then
                    shl_ln240_reg_1639(3 downto 1) <= shl_ln240_fu_1260_p2(3 downto 1);
                trunc_ln240_reg_1634 <= trunc_ln240_fu_1243_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                sub_key_addr_reg_1567 <= zext_ln214_fu_1138_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_9_reg_1572 <= tmp_9_fu_1143_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_fu_868_p2 = ap_const_lv1_0))) then
                trunc_ln174_1_reg_1485 <= trunc_ln174_1_fu_926_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_fu_868_p2 = ap_const_lv1_0))) then
                trunc_ln184_1_reg_1513 <= trunc_ln184_1_fu_965_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_fu_868_p2 = ap_const_lv1_0))) then
                trunc_ln218_1_reg_1585 <= trunc_ln218_1_fu_1156_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (grp_fu_868_p2 = ap_const_lv1_0))) then
                trunc_ln254_1_reg_1679 <= trunc_ln254_1_fu_1416_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (grp_fu_868_p2 = ap_const_lv1_0))) then
                trunc_ln270_1_reg_1702 <= trunc_ln270_1_fu_1447_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                xor_ln232_1_reg_1626 <= xor_ln232_1_fu_1237_p2;
                xor_ln232_reg_1621 <= xor_ln232_fu_1231_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                    zext_ln240_1_reg_1644(3 downto 1) <= zext_ln240_1_fu_1271_p1(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                    zext_ln240_5_reg_1649(4 downto 2) <= zext_ln240_5_fu_1282_p1(4 downto 2);
            end if;
        end if;
    end process;
    shl_ln240_reg_1639(0) <= '0';
    zext_ln240_1_reg_1644(0) <= '0';
    zext_ln240_1_reg_1644(5 downto 4) <= "00";
    zext_ln240_5_reg_1649(1 downto 0) <= "00";
    zext_ln240_5_reg_1649(5) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state25, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state27, ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state15, grp_fu_868_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_fu_868_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_fu_868_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_fu_868_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_fu_868_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_fu_868_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (grp_fu_868_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (grp_fu_868_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (grp_fu_868_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (grp_fu_868_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    C_2_fu_1048_p3 <= (trunc_ln203_fu_1034_p1 & tmp_3_fu_1038_p4);
    C_3_fu_1100_p3 <= (trunc_ln197_fu_1096_p1 & tmp_2_fu_1088_p3);
    D_1_fu_979_p1 <= permuted_choice_1_0_reg_343(28 - 1 downto 0);
    D_2_fu_1070_p3 <= (trunc_ln204_fu_1056_p1 & tmp_s_fu_1060_p4);
    D_3_fu_1120_p3 <= (trunc_ln198_fu_1116_p1 & tmp_4_fu_1108_p3);
    E_address0 <= zext_ln229_fu_1184_p1(6 - 1 downto 0);

    E_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            E_ce0 <= ap_const_logic_1;
        else 
            E_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    IP_address0 <= zext_ln174_1_fu_921_p1(6 - 1 downto 0);

    IP_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            IP_ce0 <= ap_const_logic_1;
        else 
            IP_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    PC1_address0 <= zext_ln184_1_fu_960_p1(6 - 1 downto 0);

    PC1_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            PC1_ce0 <= ap_const_logic_1;
        else 
            PC1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    PC2_address0 <= zext_ln218_fu_1151_p1(6 - 1 downto 0);

    PC2_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            PC2_ce0 <= ap_const_logic_1;
        else 
            PC2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    PI_address0 <= zext_ln270_1_fu_1442_p1(6 - 1 downto 0);

    PI_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            PI_ce0 <= ap_const_logic_1;
        else 
            PI_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    P_address0 <= zext_ln254_fu_1411_p1(5 - 1 downto 0);

    P_ce0_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            P_ce0 <= ap_const_logic_1;
        else 
            P_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    R_1_fu_1420_p2 <= (f_function_res_0_reg_468 xor L_0_reg_410);
    R_fu_940_p1 <= init_perm_res_0_reg_321(32 - 1 downto 0);
    S_address0 <= sext_ln246_3_fu_1389_p1(9 - 1 downto 0);

    S_ce0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            S_ce0 <= ap_const_logic_1;
        else 
            S_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    and_ln240_fu_1296_p0 <= grp_fu_874_p2(48 - 1 downto 0);
    and_ln240_fu_1296_p2 <= (xor_ln232_1_reg_1626 and and_ln240_fu_1296_p0);
    and_ln243_fu_1336_p2 <= (xor_ln232_reg_1621 and lshr_ln243_fu_899_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state27, grp_fu_868_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) and (grp_fu_868_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_i_2_phi_fu_369_p4 <= reg_365;

    ap_ready_assign_proc : process(ap_CS_fsm_state27, grp_fu_868_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) and (grp_fu_868_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= inv_init_perm_res_0_reg_501;
    empty_13_fu_1019_p2 <= (empty_12_reg_1554 or empty_11_reg_1549);
    empty_15_fu_1023_p2 <= (empty_14_reg_1559 or empty_13_fu_1019_p2);
    empty_17_fu_1028_p2 <= (grp_fu_868_p2 or empty_15_fu_1023_p2);
    f_function_res_fu_1435_p3 <= (trunc_ln254_1_reg_1679 & trunc_ln254_fu_1431_p1);

    grp_fu_512_p0_assign_proc : process(reg_354, ap_CS_fsm_state14, reg_365, ap_CS_fsm_state18, reg_389, ap_CS_fsm_state25, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state22, ap_CS_fsm_state27, reg_479, ap_CS_fsm_state4, ap_CS_fsm_state12, reg_490, ap_CS_fsm_state15, ap_CS_fsm_state23, i_0_reg_332, i_3_reg_421, j_1_reg_445, j_2_reg_456, sext_ln246_1_fu_1366_p1, sext_ln246_2_fu_1371_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_512_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_490),11));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_512_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_479),11));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_512_p0 <= sext_ln246_2_fu_1371_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_512_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln246_1_fu_1366_p1),11));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_512_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_reg_456),11));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_512_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_445),11));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_512_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_421),11));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_512_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_389),11));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_512_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_365),11));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_512_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_354),11));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_512_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_332),11));
        else 
            grp_fu_512_p0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_512_p1_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state25, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state23, sext_ln246_fu_1357_p1, zext_ln246_fu_1384_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_512_p1 <= zext_ln246_fu_1384_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln246_fu_1357_p1),11));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv4_1),11));
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            grp_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv5_1),11));
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            grp_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv6_1),11));
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv7_1),11));
        else 
            grp_fu_512_p1 <= "XXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_512_p2 <= std_logic_vector(unsigned(grp_fu_512_p0) + unsigned(grp_fu_512_p1));

    grp_fu_746_p0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state15, reg_757, ap_CS_fsm_state19, ap_CS_fsm_state20, reg_781, ap_CS_fsm_state21, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state13, ap_CS_fsm_state16, ap_CS_fsm_state26, ap_CS_fsm_state28, zext_ln240_fu_1255_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_746_p0 <= reg_781;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_746_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_const_lv6_2B),7));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_746_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_757),7));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_746_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_const_lv6_2A),7));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_746_p0 <= zext_ln240_fu_1255_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            grp_fu_746_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_const_lv6_20),7));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_746_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_const_lv5_F),7));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_746_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_const_lv6_38),7));
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_fu_746_p0 <= ap_const_lv7_40;
        else 
            grp_fu_746_p0 <= "XXXXXXX";
        end if; 
    end process;


    grp_fu_746_p1_assign_proc : process(IP_q0, PC2_q0, E_q0, P_q0, PI_q0, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state15, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state13, ap_CS_fsm_state16, zext_ln240_1_fu_1271_p1, zext_ln240_1_reg_1644, zext_ln240_5_fu_1282_p1, zext_ln240_5_reg_1649, ap_CS_fsm_state26, ap_CS_fsm_state28, i_3_reg_421, zext_ln184_2_fu_993_p1, zext_ln240_2_fu_1266_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_746_p1 <= PI_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(P_q0),7));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln240_5_reg_1649),7));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln240_1_reg_1644),7));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln240_5_fu_1282_p1),7));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln240_1_fu_1271_p1),7));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_746_p1 <= zext_ln240_2_fu_1266_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(E_q0),7));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_421),7));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(PC2_q0),7));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_746_p1 <= zext_ln184_2_fu_993_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_746_p1 <= IP_q0;
        else 
            grp_fu_746_p1 <= "XXXXXXX";
        end if; 
    end process;

    grp_fu_746_p2 <= std_logic_vector(signed(grp_fu_746_p0) - signed(grp_fu_746_p1));

    grp_fu_868_p0_assign_proc : process(reg_354, ap_CS_fsm_state14, reg_365, ap_CS_fsm_state18, reg_389, ap_CS_fsm_state25, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state27, reg_479, ap_CS_fsm_state4, ap_CS_fsm_state12, reg_490, ap_CS_fsm_state15, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, i_0_reg_332, ap_phi_mux_i_2_phi_fu_369_p4, i_3_reg_421, j_1_reg_445, j_2_reg_456)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_868_p0 <= reg_490;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_868_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_479),7));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_868_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_reg_456),7));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_868_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_445),7));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_868_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_421),7));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_868_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_389),7));
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_868_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_365),7));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_868_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_2_phi_fu_369_p4),7));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_868_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_354),7));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_868_p0 <= i_0_reg_332;
        else 
            grp_fu_868_p0 <= "XXXXXXX";
        end if; 
    end process;


    grp_fu_868_p1_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state25, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state27, ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_868_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_const_lv6_20),7));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_868_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_const_lv4_8),7));
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_868_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_const_lv6_30),7));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_868_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_const_lv5_0),7));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_868_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_const_lv5_1),7));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_868_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_const_lv5_8),7));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_868_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_const_lv5_F),7));
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            grp_fu_868_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_const_lv5_10),7));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_868_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_const_lv6_38),7));
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_868_p1 <= ap_const_lv7_40;
        else 
            grp_fu_868_p1 <= "XXXXXXX";
        end if; 
    end process;

    grp_fu_868_p2 <= "1" when (grp_fu_868_p0 = grp_fu_868_p1) else "0";

    grp_fu_874_p0_assign_proc : process(input_r, key, ap_CS_fsm_state21, ap_CS_fsm_state3, ap_CS_fsm_state5, tmp_9_reg_1572, ap_CS_fsm_state13, pre_output_reg_1598, ap_CS_fsm_state16, ap_CS_fsm_state26, ap_CS_fsm_state28, temp_reg_400, s_output_1_fu_196)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_874_p0 <= pre_output_reg_1598;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_874_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(s_output_1_fu_196),64));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_874_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv48_840000000000),64));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_874_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_reg_400),64));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_874_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_reg_1572),64));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_874_p0 <= key;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_874_p0 <= input_r;
        else 
            grp_fu_874_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_874_p1_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state13, ap_CS_fsm_state16, ap_CS_fsm_state26, ap_CS_fsm_state28, zext_ln174_fu_944_p1, zext_ln184_fu_998_p1, zext_ln218_1_fu_1160_p1, zext_ln229_1_fu_1194_p1, zext_ln240_4_fu_1291_p1, zext_ln254_1_fu_1426_p1, zext_ln270_fu_1451_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_874_p1 <= zext_ln270_fu_1451_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_874_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln254_1_fu_1426_p1),64));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_874_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln240_4_fu_1291_p1),64));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_874_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln229_1_fu_1194_p1),64));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_874_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln218_1_fu_1160_p1),64));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_874_p1 <= zext_ln184_fu_998_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_874_p1 <= zext_ln174_fu_944_p1;
        else 
            grp_fu_874_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_874_p2 <= std_logic_vector(shift_right(unsigned(grp_fu_874_p0),to_integer(unsigned('0' & grp_fu_874_p1(31-1 downto 0)))));
    init_perm_res_fu_953_p3 <= (trunc_ln174_1_reg_1485 & trunc_ln174_fu_949_p1);
    inv_init_perm_res_fu_1460_p3 <= (trunc_ln270_1_reg_1702 & trunc_ln270_fu_1456_p1);
    lshr_ln240_1_fu_895_p2 <= std_logic_vector(shift_right(unsigned(and_ln240_fu_1296_p2),to_integer(unsigned('0' & zext_ln240_6_fu_1302_p1(31-1 downto 0)))));
    lshr_ln243_1_fu_904_p2 <= std_logic_vector(shift_right(unsigned(and_ln243_fu_1336_p2),to_integer(unsigned('0' & zext_ln243_fu_1342_p1(31-1 downto 0)))));
    lshr_ln243_fu_899_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv47_780000000000),to_integer(unsigned('0' & zext_ln240_3_fu_1307_p1(31-1 downto 0)))));
    or_ln241_fu_1321_p2 <= (trunc_ln240_1_fu_1311_p1 or tmp_5_fu_1314_p3);
    or_ln_fu_1169_p3 <= (trunc_ln218_1_reg_1585 & trunc_ln218_fu_1165_p1);
    permuted_choice_1_fu_1007_p3 <= (trunc_ln184_1_reg_1513 & trunc_ln184_fu_1003_p1);
    pre_output_fu_1176_p3 <= (temp_reg_400 & L_0_reg_410);
    s_input_fu_1207_p3 <= (trunc_ln229_1_fu_1203_p1 & trunc_ln229_fu_1199_p1);
    s_output_fu_1398_p3 <= (trunc_ln246_1_fu_1394_p1 & S_q0);
        sext_ln240_fu_1287_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_781),32));

        sext_ln246_1_fu_1366_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln246_fu_1362_p1),9));

    sext_ln246_2_fu_1371_p0 <= reg_433(9 - 1 downto 0);
        sext_ln246_2_fu_1371_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln246_2_fu_1371_p0),11));

        sext_ln246_3_fu_1389_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_512_p2),64));

        sext_ln246_fu_1357_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_fu_1347_p4),9));

    shl_ln240_1_fu_1275_p3 <= (trunc_ln240_reg_1634 & ap_const_lv2_0);
    shl_ln240_fu_1260_p2 <= std_logic_vector(shift_left(unsigned(j_2_reg_456),to_integer(unsigned('0' & ap_const_lv4_1(4-1 downto 0)))));
    shl_ln_fu_1247_p3 <= (trunc_ln240_fu_1243_p1 & ap_const_lv3_0);

    sub_key_address0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state15, sub_key_addr_reg_1567, zext_ln232_fu_1189_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sub_key_address0 <= zext_ln232_fu_1189_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sub_key_address0 <= sub_key_addr_reg_1567;
        else 
            sub_key_address0 <= "XXXX";
        end if; 
    end process;


    sub_key_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            sub_key_ce0 <= ap_const_logic_1;
        else 
            sub_key_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sub_key_we0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sub_key_we0 <= ap_const_logic_1;
        else 
            sub_key_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_2_fu_1088_p3 <= C_1_fu_188(27 downto 27);
    tmp_3_fu_1038_p4 <= C_1_fu_188(27 downto 26);
    tmp_4_fu_1108_p3 <= D_fu_192(27 downto 27);
    tmp_5_fu_1314_p3 <= lshr_ln240_1_reg_1659(4 downto 4);
    tmp_6_fu_1327_p4 <= lshr_ln240_1_reg_1659(7 downto 5);
    tmp_7_fu_1347_p4 <= ((tmp_6_fu_1327_p4 & or_ln241_fu_1321_p2) & ap_const_lv4_0);
    tmp_8_fu_1376_p3 <= (j_2_reg_456 & ap_const_lv6_0);
    tmp_9_fu_1143_p3 <= (C_1_fu_188 & D_fu_192);
    tmp_s_fu_1060_p4 <= D_fu_192(27 downto 26);
    trunc_ln174_1_fu_926_p1 <= init_perm_res_0_reg_321(63 - 1 downto 0);
    trunc_ln174_fu_949_p1 <= grp_fu_874_p2(1 - 1 downto 0);
    trunc_ln184_1_fu_965_p1 <= permuted_choice_1_0_reg_343(63 - 1 downto 0);
    trunc_ln184_fu_1003_p1 <= grp_fu_874_p2(1 - 1 downto 0);
    trunc_ln197_fu_1096_p1 <= C_1_fu_188(27 - 1 downto 0);
    trunc_ln198_fu_1116_p1 <= D_fu_192(27 - 1 downto 0);
    trunc_ln203_fu_1034_p1 <= C_1_fu_188(26 - 1 downto 0);
    trunc_ln204_fu_1056_p1 <= D_fu_192(26 - 1 downto 0);
    trunc_ln218_1_fu_1156_p1 <= sub_key_load_1_reg_377(63 - 1 downto 0);
    trunc_ln218_fu_1165_p0 <= grp_fu_874_p2(56 - 1 downto 0);
    trunc_ln218_fu_1165_p1 <= trunc_ln218_fu_1165_p0(1 - 1 downto 0);
    trunc_ln229_1_fu_1203_p1 <= reg_433(63 - 1 downto 0);
    trunc_ln229_fu_1199_p0 <= grp_fu_874_p2(32 - 1 downto 0);
    trunc_ln229_fu_1199_p1 <= trunc_ln229_fu_1199_p0(1 - 1 downto 0);
    trunc_ln232_1_fu_1219_p1 <= sub_key_q0(48 - 1 downto 0);
    trunc_ln232_2_fu_1223_p1 <= reg_433(47 - 1 downto 0);
    trunc_ln232_3_fu_1227_p1 <= sub_key_q0(47 - 1 downto 0);
    trunc_ln232_fu_1215_p1 <= reg_433(48 - 1 downto 0);
    trunc_ln240_1_fu_1311_p1 <= lshr_ln240_1_reg_1659(1 - 1 downto 0);
    trunc_ln240_fu_1243_p1 <= j_2_reg_456(3 - 1 downto 0);
    trunc_ln246_1_fu_1394_p1 <= s_output_1_fu_196(28 - 1 downto 0);
    trunc_ln246_fu_1362_p1 <= lshr_ln243_1_fu_904_p2(8 - 1 downto 0);
    trunc_ln254_1_fu_1416_p1 <= f_function_res_0_reg_468(31 - 1 downto 0);
    trunc_ln254_fu_1431_p0 <= grp_fu_874_p2(32 - 1 downto 0);
    trunc_ln254_fu_1431_p1 <= trunc_ln254_fu_1431_p0(1 - 1 downto 0);
    trunc_ln270_1_fu_1447_p1 <= inv_init_perm_res_0_reg_501(63 - 1 downto 0);
    trunc_ln270_fu_1456_p1 <= grp_fu_874_p2(1 - 1 downto 0);
    xor_ln232_1_fu_1237_p2 <= (trunc_ln232_fu_1215_p1 xor trunc_ln232_1_fu_1219_p1);
    xor_ln232_fu_1231_p2 <= (trunc_ln232_3_fu_1227_p1 xor trunc_ln232_2_fu_1223_p1);
    zext_ln174_1_fu_921_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_332),64));
    zext_ln174_fu_944_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_746_p2),64));
    zext_ln184_1_fu_960_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_354),64));
    zext_ln184_2_fu_993_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(PC1_q0),7));
    zext_ln184_fu_998_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_746_p2),64));
    zext_ln214_fu_1138_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_365),64));
    zext_ln218_1_fu_1160_p0 <= grp_fu_746_p2(6 - 1 downto 0);
    zext_ln218_1_fu_1160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln218_1_fu_1160_p0),56));
    zext_ln218_fu_1151_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_389),64));
    zext_ln229_1_fu_1194_p0 <= grp_fu_746_p2(6 - 1 downto 0);
    zext_ln229_1_fu_1194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln229_1_fu_1194_p0),32));
    zext_ln229_fu_1184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_445),64));
    zext_ln232_fu_1189_p0 <= grp_fu_746_p2(5 - 1 downto 0);
    zext_ln232_fu_1189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln232_fu_1189_p0),64));
    zext_ln240_1_fu_1271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln240_reg_1639),6));
    zext_ln240_2_fu_1266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln240_fu_1260_p2),7));
    zext_ln240_3_fu_1307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln240_reg_1654),47));
    zext_ln240_4_fu_1291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln240_fu_1287_p1),48));
    zext_ln240_5_fu_1282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln240_1_fu_1275_p3),6));
    zext_ln240_6_fu_1302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_757),48));
    zext_ln240_fu_1255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_1247_p3),7));
    zext_ln243_fu_1342_p0 <= grp_fu_746_p2(6 - 1 downto 0);
    zext_ln243_fu_1342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln243_fu_1342_p0),47));
    zext_ln246_fu_1384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_1376_p3),11));
    zext_ln254_1_fu_1426_p0 <= grp_fu_746_p2(6 - 1 downto 0);
    zext_ln254_1_fu_1426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln254_1_fu_1426_p0),32));
    zext_ln254_fu_1411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_479),64));
    zext_ln270_1_fu_1442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_490),64));
    zext_ln270_fu_1451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_746_p2),64));
end behav;

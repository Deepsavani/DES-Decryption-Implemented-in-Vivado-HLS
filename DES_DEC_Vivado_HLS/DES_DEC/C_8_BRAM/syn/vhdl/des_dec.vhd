-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity des_dec is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r : IN STD_LOGIC_VECTOR (63 downto 0);
    key : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of des_dec is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "des_dec,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35tl-cpg236-2L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.689625,HLS_SYN_LAT=5109,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=0,HLS_SYN_FF=1260,HLS_SYN_LUT=2547,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv6_38 : STD_LOGIC_VECTOR (5 downto 0) := "111000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_2A : STD_LOGIC_VECTOR (5 downto 0) := "101010";
    constant ap_const_lv6_2B : STD_LOGIC_VECTOR (5 downto 0) := "101011";
    constant ap_const_lv48_840000000000 : STD_LOGIC_VECTOR (47 downto 0) := "100001000000000000000000000000000000000000000000";
    constant ap_const_lv47_780000000000 : STD_LOGIC_VECTOR (46 downto 0) := "11110000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal IP_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal IP_ce0 : STD_LOGIC;
    signal IP_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal PC1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal PC1_ce0 : STD_LOGIC;
    signal PC1_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal PC2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal PC2_ce0 : STD_LOGIC;
    signal PC2_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal E_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal E_ce0 : STD_LOGIC;
    signal E_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal S_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal S_ce0 : STD_LOGIC;
    signal S_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal P_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal P_ce0 : STD_LOGIC;
    signal P_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal PI_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal PI_ce0 : STD_LOGIC;
    signal PI_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_fu_510_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_1319 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln171_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln174_1_fu_521_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln174_1_reg_1329 : STD_LOGIC_VECTOR (62 downto 0);
    signal L_reg_1334 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_fu_535_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_reg_1339 : STD_LOGIC_VECTOR (31 downto 0);
    signal init_perm_res_fu_558_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_5_fu_571_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_5_reg_1352 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln182_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln184_1_fu_582_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln184_1_reg_1362 : STD_LOGIC_VECTOR (62 downto 0);
    signal permuted_choice_1_fu_633_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_7_fu_646_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_7_reg_1391 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal sub_key_addr_reg_1399 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln192_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_808_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_9_reg_1411 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal j_4_fu_822_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_4_reg_1419 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln216_fu_816_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln218_1_fu_833_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln218_1_reg_1429 : STD_LOGIC_VECTOR (62 downto 0);
    signal or_ln_fu_856_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_8_fu_869_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_8_reg_1442 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal pre_output_fu_875_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal pre_output_reg_1447 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln223_fu_863_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_889_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_1455 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln227_fu_883_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_input_fu_935_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal xor_ln232_fu_959_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal xor_ln232_reg_1475 : STD_LOGIC_VECTOR (46 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal xor_ln232_1_fu_965_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal xor_ln232_1_reg_1480 : STD_LOGIC_VECTOR (47 downto 0);
    signal j_5_fu_977_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_5_reg_1488 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal sub_ln240_fu_1013_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln240_reg_1493 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln235_fu_971_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln240_2_fu_1037_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln240_2_reg_1498 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln243_1_fu_1049_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln243_1_reg_1503 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln246_1_fu_1178_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln246_1_reg_1508 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal j_6_fu_1211_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_6_reg_1521 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal icmp_ln252_fu_1205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln254_1_fu_1222_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln254_1_reg_1531 : STD_LOGIC_VECTOR (30 downto 0);
    signal R_1_fu_1226_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_function_res_fu_1252_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal i_6_fu_1265_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_6_reg_1549 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal icmp_ln267_fu_1259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln270_1_fu_1276_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln270_1_reg_1559 : STD_LOGIC_VECTOR (62 downto 0);
    signal inv_init_perm_res_fu_1299_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal sub_key_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_key_ce0 : STD_LOGIC;
    signal sub_key_we0 : STD_LOGIC;
    signal sub_key_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal init_perm_res_0_reg_305 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_0_reg_316 : STD_LOGIC_VECTOR (6 downto 0);
    signal permuted_choice_1_0_reg_327 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_reg_338 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_2_reg_349 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_key_load_1_reg_360 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_0_reg_372 : STD_LOGIC_VECTOR (5 downto 0);
    signal temp_reg_383 : STD_LOGIC_VECTOR (31 downto 0);
    signal L_0_reg_393 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_reg_404 : STD_LOGIC_VECTOR (4 downto 0);
    signal s_input_0_reg_416 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_reg_428 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_2_reg_439 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal f_function_res_0_reg_451 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_3_reg_462 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_4_reg_473 : STD_LOGIC_VECTOR (6 downto 0);
    signal inv_init_perm_res_0_reg_484 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln174_1_fu_516_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln184_1_fu_577_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln214_fu_798_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln218_fu_828_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln229_fu_895_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln232_fu_906_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln246_3_fu_1184_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln254_fu_1217_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln270_1_fu_1271_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal C_1_fu_172 : STD_LOGIC_VECTOR (27 downto 0);
    signal C_2_fu_708_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal empty_17_fu_688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal C_3_fu_760_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal D_fu_176 : STD_LOGIC_VECTOR (27 downto 0);
    signal D_1_fu_596_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal D_2_fu_730_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal D_3_fu_780_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal s_output_1_fu_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_output_fu_1192_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln174_fu_539_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln174_fu_545_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln174_fu_549_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln174_fu_554_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln184_2_fu_610_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln184_fu_614_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln184_fu_620_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln184_fu_624_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln184_fu_629_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_12_fu_658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_11_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_14_fu_670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_13_fu_664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_16_fu_682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_15_fu_676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln203_fu_694_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_3_fu_698_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln204_fu_716_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_s_fu_720_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln197_fu_756_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_2_fu_748_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln198_fu_776_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_4_fu_768_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln218_fu_837_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln218_1_fu_843_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal lshr_ln218_fu_847_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal trunc_ln218_fu_852_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln232_fu_900_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln229_fu_911_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln229_1_fu_917_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln229_fu_921_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln229_1_fu_931_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln229_fu_927_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln232_3_fu_955_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal trunc_ln232_2_fu_951_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal trunc_ln232_1_fu_947_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln232_fu_943_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln240_fu_983_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_987_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln240_fu_999_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln240_fu_995_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln240_2_fu_1009_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln240_1_fu_1019_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln240_1_fu_1005_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln240_1_fu_1031_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln240_5_fu_1027_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln243_fu_1043_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln240_fu_1055_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln240_4_fu_1062_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal lshr_ln240_fu_1066_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal and_ln240_fu_1072_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln240_6_fu_1077_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal lshr_ln240_1_fu_1080_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_5_fu_1090_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln240_1_fu_1086_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln240_3_fu_1058_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal lshr_ln243_fu_1114_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal and_ln243_fu_1120_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal zext_ln243_fu_1125_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_6_fu_1104_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln241_fu_1098_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_1134_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln243_1_fu_1128_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal trunc_ln246_fu_1148_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln246_1_fu_1152_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln246_fu_1144_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln246_fu_1156_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_8_fu_1166_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln246_2_fu_1162_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln246_fu_1174_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln246_1_fu_1188_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sub_ln254_fu_1232_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln254_1_fu_1238_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln254_fu_1242_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln254_fu_1248_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln270_fu_1280_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln270_fu_1286_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln270_fu_1290_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln270_fu_1295_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);

    component des_dec_IP IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component des_dec_PC1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component des_dec_PC2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component des_dec_E IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component des_dec_S IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component des_dec_P IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component des_dec_PI IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component des_dec_sub_key IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    IP_U : component des_dec_IP
    generic map (
        DataWidth => 7,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => IP_address0,
        ce0 => IP_ce0,
        q0 => IP_q0);

    PC1_U : component des_dec_PC1
    generic map (
        DataWidth => 6,
        AddressRange => 56,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => PC1_address0,
        ce0 => PC1_ce0,
        q0 => PC1_q0);

    PC2_U : component des_dec_PC2
    generic map (
        DataWidth => 6,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => PC2_address0,
        ce0 => PC2_ce0,
        q0 => PC2_q0);

    E_U : component des_dec_E
    generic map (
        DataWidth => 6,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => E_address0,
        ce0 => E_ce0,
        q0 => E_q0);

    S_U : component des_dec_S
    generic map (
        DataWidth => 4,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => S_address0,
        ce0 => S_ce0,
        q0 => S_q0);

    P_U : component des_dec_P
    generic map (
        DataWidth => 6,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => P_address0,
        ce0 => P_ce0,
        q0 => P_q0);

    PI_U : component des_dec_PI
    generic map (
        DataWidth => 7,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => PI_address0,
        ce0 => PI_ce0,
        q0 => PI_q0);

    sub_key_U : component des_dec_sub_key
    generic map (
        DataWidth => 64,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sub_key_address0,
        ce0 => sub_key_ce0,
        we0 => sub_key_we0,
        d0 => sub_key_load_1_reg_360,
        q0 => sub_key_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    C_1_fu_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (empty_17_fu_688_p2 = ap_const_lv1_1) and (icmp_ln192_fu_640_p2 = ap_const_lv1_0))) then 
                C_1_fu_172 <= C_3_fu_760_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (empty_17_fu_688_p2 = ap_const_lv1_0) and (icmp_ln192_fu_640_p2 = ap_const_lv1_0))) then 
                C_1_fu_172 <= C_2_fu_708_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln182_fu_565_p2 = ap_const_lv1_1))) then 
                C_1_fu_172 <= permuted_choice_1_0_reg_327(55 downto 28);
            end if; 
        end if;
    end process;

    D_fu_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (empty_17_fu_688_p2 = ap_const_lv1_1) and (icmp_ln192_fu_640_p2 = ap_const_lv1_0))) then 
                D_fu_176 <= D_3_fu_780_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (empty_17_fu_688_p2 = ap_const_lv1_0) and (icmp_ln192_fu_640_p2 = ap_const_lv1_0))) then 
                D_fu_176 <= D_2_fu_730_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln182_fu_565_p2 = ap_const_lv1_1))) then 
                D_fu_176 <= D_1_fu_596_p1;
            end if; 
        end if;
    end process;

    L_0_reg_393_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln192_fu_640_p2 = ap_const_lv1_1))) then 
                L_0_reg_393 <= L_reg_1334;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln252_fu_1205_p2 = ap_const_lv1_1))) then 
                L_0_reg_393 <= temp_reg_383;
            end if; 
        end if;
    end process;

    f_function_res_0_reg_451_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln235_fu_971_p2 = ap_const_lv1_1))) then 
                f_function_res_0_reg_451 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                f_function_res_0_reg_451 <= f_function_res_fu_1252_p3;
            end if; 
        end if;
    end process;

    i_0_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_316 <= i_reg_1319;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_316 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i_1_reg_338_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_1_reg_338 <= i_5_reg_1352;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln171_fu_504_p2 = ap_const_lv1_1))) then 
                i_1_reg_338 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_2_reg_349_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln216_fu_816_p2 = ap_const_lv1_1))) then 
                i_2_reg_349 <= i_7_reg_1391;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln182_fu_565_p2 = ap_const_lv1_1))) then 
                i_2_reg_349 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_3_reg_404_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln192_fu_640_p2 = ap_const_lv1_1))) then 
                i_3_reg_404 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln252_fu_1205_p2 = ap_const_lv1_1))) then 
                i_3_reg_404 <= i_8_reg_1442;
            end if; 
        end if;
    end process;

    i_4_reg_473_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                i_4_reg_473 <= i_6_reg_1549;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln223_fu_863_p2 = ap_const_lv1_1))) then 
                i_4_reg_473 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    init_perm_res_0_reg_305_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                init_perm_res_0_reg_305 <= init_perm_res_fu_558_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                init_perm_res_0_reg_305 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    inv_init_perm_res_0_reg_484_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                inv_init_perm_res_0_reg_484 <= inv_init_perm_res_fu_1299_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln223_fu_863_p2 = ap_const_lv1_1))) then 
                inv_init_perm_res_0_reg_484 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    j_0_reg_372_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                j_0_reg_372 <= j_4_reg_1419;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j_0_reg_372 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_1_reg_428_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                j_1_reg_428 <= j_reg_1455;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln223_fu_863_p2 = ap_const_lv1_0))) then 
                j_1_reg_428 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_2_reg_439_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                j_2_reg_439 <= j_5_reg_1488;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                j_2_reg_439 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_3_reg_462_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln235_fu_971_p2 = ap_const_lv1_1))) then 
                j_3_reg_462 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                j_3_reg_462 <= j_6_reg_1521;
            end if; 
        end if;
    end process;

    permuted_choice_1_0_reg_327_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                permuted_choice_1_0_reg_327 <= permuted_choice_1_fu_633_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln171_fu_504_p2 = ap_const_lv1_1))) then 
                permuted_choice_1_0_reg_327 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_input_0_reg_416_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                s_input_0_reg_416 <= s_input_fu_935_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln223_fu_863_p2 = ap_const_lv1_0))) then 
                s_input_0_reg_416 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_output_1_fu_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                s_output_1_fu_180 <= s_output_fu_1192_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln192_fu_640_p2 = ap_const_lv1_1))) then 
                s_output_1_fu_180 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sub_key_load_1_reg_360_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                sub_key_load_1_reg_360 <= or_ln_fu_856_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                sub_key_load_1_reg_360 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    temp_reg_383_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln192_fu_640_p2 = ap_const_lv1_1))) then 
                temp_reg_383 <= R_reg_1339;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln252_fu_1205_p2 = ap_const_lv1_1))) then 
                temp_reg_383 <= R_1_fu_1226_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln171_fu_504_p2 = ap_const_lv1_1))) then
                L_reg_1334 <= init_perm_res_0_reg_305(63 downto 32);
                R_reg_1339 <= R_fu_535_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                add_ln246_1_reg_1508 <= add_ln246_1_fu_1178_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_5_reg_1352 <= i_5_fu_571_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                i_6_reg_1549 <= i_6_fu_1265_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_7_reg_1391 <= i_7_fu_646_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                i_8_reg_1442 <= i_8_fu_869_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_1319 <= i_fu_510_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                j_4_reg_1419 <= j_4_fu_822_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                j_5_reg_1488 <= j_5_fu_977_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                j_6_reg_1521 <= j_6_fu_1211_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                j_reg_1455 <= j_fu_889_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln223_fu_863_p2 = ap_const_lv1_1))) then
                pre_output_reg_1447 <= pre_output_fu_875_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln192_fu_640_p2 = ap_const_lv1_0))) then
                sub_key_addr_reg_1399 <= zext_ln214_fu_798_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln235_fu_971_p2 = ap_const_lv1_0))) then
                    sub_ln240_2_reg_1498(5 downto 1) <= sub_ln240_2_fu_1037_p2(5 downto 1);
                    sub_ln240_reg_1493(6 downto 1) <= sub_ln240_fu_1013_p2(6 downto 1);
                    sub_ln243_1_reg_1503(5 downto 1) <= sub_ln243_1_fu_1049_p2(5 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_9_reg_1411 <= tmp_9_fu_808_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln171_fu_504_p2 = ap_const_lv1_0))) then
                trunc_ln174_1_reg_1329 <= trunc_ln174_1_fu_521_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln182_fu_565_p2 = ap_const_lv1_0))) then
                trunc_ln184_1_reg_1362 <= trunc_ln184_1_fu_582_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln216_fu_816_p2 = ap_const_lv1_0))) then
                trunc_ln218_1_reg_1429 <= trunc_ln218_1_fu_833_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln252_fu_1205_p2 = ap_const_lv1_0))) then
                trunc_ln254_1_reg_1531 <= trunc_ln254_1_fu_1222_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln267_fu_1259_p2 = ap_const_lv1_0))) then
                trunc_ln270_1_reg_1559 <= trunc_ln270_1_fu_1276_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                xor_ln232_1_reg_1480 <= xor_ln232_1_fu_965_p2;
                xor_ln232_reg_1475 <= xor_ln232_fu_959_p2;
            end if;
        end if;
    end process;
    sub_ln240_reg_1493(0) <= '0';
    sub_ln240_2_reg_1498(0) <= '0';
    sub_ln243_1_reg_1503(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln171_fu_504_p2, ap_CS_fsm_state4, icmp_ln182_fu_565_p2, ap_CS_fsm_state6, icmp_ln192_fu_640_p2, ap_CS_fsm_state8, icmp_ln216_fu_816_p2, ap_CS_fsm_state10, icmp_ln223_fu_863_p2, ap_CS_fsm_state11, icmp_ln227_fu_883_p2, ap_CS_fsm_state14, icmp_ln235_fu_971_p2, ap_CS_fsm_state18, icmp_ln252_fu_1205_p2, ap_CS_fsm_state20, icmp_ln267_fu_1259_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln171_fu_504_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln182_fu_565_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln192_fu_640_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln216_fu_816_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln223_fu_863_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln227_fu_883_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln235_fu_971_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln252_fu_1205_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln267_fu_1259_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    C_2_fu_708_p3 <= (trunc_ln203_fu_694_p1 & tmp_3_fu_698_p4);
    C_3_fu_760_p3 <= (trunc_ln197_fu_756_p1 & tmp_2_fu_748_p3);
    D_1_fu_596_p1 <= permuted_choice_1_0_reg_327(28 - 1 downto 0);
    D_2_fu_730_p3 <= (trunc_ln204_fu_716_p1 & tmp_s_fu_720_p4);
    D_3_fu_780_p3 <= (trunc_ln198_fu_776_p1 & tmp_4_fu_768_p3);
    E_address0 <= zext_ln229_fu_895_p1(6 - 1 downto 0);

    E_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            E_ce0 <= ap_const_logic_1;
        else 
            E_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    IP_address0 <= zext_ln174_1_fu_516_p1(6 - 1 downto 0);

    IP_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            IP_ce0 <= ap_const_logic_1;
        else 
            IP_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    PC1_address0 <= zext_ln184_1_fu_577_p1(6 - 1 downto 0);

    PC1_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            PC1_ce0 <= ap_const_logic_1;
        else 
            PC1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    PC2_address0 <= zext_ln218_fu_828_p1(6 - 1 downto 0);

    PC2_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            PC2_ce0 <= ap_const_logic_1;
        else 
            PC2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    PI_address0 <= zext_ln270_1_fu_1271_p1(6 - 1 downto 0);

    PI_ce0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            PI_ce0 <= ap_const_logic_1;
        else 
            PI_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    P_address0 <= zext_ln254_fu_1217_p1(5 - 1 downto 0);

    P_ce0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            P_ce0 <= ap_const_logic_1;
        else 
            P_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    R_1_fu_1226_p2 <= (f_function_res_0_reg_451 xor L_0_reg_393);
    R_fu_535_p1 <= init_perm_res_0_reg_305(32 - 1 downto 0);
    S_address0 <= sext_ln246_3_fu_1184_p1(9 - 1 downto 0);

    S_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            S_ce0 <= ap_const_logic_1;
        else 
            S_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln246_1_fu_1178_p2 <= std_logic_vector(signed(sext_ln246_2_fu_1162_p1) + signed(zext_ln246_fu_1174_p1));
    add_ln246_fu_1156_p2 <= std_logic_vector(signed(sext_ln246_1_fu_1152_p1) + signed(sext_ln246_fu_1144_p1));
    and_ln240_fu_1072_p2 <= (xor_ln232_1_reg_1480 and lshr_ln240_fu_1066_p2);
    and_ln243_fu_1120_p2 <= (xor_ln232_reg_1475 and lshr_ln243_fu_1114_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state20, icmp_ln267_fu_1259_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln267_fu_1259_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state20, icmp_ln267_fu_1259_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln267_fu_1259_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= inv_init_perm_res_0_reg_484;
    empty_11_fu_652_p2 <= "1" when (i_2_reg_349 = ap_const_lv5_F) else "0";
    empty_12_fu_658_p2 <= "1" when (i_2_reg_349 = ap_const_lv5_8) else "0";
    empty_13_fu_664_p2 <= (empty_12_fu_658_p2 or empty_11_fu_652_p2);
    empty_14_fu_670_p2 <= "1" when (i_2_reg_349 = ap_const_lv5_1) else "0";
    empty_15_fu_676_p2 <= (empty_14_fu_670_p2 or empty_13_fu_664_p2);
    empty_16_fu_682_p2 <= "1" when (i_2_reg_349 = ap_const_lv5_0) else "0";
    empty_17_fu_688_p2 <= (empty_16_fu_682_p2 or empty_15_fu_676_p2);
    f_function_res_fu_1252_p3 <= (trunc_ln254_1_reg_1531 & trunc_ln254_fu_1248_p1);
    i_5_fu_571_p2 <= std_logic_vector(unsigned(i_1_reg_338) + unsigned(ap_const_lv6_1));
    i_6_fu_1265_p2 <= std_logic_vector(unsigned(i_4_reg_473) + unsigned(ap_const_lv7_1));
    i_7_fu_646_p2 <= std_logic_vector(unsigned(i_2_reg_349) + unsigned(ap_const_lv5_1));
    i_8_fu_869_p2 <= std_logic_vector(unsigned(i_3_reg_404) + unsigned(ap_const_lv5_1));
    i_fu_510_p2 <= std_logic_vector(unsigned(i_0_reg_316) + unsigned(ap_const_lv7_1));
    icmp_ln171_fu_504_p2 <= "1" when (i_0_reg_316 = ap_const_lv7_40) else "0";
    icmp_ln182_fu_565_p2 <= "1" when (i_1_reg_338 = ap_const_lv6_38) else "0";
    icmp_ln192_fu_640_p2 <= "1" when (i_2_reg_349 = ap_const_lv5_10) else "0";
    icmp_ln216_fu_816_p2 <= "1" when (j_0_reg_372 = ap_const_lv6_30) else "0";
    icmp_ln223_fu_863_p2 <= "1" when (i_3_reg_404 = ap_const_lv5_10) else "0";
    icmp_ln227_fu_883_p2 <= "1" when (j_1_reg_428 = ap_const_lv6_30) else "0";
    icmp_ln235_fu_971_p2 <= "1" when (j_2_reg_439 = ap_const_lv4_8) else "0";
    icmp_ln252_fu_1205_p2 <= "1" when (j_3_reg_462 = ap_const_lv6_20) else "0";
    icmp_ln267_fu_1259_p2 <= "1" when (i_4_reg_473 = ap_const_lv7_40) else "0";
    init_perm_res_fu_558_p3 <= (trunc_ln174_1_reg_1329 & trunc_ln174_fu_554_p1);
    inv_init_perm_res_fu_1299_p3 <= (trunc_ln270_1_reg_1559 & trunc_ln270_fu_1295_p1);
    j_4_fu_822_p2 <= std_logic_vector(unsigned(j_0_reg_372) + unsigned(ap_const_lv6_1));
    j_5_fu_977_p2 <= std_logic_vector(unsigned(j_2_reg_439) + unsigned(ap_const_lv4_1));
    j_6_fu_1211_p2 <= std_logic_vector(unsigned(j_3_reg_462) + unsigned(ap_const_lv6_1));
    j_fu_889_p2 <= std_logic_vector(unsigned(j_1_reg_428) + unsigned(ap_const_lv6_1));
    lshr_ln174_fu_549_p2 <= std_logic_vector(shift_right(unsigned(input_r),to_integer(unsigned('0' & zext_ln174_fu_545_p1(31-1 downto 0)))));
    lshr_ln184_fu_624_p2 <= std_logic_vector(shift_right(unsigned(key),to_integer(unsigned('0' & zext_ln184_fu_620_p1(31-1 downto 0)))));
    lshr_ln218_fu_847_p2 <= std_logic_vector(shift_right(unsigned(tmp_9_reg_1411),to_integer(unsigned('0' & zext_ln218_1_fu_843_p1(31-1 downto 0)))));
    lshr_ln229_fu_921_p2 <= std_logic_vector(shift_right(unsigned(temp_reg_383),to_integer(unsigned('0' & zext_ln229_1_fu_917_p1(31-1 downto 0)))));
    lshr_ln240_1_fu_1080_p2 <= std_logic_vector(shift_right(unsigned(and_ln240_fu_1072_p2),to_integer(unsigned('0' & zext_ln240_6_fu_1077_p1(31-1 downto 0)))));
    lshr_ln240_fu_1066_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv48_840000000000),to_integer(unsigned('0' & zext_ln240_4_fu_1062_p1(31-1 downto 0)))));
    lshr_ln243_1_fu_1128_p2 <= std_logic_vector(shift_right(unsigned(and_ln243_fu_1120_p2),to_integer(unsigned('0' & zext_ln243_fu_1125_p1(31-1 downto 0)))));
    lshr_ln243_fu_1114_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv47_780000000000),to_integer(unsigned('0' & zext_ln240_3_fu_1058_p1(31-1 downto 0)))));
    lshr_ln254_fu_1242_p2 <= std_logic_vector(shift_right(unsigned(s_output_1_fu_180),to_integer(unsigned('0' & zext_ln254_1_fu_1238_p1(31-1 downto 0)))));
    lshr_ln270_fu_1290_p2 <= std_logic_vector(shift_right(unsigned(pre_output_reg_1447),to_integer(unsigned('0' & zext_ln270_fu_1286_p1(31-1 downto 0)))));
    or_ln241_fu_1098_p2 <= (trunc_ln240_1_fu_1086_p1 or tmp_5_fu_1090_p3);
    or_ln_fu_856_p3 <= (trunc_ln218_1_reg_1429 & trunc_ln218_fu_852_p1);
    permuted_choice_1_fu_633_p3 <= (trunc_ln184_1_reg_1362 & trunc_ln184_fu_629_p1);
    pre_output_fu_875_p3 <= (temp_reg_383 & L_0_reg_393);
    s_input_fu_935_p3 <= (trunc_ln229_1_fu_931_p1 & trunc_ln229_fu_927_p1);
    s_output_fu_1192_p3 <= (trunc_ln246_1_fu_1188_p1 & S_q0);
        sext_ln240_fu_1055_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln240_reg_1493),32));

        sext_ln246_1_fu_1152_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln246_fu_1148_p1),9));

        sext_ln246_2_fu_1162_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln246_fu_1156_p2),11));

        sext_ln246_3_fu_1184_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln246_1_reg_1508),64));

        sext_ln246_fu_1144_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_fu_1134_p4),9));

    shl_ln240_1_fu_1019_p3 <= (trunc_ln240_fu_983_p1 & ap_const_lv2_0);
    shl_ln240_fu_999_p2 <= std_logic_vector(shift_left(unsigned(j_2_reg_439),to_integer(unsigned('0' & ap_const_lv4_1(4-1 downto 0)))));
    shl_ln_fu_987_p3 <= (trunc_ln240_fu_983_p1 & ap_const_lv3_0);

    sub_key_address0_assign_proc : process(sub_key_addr_reg_1399, ap_CS_fsm_state8, ap_CS_fsm_state11, zext_ln232_fu_906_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sub_key_address0 <= zext_ln232_fu_906_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sub_key_address0 <= sub_key_addr_reg_1399;
        else 
            sub_key_address0 <= "XXXX";
        end if; 
    end process;


    sub_key_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            sub_key_ce0 <= ap_const_logic_1;
        else 
            sub_key_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sub_key_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sub_key_we0 <= ap_const_logic_1;
        else 
            sub_key_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln174_fu_539_p2 <= std_logic_vector(signed(ap_const_lv7_40) - signed(IP_q0));
    sub_ln184_fu_614_p2 <= std_logic_vector(signed(ap_const_lv7_40) - signed(zext_ln184_2_fu_610_p1));
    sub_ln218_fu_837_p2 <= std_logic_vector(signed(ap_const_lv6_38) - signed(PC2_q0));
    sub_ln229_fu_911_p2 <= std_logic_vector(signed(ap_const_lv6_20) - signed(E_q0));
    sub_ln232_fu_900_p2 <= std_logic_vector(unsigned(ap_const_lv5_F) - unsigned(i_3_reg_404));
    sub_ln240_1_fu_1031_p2 <= std_logic_vector(signed(ap_const_lv6_2A) - signed(zext_ln240_1_fu_1005_p1));
    sub_ln240_2_fu_1037_p2 <= std_logic_vector(unsigned(sub_ln240_1_fu_1031_p2) - unsigned(zext_ln240_5_fu_1027_p1));
    sub_ln240_fu_1013_p2 <= std_logic_vector(unsigned(zext_ln240_fu_995_p1) - unsigned(zext_ln240_2_fu_1009_p1));
    sub_ln243_1_fu_1049_p2 <= std_logic_vector(unsigned(sub_ln243_fu_1043_p2) - unsigned(zext_ln240_5_fu_1027_p1));
    sub_ln243_fu_1043_p2 <= std_logic_vector(signed(ap_const_lv6_2B) - signed(zext_ln240_1_fu_1005_p1));
    sub_ln254_fu_1232_p2 <= std_logic_vector(signed(ap_const_lv6_20) - signed(P_q0));
    sub_ln270_fu_1280_p2 <= std_logic_vector(signed(ap_const_lv7_40) - signed(PI_q0));
    tmp_2_fu_748_p3 <= C_1_fu_172(27 downto 27);
    tmp_3_fu_698_p4 <= C_1_fu_172(27 downto 26);
    tmp_4_fu_768_p3 <= D_fu_176(27 downto 27);
    tmp_5_fu_1090_p3 <= lshr_ln240_1_fu_1080_p2(4 downto 4);
    tmp_6_fu_1104_p4 <= lshr_ln240_1_fu_1080_p2(7 downto 5);
    tmp_7_fu_1134_p4 <= ((tmp_6_fu_1104_p4 & or_ln241_fu_1098_p2) & ap_const_lv4_0);
    tmp_8_fu_1166_p3 <= (j_2_reg_439 & ap_const_lv6_0);
    tmp_9_fu_808_p3 <= (C_1_fu_172 & D_fu_176);
    tmp_s_fu_720_p4 <= D_fu_176(27 downto 26);
    trunc_ln174_1_fu_521_p1 <= init_perm_res_0_reg_305(63 - 1 downto 0);
    trunc_ln174_fu_554_p1 <= lshr_ln174_fu_549_p2(1 - 1 downto 0);
    trunc_ln184_1_fu_582_p1 <= permuted_choice_1_0_reg_327(63 - 1 downto 0);
    trunc_ln184_fu_629_p1 <= lshr_ln184_fu_624_p2(1 - 1 downto 0);
    trunc_ln197_fu_756_p1 <= C_1_fu_172(27 - 1 downto 0);
    trunc_ln198_fu_776_p1 <= D_fu_176(27 - 1 downto 0);
    trunc_ln203_fu_694_p1 <= C_1_fu_172(26 - 1 downto 0);
    trunc_ln204_fu_716_p1 <= D_fu_176(26 - 1 downto 0);
    trunc_ln218_1_fu_833_p1 <= sub_key_load_1_reg_360(63 - 1 downto 0);
    trunc_ln218_fu_852_p1 <= lshr_ln218_fu_847_p2(1 - 1 downto 0);
    trunc_ln229_1_fu_931_p1 <= s_input_0_reg_416(63 - 1 downto 0);
    trunc_ln229_fu_927_p1 <= lshr_ln229_fu_921_p2(1 - 1 downto 0);
    trunc_ln232_1_fu_947_p1 <= sub_key_q0(48 - 1 downto 0);
    trunc_ln232_2_fu_951_p1 <= s_input_0_reg_416(47 - 1 downto 0);
    trunc_ln232_3_fu_955_p1 <= sub_key_q0(47 - 1 downto 0);
    trunc_ln232_fu_943_p1 <= s_input_0_reg_416(48 - 1 downto 0);
    trunc_ln240_1_fu_1086_p1 <= lshr_ln240_1_fu_1080_p2(1 - 1 downto 0);
    trunc_ln240_fu_983_p1 <= j_2_reg_439(3 - 1 downto 0);
    trunc_ln246_1_fu_1188_p1 <= s_output_1_fu_180(28 - 1 downto 0);
    trunc_ln246_fu_1148_p1 <= lshr_ln243_1_fu_1128_p2(8 - 1 downto 0);
    trunc_ln254_1_fu_1222_p1 <= f_function_res_0_reg_451(31 - 1 downto 0);
    trunc_ln254_fu_1248_p1 <= lshr_ln254_fu_1242_p2(1 - 1 downto 0);
    trunc_ln270_1_fu_1276_p1 <= inv_init_perm_res_0_reg_484(63 - 1 downto 0);
    trunc_ln270_fu_1295_p1 <= lshr_ln270_fu_1290_p2(1 - 1 downto 0);
    xor_ln232_1_fu_965_p2 <= (trunc_ln232_fu_943_p1 xor trunc_ln232_1_fu_947_p1);
    xor_ln232_fu_959_p2 <= (trunc_ln232_3_fu_955_p1 xor trunc_ln232_2_fu_951_p1);
    zext_ln174_1_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_316),64));
    zext_ln174_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln174_fu_539_p2),64));
    zext_ln184_1_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_338),64));
    zext_ln184_2_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(PC1_q0),7));
    zext_ln184_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln184_fu_614_p2),64));
    zext_ln214_fu_798_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_349),64));
    zext_ln218_1_fu_843_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln218_fu_837_p2),56));
    zext_ln218_fu_828_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_372),64));
    zext_ln229_1_fu_917_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln229_fu_911_p2),32));
    zext_ln229_fu_895_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_428),64));
    zext_ln232_fu_906_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln232_fu_900_p2),64));
    zext_ln240_1_fu_1005_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln240_fu_999_p2),6));
    zext_ln240_2_fu_1009_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln240_fu_999_p2),7));
    zext_ln240_3_fu_1058_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln240_fu_1055_p1),47));
    zext_ln240_4_fu_1062_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln240_fu_1055_p1),48));
    zext_ln240_5_fu_1027_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln240_1_fu_1019_p3),6));
    zext_ln240_6_fu_1077_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln240_2_reg_1498),48));
    zext_ln240_fu_995_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_987_p3),7));
    zext_ln243_fu_1125_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln243_1_reg_1503),47));
    zext_ln246_fu_1174_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_1166_p3),11));
    zext_ln254_1_fu_1238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln254_fu_1232_p2),32));
    zext_ln254_fu_1217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_3_reg_462),64));
    zext_ln270_1_fu_1271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_473),64));
    zext_ln270_fu_1286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln270_fu_1280_p2),64));
end behav;

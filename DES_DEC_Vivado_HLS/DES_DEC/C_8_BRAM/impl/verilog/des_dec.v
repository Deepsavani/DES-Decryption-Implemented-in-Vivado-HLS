// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="des_dec,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35tl-cpg236-2L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.689625,HLS_SYN_LAT=5109,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=0,HLS_SYN_FF=1260,HLS_SYN_LUT=2547,HLS_VERSION=2019_1}" *)

module des_dec (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r,
        key,
        ap_return
);

parameter    ap_ST_fsm_state1 = 21'd1;
parameter    ap_ST_fsm_state2 = 21'd2;
parameter    ap_ST_fsm_state3 = 21'd4;
parameter    ap_ST_fsm_state4 = 21'd8;
parameter    ap_ST_fsm_state5 = 21'd16;
parameter    ap_ST_fsm_state6 = 21'd32;
parameter    ap_ST_fsm_state7 = 21'd64;
parameter    ap_ST_fsm_state8 = 21'd128;
parameter    ap_ST_fsm_state9 = 21'd256;
parameter    ap_ST_fsm_state10 = 21'd512;
parameter    ap_ST_fsm_state11 = 21'd1024;
parameter    ap_ST_fsm_state12 = 21'd2048;
parameter    ap_ST_fsm_state13 = 21'd4096;
parameter    ap_ST_fsm_state14 = 21'd8192;
parameter    ap_ST_fsm_state15 = 21'd16384;
parameter    ap_ST_fsm_state16 = 21'd32768;
parameter    ap_ST_fsm_state17 = 21'd65536;
parameter    ap_ST_fsm_state18 = 21'd131072;
parameter    ap_ST_fsm_state19 = 21'd262144;
parameter    ap_ST_fsm_state20 = 21'd524288;
parameter    ap_ST_fsm_state21 = 21'd1048576;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] input_r;
input  [63:0] key;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [20:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] IP_address0;
reg    IP_ce0;
wire   [6:0] IP_q0;
wire   [5:0] PC1_address0;
reg    PC1_ce0;
wire   [5:0] PC1_q0;
wire   [5:0] PC2_address0;
reg    PC2_ce0;
wire   [5:0] PC2_q0;
wire   [5:0] E_address0;
reg    E_ce0;
wire   [5:0] E_q0;
wire   [8:0] S_address0;
reg    S_ce0;
wire   [3:0] S_q0;
wire   [4:0] P_address0;
reg    P_ce0;
wire   [5:0] P_q0;
wire   [5:0] PI_address0;
reg    PI_ce0;
wire   [6:0] PI_q0;
wire   [6:0] i_fu_510_p2;
reg   [6:0] i_reg_1319;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln171_fu_504_p2;
wire   [62:0] trunc_ln174_1_fu_521_p1;
reg   [62:0] trunc_ln174_1_reg_1329;
reg   [31:0] L_reg_1334;
wire   [31:0] R_fu_535_p1;
reg   [31:0] R_reg_1339;
wire   [63:0] init_perm_res_fu_558_p3;
wire    ap_CS_fsm_state3;
wire   [5:0] i_5_fu_571_p2;
reg   [5:0] i_5_reg_1352;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln182_fu_565_p2;
wire   [62:0] trunc_ln184_1_fu_582_p1;
reg   [62:0] trunc_ln184_1_reg_1362;
wire   [63:0] permuted_choice_1_fu_633_p3;
wire    ap_CS_fsm_state5;
wire   [4:0] i_7_fu_646_p2;
reg   [4:0] i_7_reg_1391;
wire    ap_CS_fsm_state6;
reg   [3:0] sub_key_addr_reg_1399;
wire   [0:0] icmp_ln192_fu_640_p2;
wire   [55:0] tmp_9_fu_808_p3;
reg   [55:0] tmp_9_reg_1411;
wire    ap_CS_fsm_state7;
wire   [5:0] j_4_fu_822_p2;
reg   [5:0] j_4_reg_1419;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln216_fu_816_p2;
wire   [62:0] trunc_ln218_1_fu_833_p1;
reg   [62:0] trunc_ln218_1_reg_1429;
wire   [63:0] or_ln_fu_856_p3;
wire    ap_CS_fsm_state9;
wire   [4:0] i_8_fu_869_p2;
reg   [4:0] i_8_reg_1442;
wire    ap_CS_fsm_state10;
wire   [63:0] pre_output_fu_875_p3;
reg   [63:0] pre_output_reg_1447;
wire   [0:0] icmp_ln223_fu_863_p2;
wire   [5:0] j_fu_889_p2;
reg   [5:0] j_reg_1455;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln227_fu_883_p2;
wire   [63:0] s_input_fu_935_p3;
wire    ap_CS_fsm_state12;
wire   [46:0] xor_ln232_fu_959_p2;
reg   [46:0] xor_ln232_reg_1475;
wire    ap_CS_fsm_state13;
wire   [47:0] xor_ln232_1_fu_965_p2;
reg   [47:0] xor_ln232_1_reg_1480;
wire   [3:0] j_5_fu_977_p2;
reg   [3:0] j_5_reg_1488;
wire    ap_CS_fsm_state14;
wire   [6:0] sub_ln240_fu_1013_p2;
reg   [6:0] sub_ln240_reg_1493;
wire   [0:0] icmp_ln235_fu_971_p2;
wire   [5:0] sub_ln240_2_fu_1037_p2;
reg   [5:0] sub_ln240_2_reg_1498;
wire   [5:0] sub_ln243_1_fu_1049_p2;
reg   [5:0] sub_ln243_1_reg_1503;
wire   [10:0] add_ln246_1_fu_1178_p2;
reg   [10:0] add_ln246_1_reg_1508;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire   [5:0] j_6_fu_1211_p2;
reg   [5:0] j_6_reg_1521;
wire    ap_CS_fsm_state18;
wire   [0:0] icmp_ln252_fu_1205_p2;
wire   [30:0] trunc_ln254_1_fu_1222_p1;
reg   [30:0] trunc_ln254_1_reg_1531;
wire   [31:0] R_1_fu_1226_p2;
wire   [31:0] f_function_res_fu_1252_p3;
wire    ap_CS_fsm_state19;
wire   [6:0] i_6_fu_1265_p2;
reg   [6:0] i_6_reg_1549;
wire    ap_CS_fsm_state20;
wire   [0:0] icmp_ln267_fu_1259_p2;
wire   [62:0] trunc_ln270_1_fu_1276_p1;
reg   [62:0] trunc_ln270_1_reg_1559;
wire   [63:0] inv_init_perm_res_fu_1299_p3;
wire    ap_CS_fsm_state21;
reg   [3:0] sub_key_address0;
reg    sub_key_ce0;
reg    sub_key_we0;
wire   [63:0] sub_key_q0;
reg   [63:0] init_perm_res_0_reg_305;
reg   [6:0] i_0_reg_316;
reg   [63:0] permuted_choice_1_0_reg_327;
reg   [5:0] i_1_reg_338;
reg   [4:0] i_2_reg_349;
reg   [63:0] sub_key_load_1_reg_360;
reg   [5:0] j_0_reg_372;
reg   [31:0] temp_reg_383;
reg   [31:0] L_0_reg_393;
reg   [4:0] i_3_reg_404;
reg   [63:0] s_input_0_reg_416;
reg   [5:0] j_1_reg_428;
reg   [3:0] j_2_reg_439;
wire    ap_CS_fsm_state17;
reg   [31:0] f_function_res_0_reg_451;
reg   [5:0] j_3_reg_462;
reg   [6:0] i_4_reg_473;
reg   [63:0] inv_init_perm_res_0_reg_484;
wire   [63:0] zext_ln174_1_fu_516_p1;
wire   [63:0] zext_ln184_1_fu_577_p1;
wire   [63:0] zext_ln214_fu_798_p1;
wire   [63:0] zext_ln218_fu_828_p1;
wire   [63:0] zext_ln229_fu_895_p1;
wire   [63:0] zext_ln232_fu_906_p1;
wire  signed [63:0] sext_ln246_3_fu_1184_p1;
wire   [63:0] zext_ln254_fu_1217_p1;
wire   [63:0] zext_ln270_1_fu_1271_p1;
reg   [27:0] C_1_fu_172;
wire   [27:0] C_2_fu_708_p3;
wire   [0:0] empty_17_fu_688_p2;
wire   [27:0] C_3_fu_760_p3;
reg   [27:0] D_fu_176;
wire   [27:0] D_1_fu_596_p1;
wire   [27:0] D_2_fu_730_p3;
wire   [27:0] D_3_fu_780_p3;
reg   [31:0] s_output_1_fu_180;
wire   [31:0] s_output_fu_1192_p3;
wire   [6:0] sub_ln174_fu_539_p2;
wire   [63:0] zext_ln174_fu_545_p1;
wire   [63:0] lshr_ln174_fu_549_p2;
wire   [0:0] trunc_ln174_fu_554_p1;
wire   [6:0] zext_ln184_2_fu_610_p1;
wire   [6:0] sub_ln184_fu_614_p2;
wire   [63:0] zext_ln184_fu_620_p1;
wire   [63:0] lshr_ln184_fu_624_p2;
wire   [0:0] trunc_ln184_fu_629_p1;
wire   [0:0] empty_12_fu_658_p2;
wire   [0:0] empty_11_fu_652_p2;
wire   [0:0] empty_14_fu_670_p2;
wire   [0:0] empty_13_fu_664_p2;
wire   [0:0] empty_16_fu_682_p2;
wire   [0:0] empty_15_fu_676_p2;
wire   [25:0] trunc_ln203_fu_694_p1;
wire   [1:0] tmp_3_fu_698_p4;
wire   [25:0] trunc_ln204_fu_716_p1;
wire   [1:0] tmp_s_fu_720_p4;
wire   [26:0] trunc_ln197_fu_756_p1;
wire   [0:0] tmp_2_fu_748_p3;
wire   [26:0] trunc_ln198_fu_776_p1;
wire   [0:0] tmp_4_fu_768_p3;
wire   [5:0] sub_ln218_fu_837_p2;
wire   [55:0] zext_ln218_1_fu_843_p1;
wire   [55:0] lshr_ln218_fu_847_p2;
wire   [0:0] trunc_ln218_fu_852_p1;
wire   [4:0] sub_ln232_fu_900_p2;
wire   [5:0] sub_ln229_fu_911_p2;
wire   [31:0] zext_ln229_1_fu_917_p1;
wire   [31:0] lshr_ln229_fu_921_p2;
wire   [62:0] trunc_ln229_1_fu_931_p1;
wire   [0:0] trunc_ln229_fu_927_p1;
wire   [46:0] trunc_ln232_3_fu_955_p1;
wire   [46:0] trunc_ln232_2_fu_951_p1;
wire   [47:0] trunc_ln232_1_fu_947_p1;
wire   [47:0] trunc_ln232_fu_943_p1;
wire   [2:0] trunc_ln240_fu_983_p1;
wire   [5:0] shl_ln_fu_987_p3;
wire   [3:0] shl_ln240_fu_999_p2;
wire   [6:0] zext_ln240_fu_995_p1;
wire   [6:0] zext_ln240_2_fu_1009_p1;
wire   [4:0] shl_ln240_1_fu_1019_p3;
wire   [5:0] zext_ln240_1_fu_1005_p1;
wire   [5:0] sub_ln240_1_fu_1031_p2;
wire   [5:0] zext_ln240_5_fu_1027_p1;
wire   [5:0] sub_ln243_fu_1043_p2;
wire  signed [31:0] sext_ln240_fu_1055_p1;
wire   [47:0] zext_ln240_4_fu_1062_p1;
wire   [47:0] lshr_ln240_fu_1066_p2;
wire   [47:0] and_ln240_fu_1072_p2;
wire   [47:0] zext_ln240_6_fu_1077_p1;
wire   [47:0] lshr_ln240_1_fu_1080_p2;
wire   [0:0] tmp_5_fu_1090_p3;
wire   [0:0] trunc_ln240_1_fu_1086_p1;
wire   [46:0] zext_ln240_3_fu_1058_p1;
wire   [46:0] lshr_ln243_fu_1114_p2;
wire   [46:0] and_ln243_fu_1120_p2;
wire   [46:0] zext_ln243_fu_1125_p1;
wire   [2:0] tmp_6_fu_1104_p4;
wire   [0:0] or_ln241_fu_1098_p2;
wire   [7:0] tmp_7_fu_1134_p4;
wire   [46:0] lshr_ln243_1_fu_1128_p2;
wire   [7:0] trunc_ln246_fu_1148_p1;
wire  signed [8:0] sext_ln246_1_fu_1152_p1;
wire  signed [8:0] sext_ln246_fu_1144_p1;
wire   [8:0] add_ln246_fu_1156_p2;
wire   [9:0] tmp_8_fu_1166_p3;
wire  signed [10:0] sext_ln246_2_fu_1162_p1;
wire   [10:0] zext_ln246_fu_1174_p1;
wire   [27:0] trunc_ln246_1_fu_1188_p1;
wire   [5:0] sub_ln254_fu_1232_p2;
wire   [31:0] zext_ln254_1_fu_1238_p1;
wire   [31:0] lshr_ln254_fu_1242_p2;
wire   [0:0] trunc_ln254_fu_1248_p1;
wire   [6:0] sub_ln270_fu_1280_p2;
wire   [63:0] zext_ln270_fu_1286_p1;
wire   [63:0] lshr_ln270_fu_1290_p2;
wire   [0:0] trunc_ln270_fu_1295_p1;
reg   [20:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 21'd1;
end

des_dec_IP #(
    .DataWidth( 7 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
IP_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(IP_address0),
    .ce0(IP_ce0),
    .q0(IP_q0)
);

des_dec_PC1 #(
    .DataWidth( 6 ),
    .AddressRange( 56 ),
    .AddressWidth( 6 ))
PC1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(PC1_address0),
    .ce0(PC1_ce0),
    .q0(PC1_q0)
);

des_dec_PC2 #(
    .DataWidth( 6 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
PC2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(PC2_address0),
    .ce0(PC2_ce0),
    .q0(PC2_q0)
);

des_dec_E #(
    .DataWidth( 6 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
E_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(E_address0),
    .ce0(E_ce0),
    .q0(E_q0)
);

des_dec_S #(
    .DataWidth( 4 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
S_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(S_address0),
    .ce0(S_ce0),
    .q0(S_q0)
);

des_dec_P #(
    .DataWidth( 6 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
P_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(P_address0),
    .ce0(P_ce0),
    .q0(P_q0)
);

des_dec_PI #(
    .DataWidth( 7 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
PI_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(PI_address0),
    .ce0(PI_ce0),
    .q0(PI_q0)
);

des_dec_sub_key #(
    .DataWidth( 64 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
sub_key_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sub_key_address0),
    .ce0(sub_key_ce0),
    .we0(sub_key_we0),
    .d0(sub_key_load_1_reg_360),
    .q0(sub_key_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (empty_17_fu_688_p2 == 1'd1) & (icmp_ln192_fu_640_p2 == 1'd0))) begin
        C_1_fu_172 <= C_3_fu_760_p3;
    end else if (((1'b1 == ap_CS_fsm_state6) & (empty_17_fu_688_p2 == 1'd0) & (icmp_ln192_fu_640_p2 == 1'd0))) begin
        C_1_fu_172 <= C_2_fu_708_p3;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln182_fu_565_p2 == 1'd1))) begin
        C_1_fu_172 <= {{permuted_choice_1_0_reg_327[55:28]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (empty_17_fu_688_p2 == 1'd1) & (icmp_ln192_fu_640_p2 == 1'd0))) begin
        D_fu_176 <= D_3_fu_780_p3;
    end else if (((1'b1 == ap_CS_fsm_state6) & (empty_17_fu_688_p2 == 1'd0) & (icmp_ln192_fu_640_p2 == 1'd0))) begin
        D_fu_176 <= D_2_fu_730_p3;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln182_fu_565_p2 == 1'd1))) begin
        D_fu_176 <= D_1_fu_596_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln192_fu_640_p2 == 1'd1))) begin
        L_0_reg_393 <= L_reg_1334;
    end else if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln252_fu_1205_p2 == 1'd1))) begin
        L_0_reg_393 <= temp_reg_383;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln235_fu_971_p2 == 1'd1))) begin
        f_function_res_0_reg_451 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        f_function_res_0_reg_451 <= f_function_res_fu_1252_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_316 <= i_reg_1319;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_316 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_1_reg_338 <= i_5_reg_1352;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln171_fu_504_p2 == 1'd1))) begin
        i_1_reg_338 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln216_fu_816_p2 == 1'd1))) begin
        i_2_reg_349 <= i_7_reg_1391;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln182_fu_565_p2 == 1'd1))) begin
        i_2_reg_349 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln192_fu_640_p2 == 1'd1))) begin
        i_3_reg_404 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln252_fu_1205_p2 == 1'd1))) begin
        i_3_reg_404 <= i_8_reg_1442;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        i_4_reg_473 <= i_6_reg_1549;
    end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln223_fu_863_p2 == 1'd1))) begin
        i_4_reg_473 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        init_perm_res_0_reg_305 <= init_perm_res_fu_558_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        init_perm_res_0_reg_305 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        inv_init_perm_res_0_reg_484 <= inv_init_perm_res_fu_1299_p3;
    end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln223_fu_863_p2 == 1'd1))) begin
        inv_init_perm_res_0_reg_484 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        j_0_reg_372 <= j_4_reg_1419;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        j_0_reg_372 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        j_1_reg_428 <= j_reg_1455;
    end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln223_fu_863_p2 == 1'd0))) begin
        j_1_reg_428 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        j_2_reg_439 <= j_5_reg_1488;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        j_2_reg_439 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln235_fu_971_p2 == 1'd1))) begin
        j_3_reg_462 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        j_3_reg_462 <= j_6_reg_1521;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        permuted_choice_1_0_reg_327 <= permuted_choice_1_fu_633_p3;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln171_fu_504_p2 == 1'd1))) begin
        permuted_choice_1_0_reg_327 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        s_input_0_reg_416 <= s_input_fu_935_p3;
    end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln223_fu_863_p2 == 1'd0))) begin
        s_input_0_reg_416 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        s_output_1_fu_180 <= s_output_fu_1192_p3;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln192_fu_640_p2 == 1'd1))) begin
        s_output_1_fu_180 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sub_key_load_1_reg_360 <= or_ln_fu_856_p3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sub_key_load_1_reg_360 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln192_fu_640_p2 == 1'd1))) begin
        temp_reg_383 <= R_reg_1339;
    end else if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln252_fu_1205_p2 == 1'd1))) begin
        temp_reg_383 <= R_1_fu_1226_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln171_fu_504_p2 == 1'd1))) begin
        L_reg_1334 <= {{init_perm_res_0_reg_305[63:32]}};
        R_reg_1339 <= R_fu_535_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        add_ln246_1_reg_1508 <= add_ln246_1_fu_1178_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_5_reg_1352 <= i_5_fu_571_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        i_6_reg_1549 <= i_6_fu_1265_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_7_reg_1391 <= i_7_fu_646_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_8_reg_1442 <= i_8_fu_869_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_1319 <= i_fu_510_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        j_4_reg_1419 <= j_4_fu_822_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        j_5_reg_1488 <= j_5_fu_977_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        j_6_reg_1521 <= j_6_fu_1211_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        j_reg_1455 <= j_fu_889_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln223_fu_863_p2 == 1'd1))) begin
        pre_output_reg_1447 <= pre_output_fu_875_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln192_fu_640_p2 == 1'd0))) begin
        sub_key_addr_reg_1399 <= zext_ln214_fu_798_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln235_fu_971_p2 == 1'd0))) begin
        sub_ln240_2_reg_1498[5 : 1] <= sub_ln240_2_fu_1037_p2[5 : 1];
        sub_ln240_reg_1493[6 : 1] <= sub_ln240_fu_1013_p2[6 : 1];
        sub_ln243_1_reg_1503[5 : 1] <= sub_ln243_1_fu_1049_p2[5 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_9_reg_1411 <= tmp_9_fu_808_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln171_fu_504_p2 == 1'd0))) begin
        trunc_ln174_1_reg_1329 <= trunc_ln174_1_fu_521_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln182_fu_565_p2 == 1'd0))) begin
        trunc_ln184_1_reg_1362 <= trunc_ln184_1_fu_582_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln216_fu_816_p2 == 1'd0))) begin
        trunc_ln218_1_reg_1429 <= trunc_ln218_1_fu_833_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln252_fu_1205_p2 == 1'd0))) begin
        trunc_ln254_1_reg_1531 <= trunc_ln254_1_fu_1222_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln267_fu_1259_p2 == 1'd0))) begin
        trunc_ln270_1_reg_1559 <= trunc_ln270_1_fu_1276_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        xor_ln232_1_reg_1480 <= xor_ln232_1_fu_965_p2;
        xor_ln232_reg_1475 <= xor_ln232_fu_959_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        E_ce0 = 1'b1;
    end else begin
        E_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        IP_ce0 = 1'b1;
    end else begin
        IP_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        PC1_ce0 = 1'b1;
    end else begin
        PC1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        PC2_ce0 = 1'b1;
    end else begin
        PC2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        PI_ce0 = 1'b1;
    end else begin
        PI_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        P_ce0 = 1'b1;
    end else begin
        P_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        S_ce0 = 1'b1;
    end else begin
        S_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln267_fu_1259_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln267_fu_1259_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        sub_key_address0 = zext_ln232_fu_906_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sub_key_address0 = sub_key_addr_reg_1399;
    end else begin
        sub_key_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8))) begin
        sub_key_ce0 = 1'b1;
    end else begin
        sub_key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sub_key_we0 = 1'b1;
    end else begin
        sub_key_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln171_fu_504_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln182_fu_565_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln192_fu_640_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln216_fu_816_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln223_fu_863_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln227_fu_883_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln235_fu_971_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln252_fu_1205_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln267_fu_1259_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C_2_fu_708_p3 = {{trunc_ln203_fu_694_p1}, {tmp_3_fu_698_p4}};

assign C_3_fu_760_p3 = {{trunc_ln197_fu_756_p1}, {tmp_2_fu_748_p3}};

assign D_1_fu_596_p1 = permuted_choice_1_0_reg_327[27:0];

assign D_2_fu_730_p3 = {{trunc_ln204_fu_716_p1}, {tmp_s_fu_720_p4}};

assign D_3_fu_780_p3 = {{trunc_ln198_fu_776_p1}, {tmp_4_fu_768_p3}};

assign E_address0 = zext_ln229_fu_895_p1;

assign IP_address0 = zext_ln174_1_fu_516_p1;

assign PC1_address0 = zext_ln184_1_fu_577_p1;

assign PC2_address0 = zext_ln218_fu_828_p1;

assign PI_address0 = zext_ln270_1_fu_1271_p1;

assign P_address0 = zext_ln254_fu_1217_p1;

assign R_1_fu_1226_p2 = (f_function_res_0_reg_451 ^ L_0_reg_393);

assign R_fu_535_p1 = init_perm_res_0_reg_305[31:0];

assign S_address0 = sext_ln246_3_fu_1184_p1;

assign add_ln246_1_fu_1178_p2 = ($signed(sext_ln246_2_fu_1162_p1) + $signed(zext_ln246_fu_1174_p1));

assign add_ln246_fu_1156_p2 = ($signed(sext_ln246_1_fu_1152_p1) + $signed(sext_ln246_fu_1144_p1));

assign and_ln240_fu_1072_p2 = (xor_ln232_1_reg_1480 & lshr_ln240_fu_1066_p2);

assign and_ln243_fu_1120_p2 = (xor_ln232_reg_1475 & lshr_ln243_fu_1114_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = inv_init_perm_res_0_reg_484;

assign empty_11_fu_652_p2 = ((i_2_reg_349 == 5'd15) ? 1'b1 : 1'b0);

assign empty_12_fu_658_p2 = ((i_2_reg_349 == 5'd8) ? 1'b1 : 1'b0);

assign empty_13_fu_664_p2 = (empty_12_fu_658_p2 | empty_11_fu_652_p2);

assign empty_14_fu_670_p2 = ((i_2_reg_349 == 5'd1) ? 1'b1 : 1'b0);

assign empty_15_fu_676_p2 = (empty_14_fu_670_p2 | empty_13_fu_664_p2);

assign empty_16_fu_682_p2 = ((i_2_reg_349 == 5'd0) ? 1'b1 : 1'b0);

assign empty_17_fu_688_p2 = (empty_16_fu_682_p2 | empty_15_fu_676_p2);

assign f_function_res_fu_1252_p3 = {{trunc_ln254_1_reg_1531}, {trunc_ln254_fu_1248_p1}};

assign i_5_fu_571_p2 = (i_1_reg_338 + 6'd1);

assign i_6_fu_1265_p2 = (i_4_reg_473 + 7'd1);

assign i_7_fu_646_p2 = (i_2_reg_349 + 5'd1);

assign i_8_fu_869_p2 = (i_3_reg_404 + 5'd1);

assign i_fu_510_p2 = (i_0_reg_316 + 7'd1);

assign icmp_ln171_fu_504_p2 = ((i_0_reg_316 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln182_fu_565_p2 = ((i_1_reg_338 == 6'd56) ? 1'b1 : 1'b0);

assign icmp_ln192_fu_640_p2 = ((i_2_reg_349 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln216_fu_816_p2 = ((j_0_reg_372 == 6'd48) ? 1'b1 : 1'b0);

assign icmp_ln223_fu_863_p2 = ((i_3_reg_404 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln227_fu_883_p2 = ((j_1_reg_428 == 6'd48) ? 1'b1 : 1'b0);

assign icmp_ln235_fu_971_p2 = ((j_2_reg_439 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln252_fu_1205_p2 = ((j_3_reg_462 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln267_fu_1259_p2 = ((i_4_reg_473 == 7'd64) ? 1'b1 : 1'b0);

assign init_perm_res_fu_558_p3 = {{trunc_ln174_1_reg_1329}, {trunc_ln174_fu_554_p1}};

assign inv_init_perm_res_fu_1299_p3 = {{trunc_ln270_1_reg_1559}, {trunc_ln270_fu_1295_p1}};

assign j_4_fu_822_p2 = (j_0_reg_372 + 6'd1);

assign j_5_fu_977_p2 = (j_2_reg_439 + 4'd1);

assign j_6_fu_1211_p2 = (j_3_reg_462 + 6'd1);

assign j_fu_889_p2 = (j_1_reg_428 + 6'd1);

assign lshr_ln174_fu_549_p2 = input_r >> zext_ln174_fu_545_p1;

assign lshr_ln184_fu_624_p2 = key >> zext_ln184_fu_620_p1;

assign lshr_ln218_fu_847_p2 = tmp_9_reg_1411 >> zext_ln218_1_fu_843_p1;

assign lshr_ln229_fu_921_p2 = temp_reg_383 >> zext_ln229_1_fu_917_p1;

assign lshr_ln240_1_fu_1080_p2 = and_ln240_fu_1072_p2 >> zext_ln240_6_fu_1077_p1;

assign lshr_ln240_fu_1066_p2 = 48'd145135534866432 >> zext_ln240_4_fu_1062_p1;

assign lshr_ln243_1_fu_1128_p2 = and_ln243_fu_1120_p2 >> zext_ln243_fu_1125_p1;

assign lshr_ln243_fu_1114_p2 = 47'd131941395333120 >> zext_ln240_3_fu_1058_p1;

assign lshr_ln254_fu_1242_p2 = s_output_1_fu_180 >> zext_ln254_1_fu_1238_p1;

assign lshr_ln270_fu_1290_p2 = pre_output_reg_1447 >> zext_ln270_fu_1286_p1;

assign or_ln241_fu_1098_p2 = (trunc_ln240_1_fu_1086_p1 | tmp_5_fu_1090_p3);

assign or_ln_fu_856_p3 = {{trunc_ln218_1_reg_1429}, {trunc_ln218_fu_852_p1}};

assign permuted_choice_1_fu_633_p3 = {{trunc_ln184_1_reg_1362}, {trunc_ln184_fu_629_p1}};

assign pre_output_fu_875_p3 = {{temp_reg_383}, {L_0_reg_393}};

assign s_input_fu_935_p3 = {{trunc_ln229_1_fu_931_p1}, {trunc_ln229_fu_927_p1}};

assign s_output_fu_1192_p3 = {{trunc_ln246_1_fu_1188_p1}, {S_q0}};

assign sext_ln240_fu_1055_p1 = $signed(sub_ln240_reg_1493);

assign sext_ln246_1_fu_1152_p1 = $signed(trunc_ln246_fu_1148_p1);

assign sext_ln246_2_fu_1162_p1 = $signed(add_ln246_fu_1156_p2);

assign sext_ln246_3_fu_1184_p1 = $signed(add_ln246_1_reg_1508);

assign sext_ln246_fu_1144_p1 = $signed(tmp_7_fu_1134_p4);

assign shl_ln240_1_fu_1019_p3 = {{trunc_ln240_fu_983_p1}, {2'd0}};

assign shl_ln240_fu_999_p2 = j_2_reg_439 << 4'd1;

assign shl_ln_fu_987_p3 = {{trunc_ln240_fu_983_p1}, {3'd0}};

assign sub_ln174_fu_539_p2 = ($signed(7'd64) - $signed(IP_q0));

assign sub_ln184_fu_614_p2 = ($signed(7'd64) - $signed(zext_ln184_2_fu_610_p1));

assign sub_ln218_fu_837_p2 = ($signed(6'd56) - $signed(PC2_q0));

assign sub_ln229_fu_911_p2 = ($signed(6'd32) - $signed(E_q0));

assign sub_ln232_fu_900_p2 = (5'd15 - i_3_reg_404);

assign sub_ln240_1_fu_1031_p2 = ($signed(6'd42) - $signed(zext_ln240_1_fu_1005_p1));

assign sub_ln240_2_fu_1037_p2 = (sub_ln240_1_fu_1031_p2 - zext_ln240_5_fu_1027_p1);

assign sub_ln240_fu_1013_p2 = (zext_ln240_fu_995_p1 - zext_ln240_2_fu_1009_p1);

assign sub_ln243_1_fu_1049_p2 = (sub_ln243_fu_1043_p2 - zext_ln240_5_fu_1027_p1);

assign sub_ln243_fu_1043_p2 = ($signed(6'd43) - $signed(zext_ln240_1_fu_1005_p1));

assign sub_ln254_fu_1232_p2 = ($signed(6'd32) - $signed(P_q0));

assign sub_ln270_fu_1280_p2 = ($signed(7'd64) - $signed(PI_q0));

assign tmp_2_fu_748_p3 = C_1_fu_172[32'd27];

assign tmp_3_fu_698_p4 = {{C_1_fu_172[27:26]}};

assign tmp_4_fu_768_p3 = D_fu_176[32'd27];

assign tmp_5_fu_1090_p3 = lshr_ln240_1_fu_1080_p2[32'd4];

assign tmp_6_fu_1104_p4 = {{lshr_ln240_1_fu_1080_p2[7:5]}};

assign tmp_7_fu_1134_p4 = {{{tmp_6_fu_1104_p4}, {or_ln241_fu_1098_p2}}, {4'd0}};

assign tmp_8_fu_1166_p3 = {{j_2_reg_439}, {6'd0}};

assign tmp_9_fu_808_p3 = {{C_1_fu_172}, {D_fu_176}};

assign tmp_s_fu_720_p4 = {{D_fu_176[27:26]}};

assign trunc_ln174_1_fu_521_p1 = init_perm_res_0_reg_305[62:0];

assign trunc_ln174_fu_554_p1 = lshr_ln174_fu_549_p2[0:0];

assign trunc_ln184_1_fu_582_p1 = permuted_choice_1_0_reg_327[62:0];

assign trunc_ln184_fu_629_p1 = lshr_ln184_fu_624_p2[0:0];

assign trunc_ln197_fu_756_p1 = C_1_fu_172[26:0];

assign trunc_ln198_fu_776_p1 = D_fu_176[26:0];

assign trunc_ln203_fu_694_p1 = C_1_fu_172[25:0];

assign trunc_ln204_fu_716_p1 = D_fu_176[25:0];

assign trunc_ln218_1_fu_833_p1 = sub_key_load_1_reg_360[62:0];

assign trunc_ln218_fu_852_p1 = lshr_ln218_fu_847_p2[0:0];

assign trunc_ln229_1_fu_931_p1 = s_input_0_reg_416[62:0];

assign trunc_ln229_fu_927_p1 = lshr_ln229_fu_921_p2[0:0];

assign trunc_ln232_1_fu_947_p1 = sub_key_q0[47:0];

assign trunc_ln232_2_fu_951_p1 = s_input_0_reg_416[46:0];

assign trunc_ln232_3_fu_955_p1 = sub_key_q0[46:0];

assign trunc_ln232_fu_943_p1 = s_input_0_reg_416[47:0];

assign trunc_ln240_1_fu_1086_p1 = lshr_ln240_1_fu_1080_p2[0:0];

assign trunc_ln240_fu_983_p1 = j_2_reg_439[2:0];

assign trunc_ln246_1_fu_1188_p1 = s_output_1_fu_180[27:0];

assign trunc_ln246_fu_1148_p1 = lshr_ln243_1_fu_1128_p2[7:0];

assign trunc_ln254_1_fu_1222_p1 = f_function_res_0_reg_451[30:0];

assign trunc_ln254_fu_1248_p1 = lshr_ln254_fu_1242_p2[0:0];

assign trunc_ln270_1_fu_1276_p1 = inv_init_perm_res_0_reg_484[62:0];

assign trunc_ln270_fu_1295_p1 = lshr_ln270_fu_1290_p2[0:0];

assign xor_ln232_1_fu_965_p2 = (trunc_ln232_fu_943_p1 ^ trunc_ln232_1_fu_947_p1);

assign xor_ln232_fu_959_p2 = (trunc_ln232_3_fu_955_p1 ^ trunc_ln232_2_fu_951_p1);

assign zext_ln174_1_fu_516_p1 = i_0_reg_316;

assign zext_ln174_fu_545_p1 = sub_ln174_fu_539_p2;

assign zext_ln184_1_fu_577_p1 = i_1_reg_338;

assign zext_ln184_2_fu_610_p1 = PC1_q0;

assign zext_ln184_fu_620_p1 = sub_ln184_fu_614_p2;

assign zext_ln214_fu_798_p1 = i_2_reg_349;

assign zext_ln218_1_fu_843_p1 = sub_ln218_fu_837_p2;

assign zext_ln218_fu_828_p1 = j_0_reg_372;

assign zext_ln229_1_fu_917_p1 = sub_ln229_fu_911_p2;

assign zext_ln229_fu_895_p1 = j_1_reg_428;

assign zext_ln232_fu_906_p1 = sub_ln232_fu_900_p2;

assign zext_ln240_1_fu_1005_p1 = shl_ln240_fu_999_p2;

assign zext_ln240_2_fu_1009_p1 = shl_ln240_fu_999_p2;

assign zext_ln240_3_fu_1058_p1 = $unsigned(sext_ln240_fu_1055_p1);

assign zext_ln240_4_fu_1062_p1 = $unsigned(sext_ln240_fu_1055_p1);

assign zext_ln240_5_fu_1027_p1 = shl_ln240_1_fu_1019_p3;

assign zext_ln240_6_fu_1077_p1 = sub_ln240_2_reg_1498;

assign zext_ln240_fu_995_p1 = shl_ln_fu_987_p3;

assign zext_ln243_fu_1125_p1 = sub_ln243_1_reg_1503;

assign zext_ln246_fu_1174_p1 = tmp_8_fu_1166_p3;

assign zext_ln254_1_fu_1238_p1 = sub_ln254_fu_1232_p2;

assign zext_ln254_fu_1217_p1 = j_3_reg_462;

assign zext_ln270_1_fu_1271_p1 = i_4_reg_473;

assign zext_ln270_fu_1286_p1 = sub_ln270_fu_1280_p2;

always @ (posedge ap_clk) begin
    sub_ln240_reg_1493[0] <= 1'b0;
    sub_ln240_2_reg_1498[0] <= 1'b0;
    sub_ln243_1_reg_1503[0] <= 1'b1;
end

endmodule //des_dec

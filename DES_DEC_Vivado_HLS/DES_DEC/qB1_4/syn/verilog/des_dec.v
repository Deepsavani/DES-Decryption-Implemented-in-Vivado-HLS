// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="des_dec,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35tl-cpg236-2L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.117375,HLS_SYN_LAT=1976,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=927,HLS_SYN_LUT=2041,HLS_VERSION=2019_1}" *)

module des_dec (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r,
        key,
        ap_return
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_pp0_stage0 = 13'd512;
parameter    ap_ST_fsm_state13 = 13'd1024;
parameter    ap_ST_fsm_state14 = 13'd2048;
parameter    ap_ST_fsm_state15 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] input_r;
input  [63:0] key;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] IP_address0;
reg    IP_ce0;
wire   [6:0] IP_q0;
wire   [5:0] PC1_address0;
reg    PC1_ce0;
wire   [5:0] PC1_q0;
wire   [5:0] PC2_address0;
reg    PC2_ce0;
wire   [5:0] PC2_q0;
wire   [8:0] S_address0;
reg    S_ce0;
wire   [3:0] S_q0;
wire   [8:0] S_address1;
reg    S_ce1;
wire   [3:0] S_q1;
wire   [8:0] S_address2;
reg    S_ce2;
wire   [3:0] S_q2;
wire   [8:0] S_address3;
reg    S_ce3;
wire   [3:0] S_q3;
wire   [8:0] S_address4;
reg    S_ce4;
wire   [3:0] S_q4;
wire   [8:0] S_address5;
reg    S_ce5;
wire   [3:0] S_q5;
wire   [8:0] S_address6;
reg    S_ce6;
wire   [3:0] S_q6;
wire   [8:0] S_address7;
reg    S_ce7;
wire   [3:0] S_q7;
wire   [5:0] PI_address0;
reg    PI_ce0;
wire   [6:0] PI_q0;
reg   [4:0] i_3_reg_587;
reg   [31:0] temp_reg_598;
reg   [31:0] L_0_reg_608;
wire   [6:0] i_fu_653_p2;
reg   [6:0] i_reg_2672;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln171_fu_647_p2;
wire   [62:0] trunc_ln174_1_fu_664_p1;
reg   [62:0] trunc_ln174_1_reg_2682;
reg   [31:0] L_reg_2687;
wire   [31:0] R_fu_678_p1;
reg   [31:0] R_reg_2692;
wire   [63:0] init_perm_res_fu_701_p3;
wire    ap_CS_fsm_state3;
wire   [5:0] i_5_fu_714_p2;
reg   [5:0] i_5_reg_2705;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln182_fu_708_p2;
wire   [62:0] trunc_ln184_1_fu_725_p1;
reg   [62:0] trunc_ln184_1_reg_2715;
wire   [63:0] permuted_choice_1_fu_776_p3;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln192_fu_783_p2;
wire    ap_CS_fsm_state6;
wire   [4:0] i_8_fu_789_p2;
reg   [4:0] i_8_reg_2745;
reg   [3:0] sub_key_addr_reg_2753;
wire   [55:0] tmp_23_fu_946_p3;
reg   [55:0] tmp_23_reg_2758;
wire    ap_CS_fsm_state7;
wire   [5:0] j_fu_960_p2;
reg   [5:0] j_reg_2766;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln216_fu_954_p2;
wire   [62:0] trunc_ln218_1_fu_971_p1;
reg   [62:0] trunc_ln218_1_reg_2776;
wire   [63:0] or_ln1_fu_994_p3;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln223_fu_1001_p2;
reg   [0:0] icmp_ln223_reg_2786;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state10_pp0_stage0_iter0;
wire    ap_block_state11_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln223_reg_2786_pp0_iter1_reg;
wire   [4:0] i_6_fu_1007_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] R_1_fu_2598_p2;
reg    ap_enable_reg_pp0_iter2;
wire   [63:0] pre_output_fu_2604_p3;
reg   [63:0] pre_output_reg_2845;
wire    ap_CS_fsm_state13;
wire   [6:0] i_7_fu_2618_p2;
reg   [6:0] i_7_reg_2853;
wire    ap_CS_fsm_state14;
wire   [0:0] icmp_ln267_fu_2612_p2;
wire   [62:0] trunc_ln270_1_fu_2629_p1;
reg   [62:0] trunc_ln270_1_reg_2863;
wire   [63:0] inv_init_perm_res_fu_2652_p3;
wire    ap_CS_fsm_state15;
wire    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter1;
reg   [3:0] sub_key_address0;
reg    sub_key_ce0;
reg    sub_key_we0;
wire   [63:0] sub_key_q0;
reg   [63:0] init_perm_res_0_reg_509;
reg   [6:0] i_0_reg_520;
reg   [63:0] permuted_choice_1_0_reg_531;
reg   [5:0] i_1_reg_542;
reg   [4:0] i_2_reg_553;
reg   [63:0] sub_key_load_1_reg_564;
reg   [5:0] j_0_reg_576;
reg   [31:0] ap_phi_mux_temp_phi_fu_601_p4;
wire    ap_block_pp0_stage0;
reg   [6:0] i_4_reg_619;
reg   [63:0] inv_init_perm_res_0_reg_630;
wire   [63:0] zext_ln174_1_fu_659_p1;
wire   [63:0] zext_ln184_1_fu_720_p1;
wire   [63:0] zext_ln214_fu_941_p1;
wire   [63:0] zext_ln218_fu_966_p1;
wire   [63:0] zext_ln232_fu_1019_p1;
wire   [63:0] zext_ln246_1_fu_1880_p1;
wire  signed [63:0] sext_ln246_fu_1939_p1;
wire  signed [63:0] sext_ln246_1_fu_1998_p1;
wire  signed [63:0] sext_ln246_2_fu_2057_p1;
wire  signed [63:0] sext_ln246_3_fu_2116_p1;
wire  signed [63:0] sext_ln246_4_fu_2175_p1;
wire  signed [63:0] sext_ln246_5_fu_2234_p1;
wire  signed [63:0] sext_ln246_6_fu_2301_p1;
wire   [63:0] zext_ln270_1_fu_2624_p1;
reg   [27:0] C_1_fu_322;
wire   [27:0] C_2_fu_851_p3;
wire   [0:0] empty_33_fu_831_p2;
wire   [27:0] C_3_fu_903_p3;
reg   [27:0] D_fu_326;
wire   [27:0] D_1_fu_739_p1;
wire   [27:0] D_2_fu_873_p3;
wire   [27:0] D_3_fu_923_p3;
wire   [6:0] sub_ln174_fu_682_p2;
wire   [63:0] zext_ln174_fu_688_p1;
wire   [63:0] lshr_ln174_fu_692_p2;
wire   [0:0] trunc_ln174_fu_697_p1;
wire   [6:0] zext_ln184_2_fu_753_p1;
wire   [6:0] sub_ln184_fu_757_p2;
wire   [63:0] zext_ln184_fu_763_p1;
wire   [63:0] lshr_ln184_fu_767_p2;
wire   [0:0] trunc_ln184_fu_772_p1;
wire   [0:0] empty_28_fu_801_p2;
wire   [0:0] empty_27_fu_795_p2;
wire   [0:0] empty_30_fu_813_p2;
wire   [0:0] empty_29_fu_807_p2;
wire   [0:0] empty_32_fu_825_p2;
wire   [0:0] empty_31_fu_819_p2;
wire   [25:0] trunc_ln203_fu_837_p1;
wire   [1:0] tmp_4_fu_841_p4;
wire   [25:0] trunc_ln204_fu_859_p1;
wire   [1:0] tmp_5_fu_863_p4;
wire   [26:0] trunc_ln197_fu_899_p1;
wire   [0:0] tmp_2_fu_891_p3;
wire   [26:0] trunc_ln198_fu_919_p1;
wire   [0:0] tmp_3_fu_911_p3;
wire   [5:0] sub_ln218_fu_975_p2;
wire   [55:0] zext_ln218_1_fu_981_p1;
wire   [55:0] lshr_ln218_fu_985_p2;
wire   [0:0] trunc_ln218_fu_990_p1;
wire   [4:0] sub_ln232_fu_1013_p2;
wire   [4:0] trunc_ln229_1_fu_1092_p1;
wire   [0:0] tmp_16_fu_1052_p3;
wire   [5:0] tmp_20_fu_1104_p4;
wire   [5:0] tmp_21_fu_1114_p4;
wire   [5:0] tmp_22_fu_1124_p4;
wire   [5:0] tmp_24_fu_1134_p4;
wire   [0:0] tmp_17_fu_1060_p3;
wire   [0:0] tmp_18_fu_1068_p3;
wire   [2:0] tmp_26_fu_1222_p4;
wire   [0:0] tmp_19_fu_1076_p3;
wire   [2:0] tmp_27_fu_1272_p4;
wire   [0:0] tmp_25_fu_1084_p3;
wire   [2:0] tmp_28_fu_1316_p4;
wire   [2:0] tmp_29_fu_1338_p4;
wire   [0:0] trunc_ln229_fu_1032_p1;
wire   [4:0] tmp_30_fu_1358_p4;
wire   [5:0] tmp_31_fu_1368_p4;
wire   [5:0] tmp_32_fu_1378_p4;
wire   [0:0] tmp_6_fu_1024_p3;
wire   [0:0] tmp_7_fu_1036_p3;
wire   [0:0] tmp_15_fu_1044_p3;
wire   [2:0] tmp_33_fu_1524_p4;
wire   [2:0] tmp_34_fu_1586_p4;
wire   [2:0] tmp_35_fu_1628_p4;
wire   [50:0] trunc_ln232_fu_1414_p1;
wire   [50:0] s_input_2_cast_fu_1388_p12;
wire   [8:0] trunc_ln232_22_fu_1696_p1;
wire   [8:0] trunc_ln229_14_fu_1348_p4;
wire   [14:0] trunc_ln232_21_fu_1692_p1;
wire   [14:0] trunc_ln229_13_fu_1326_p5;
wire   [11:0] trunc_ln232_20_fu_1688_p1;
wire   [11:0] trunc_ln229_12_fu_1306_p4;
wire   [6:0] trunc_ln232_19_fu_1684_p1;
wire   [6:0] trunc_ln229_11_fu_1296_p4;
wire   [20:0] trunc_ln232_18_fu_1680_p1;
wire   [20:0] trunc_ln229_10_fu_1282_p6;
wire   [17:0] trunc_ln232_17_fu_1676_p1;
wire   [17:0] trunc_ln229_9_fu_1260_p5;
wire   [12:0] trunc_ln232_16_fu_1672_p1;
wire   [12:0] trunc_ln229_7_fu_1248_p5;
wire   [26:0] trunc_ln232_15_fu_1668_p1;
wire   [26:0] trunc_ln229_5_fu_1232_p7;
wire   [23:0] trunc_ln232_14_fu_1664_p1;
wire   [23:0] trunc_ln229_4_fu_1208_p6;
wire   [18:0] trunc_ln232_13_fu_1660_p1;
wire   [18:0] trunc_ln229_3_fu_1194_p6;
wire   [32:0] trunc_ln232_12_fu_1656_p1;
wire   [32:0] tmp_14_fu_1638_p8;
wire   [29:0] trunc_ln232_11_fu_1624_p1;
wire   [29:0] trunc_ln229_2_fu_1178_p7;
wire   [24:0] trunc_ln232_10_fu_1620_p1;
wire   [24:0] trunc_ln229_s_fu_1162_p7;
wire   [38:0] trunc_ln232_9_fu_1616_p1;
wire   [38:0] tmp_13_fu_1596_p9;
wire   [35:0] trunc_ln232_8_fu_1582_p1;
wire   [35:0] tmp_12_fu_1564_p8;
wire   [30:0] trunc_ln232_7_fu_1560_p1;
wire   [30:0] trunc_ln229_8_fu_1144_p8;
wire   [44:0] trunc_ln232_6_fu_1556_p1;
wire   [44:0] tmp_11_fu_1534_p10;
wire   [41:0] trunc_ln232_5_fu_1520_p1;
wire   [41:0] tmp_10_fu_1500_p9;
wire   [36:0] trunc_ln232_4_fu_1496_p1;
wire   [36:0] tmp_s_fu_1476_p9;
wire   [47:0] trunc_ln232_3_fu_1472_p1;
wire   [47:0] tmp_9_fu_1448_p11;
wire   [42:0] trunc_ln232_2_fu_1444_p1;
wire   [42:0] tmp_8_fu_1422_p10;
wire   [42:0] xor_ln232_21_fu_1826_p2;
wire   [47:0] xor_ln232_20_fu_1820_p2;
wire   [50:0] s_input_fu_1700_p2;
wire   [0:0] tmp_37_fu_1840_p3;
wire   [0:0] tmp_36_fu_1832_p3;
wire   [3:0] trunc_ln6_fu_1848_p4;
wire   [5:0] or_ln_fu_1858_p4;
wire   [7:0] zext_ln246_fu_1868_p1;
wire   [31:0] add_ln_fu_1872_p3;
wire   [36:0] xor_ln232_19_fu_1814_p2;
wire   [41:0] xor_ln232_18_fu_1808_p2;
wire   [44:0] xor_ln232_17_fu_1802_p2;
wire   [0:0] tmp_39_fu_1893_p3;
wire   [0:0] tmp_38_fu_1885_p3;
wire   [3:0] trunc_ln243_1_fu_1901_p4;
wire   [5:0] or_ln246_1_fu_1911_p4;
wire   [7:0] zext_ln246_2_fu_1921_p1;
wire   [10:0] zext_ln246_3_cast_fu_1925_p3;
wire   [10:0] add_ln246_fu_1933_p2;
wire   [30:0] xor_ln232_16_fu_1796_p2;
wire   [35:0] xor_ln232_15_fu_1790_p2;
wire   [38:0] xor_ln232_14_fu_1784_p2;
wire   [0:0] tmp_41_fu_1952_p3;
wire   [0:0] tmp_40_fu_1944_p3;
wire   [3:0] trunc_ln243_2_fu_1960_p4;
wire   [5:0] or_ln246_2_fu_1970_p4;
wire   [7:0] zext_ln246_3_fu_1980_p1;
wire   [10:0] zext_ln246_5_cast_fu_1984_p3;
wire   [10:0] add_ln246_1_fu_1992_p2;
wire   [24:0] xor_ln232_13_fu_1778_p2;
wire   [29:0] xor_ln232_12_fu_1772_p2;
wire   [32:0] xor_ln232_11_fu_1766_p2;
wire   [0:0] tmp_43_fu_2011_p3;
wire   [0:0] tmp_42_fu_2003_p3;
wire   [3:0] trunc_ln243_3_fu_2019_p4;
wire   [5:0] or_ln246_3_fu_2029_p4;
wire   [7:0] zext_ln246_4_fu_2039_p1;
wire   [10:0] zext_ln246_7_cast_fu_2043_p3;
wire   [10:0] add_ln246_2_fu_2051_p2;
wire   [18:0] xor_ln232_10_fu_1760_p2;
wire   [23:0] xor_ln232_9_fu_1754_p2;
wire   [26:0] xor_ln232_8_fu_1748_p2;
wire   [0:0] tmp_45_fu_2070_p3;
wire   [0:0] tmp_44_fu_2062_p3;
wire   [3:0] trunc_ln243_4_fu_2078_p4;
wire   [5:0] or_ln246_4_fu_2088_p4;
wire   [7:0] zext_ln246_5_fu_2098_p1;
wire   [10:0] zext_ln246_9_cast_fu_2102_p3;
wire   [10:0] add_ln246_3_fu_2110_p2;
wire   [12:0] xor_ln232_7_fu_1742_p2;
wire   [17:0] xor_ln232_6_fu_1736_p2;
wire   [20:0] xor_ln232_5_fu_1730_p2;
wire   [0:0] tmp_47_fu_2129_p3;
wire   [0:0] tmp_46_fu_2121_p3;
wire   [3:0] trunc_ln243_5_fu_2137_p4;
wire   [5:0] or_ln246_5_fu_2147_p4;
wire   [7:0] zext_ln246_6_fu_2157_p1;
wire   [10:0] zext_ln246_11_cast_fu_2161_p3;
wire   [10:0] add_ln246_4_fu_2169_p2;
wire   [6:0] xor_ln232_4_fu_1724_p2;
wire   [11:0] xor_ln232_3_fu_1718_p2;
wire   [14:0] xor_ln232_2_fu_1712_p2;
wire   [0:0] tmp_49_fu_2188_p3;
wire   [0:0] tmp_48_fu_2180_p3;
wire   [3:0] trunc_ln243_6_fu_2196_p4;
wire   [5:0] or_ln246_6_fu_2206_p4;
wire   [7:0] zext_ln246_7_fu_2216_p1;
wire   [10:0] zext_ln246_13_cast_fu_2220_p3;
wire   [10:0] add_ln246_5_fu_2228_p2;
wire   [5:0] trunc_ln232_1_fu_1418_p1;
wire   [5:0] trunc_ln229_6_fu_1096_p3;
wire   [0:0] trunc_ln240_fu_2239_p1;
wire   [5:0] xor_ln240_fu_2243_p2;
wire   [8:0] xor_ln232_1_fu_1706_p2;
wire   [0:0] tmp_50_fu_2255_p3;
wire   [0:0] xor_ln241_fu_2249_p2;
wire   [3:0] trunc_ln243_7_fu_2263_p4;
wire   [5:0] or_ln246_7_fu_2273_p4;
wire   [7:0] zext_ln246_8_fu_2283_p1;
wire   [10:0] zext_ln246_15_cast_fu_2287_p3;
wire   [10:0] add_ln246_6_fu_2295_p2;
wire   [0:0] trunc_ln253_1_fu_2322_p1;
wire   [0:0] tmp_51_fu_2310_p3;
wire   [0:0] trunc_ln254_fu_2318_p1;
wire   [0:0] tmp_52_fu_2326_p3;
wire   [0:0] tmp_53_fu_2334_p3;
wire   [0:0] trunc_ln254_1_fu_2342_p1;
wire   [0:0] trunc_ln253_2_fu_2346_p1;
wire   [0:0] tmp_54_fu_2350_p3;
wire   [0:0] tmp_55_fu_2358_p3;
wire   [0:0] tmp_56_fu_2366_p3;
wire   [0:0] tmp_58_fu_2382_p3;
wire   [0:0] tmp_57_fu_2374_p3;
wire   [0:0] tmp_59_fu_2390_p3;
wire   [0:0] tmp_60_fu_2398_p3;
wire   [0:0] tmp_62_fu_2414_p3;
wire   [0:0] tmp_61_fu_2406_p3;
wire   [0:0] tmp_63_fu_2426_p3;
wire   [0:0] trunc_ln253_fu_2306_p1;
wire   [0:0] trunc_ln253_4_fu_2434_p1;
wire   [0:0] tmp_64_fu_2438_p3;
wire   [0:0] trunc_ln253_5_fu_2446_p1;
wire   [0:0] tmp_65_fu_2450_p3;
wire   [0:0] tmp_67_fu_2466_p3;
wire   [0:0] tmp_66_fu_2458_p3;
wire   [0:0] tmp_68_fu_2474_p3;
wire   [0:0] tmp_69_fu_2482_p3;
wire   [0:0] tmp_70_fu_2490_p3;
wire   [0:0] tmp_71_fu_2498_p3;
wire   [0:0] tmp_72_fu_2506_p3;
wire   [0:0] tmp_73_fu_2514_p3;
wire   [0:0] trunc_ln253_3_fu_2422_p1;
wire   [0:0] tmp_74_fu_2522_p3;
wire   [31:0] or_ln254_9_fu_2530_p33;
wire   [6:0] sub_ln270_fu_2633_p2;
wire   [63:0] zext_ln270_fu_2639_p1;
wire   [63:0] lshr_ln270_fu_2643_p2;
wire   [0:0] trunc_ln270_fu_2648_p1;
reg   [12:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

des_dec_IP #(
    .DataWidth( 7 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
IP_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(IP_address0),
    .ce0(IP_ce0),
    .q0(IP_q0)
);

des_dec_PC1 #(
    .DataWidth( 6 ),
    .AddressRange( 56 ),
    .AddressWidth( 6 ))
PC1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(PC1_address0),
    .ce0(PC1_ce0),
    .q0(PC1_q0)
);

des_dec_PC2 #(
    .DataWidth( 6 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
PC2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(PC2_address0),
    .ce0(PC2_ce0),
    .q0(PC2_q0)
);

des_dec_S #(
    .DataWidth( 4 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
S_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(S_address0),
    .ce0(S_ce0),
    .q0(S_q0),
    .address1(S_address1),
    .ce1(S_ce1),
    .q1(S_q1),
    .address2(S_address2),
    .ce2(S_ce2),
    .q2(S_q2),
    .address3(S_address3),
    .ce3(S_ce3),
    .q3(S_q3),
    .address4(S_address4),
    .ce4(S_ce4),
    .q4(S_q4),
    .address5(S_address5),
    .ce5(S_ce5),
    .q5(S_q5),
    .address6(S_address6),
    .ce6(S_ce6),
    .q6(S_q6),
    .address7(S_address7),
    .ce7(S_ce7),
    .q7(S_q7)
);

des_dec_PI #(
    .DataWidth( 7 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
PI_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(PI_address0),
    .ce0(PI_ce0),
    .q0(PI_q0)
);

des_dec_sub_key #(
    .DataWidth( 64 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
sub_key_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sub_key_address0),
    .ce0(sub_key_ce0),
    .we0(sub_key_we0),
    .d0(sub_key_load_1_reg_564),
    .q0(sub_key_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln223_fu_1001_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln192_fu_783_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln192_fu_783_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (empty_33_fu_831_p2 == 1'd1) & (icmp_ln192_fu_783_p2 == 1'd0))) begin
        C_1_fu_322 <= C_3_fu_903_p3;
    end else if (((1'b1 == ap_CS_fsm_state6) & (empty_33_fu_831_p2 == 1'd0) & (icmp_ln192_fu_783_p2 == 1'd0))) begin
        C_1_fu_322 <= C_2_fu_851_p3;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln182_fu_708_p2 == 1'd1))) begin
        C_1_fu_322 <= {{permuted_choice_1_0_reg_531[55:28]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (empty_33_fu_831_p2 == 1'd1) & (icmp_ln192_fu_783_p2 == 1'd0))) begin
        D_fu_326 <= D_3_fu_923_p3;
    end else if (((1'b1 == ap_CS_fsm_state6) & (empty_33_fu_831_p2 == 1'd0) & (icmp_ln192_fu_783_p2 == 1'd0))) begin
        D_fu_326 <= D_2_fu_873_p3;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln182_fu_708_p2 == 1'd1))) begin
        D_fu_326 <= D_1_fu_739_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln192_fu_783_p2 == 1'd1))) begin
        L_0_reg_608 <= L_reg_2687;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln223_reg_2786_pp0_iter1_reg == 1'd0))) begin
        L_0_reg_608 <= temp_reg_598;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_520 <= i_reg_2672;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_520 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_1_reg_542 <= i_5_reg_2705;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln171_fu_647_p2 == 1'd1))) begin
        i_1_reg_542 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln216_fu_954_p2 == 1'd1))) begin
        i_2_reg_553 <= i_8_reg_2745;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln182_fu_708_p2 == 1'd1))) begin
        i_2_reg_553 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln192_fu_783_p2 == 1'd1))) begin
        i_3_reg_587 <= 5'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln223_fu_1001_p2 == 1'd0))) begin
        i_3_reg_587 <= i_6_fu_1007_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        i_4_reg_619 <= i_7_reg_2853;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        i_4_reg_619 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        init_perm_res_0_reg_509 <= init_perm_res_fu_701_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        init_perm_res_0_reg_509 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        inv_init_perm_res_0_reg_630 <= inv_init_perm_res_fu_2652_p3;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        inv_init_perm_res_0_reg_630 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        j_0_reg_576 <= j_reg_2766;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        j_0_reg_576 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        permuted_choice_1_0_reg_531 <= permuted_choice_1_fu_776_p3;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln171_fu_647_p2 == 1'd1))) begin
        permuted_choice_1_0_reg_531 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sub_key_load_1_reg_564 <= or_ln1_fu_994_p3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sub_key_load_1_reg_564 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln192_fu_783_p2 == 1'd1))) begin
        temp_reg_598 <= R_reg_2692;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln223_reg_2786_pp0_iter1_reg == 1'd0))) begin
        temp_reg_598 <= R_1_fu_2598_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln171_fu_647_p2 == 1'd1))) begin
        L_reg_2687 <= {{init_perm_res_0_reg_509[63:32]}};
        R_reg_2692 <= R_fu_678_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_5_reg_2705 <= i_5_fu_714_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i_7_reg_2853 <= i_7_fu_2618_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_8_reg_2745 <= i_8_fu_789_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_2672 <= i_fu_653_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln223_reg_2786 <= icmp_ln223_fu_1001_p2;
        icmp_ln223_reg_2786_pp0_iter1_reg <= icmp_ln223_reg_2786;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        j_reg_2766 <= j_fu_960_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        pre_output_reg_2845 <= pre_output_fu_2604_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln192_fu_783_p2 == 1'd0))) begin
        sub_key_addr_reg_2753 <= zext_ln214_fu_941_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_23_reg_2758 <= tmp_23_fu_946_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln171_fu_647_p2 == 1'd0))) begin
        trunc_ln174_1_reg_2682 <= trunc_ln174_1_fu_664_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln182_fu_708_p2 == 1'd0))) begin
        trunc_ln184_1_reg_2715 <= trunc_ln184_1_fu_725_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln216_fu_954_p2 == 1'd0))) begin
        trunc_ln218_1_reg_2776 <= trunc_ln218_1_fu_971_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln267_fu_2612_p2 == 1'd0))) begin
        trunc_ln270_1_reg_2863 <= trunc_ln270_1_fu_2629_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        IP_ce0 = 1'b1;
    end else begin
        IP_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        PC1_ce0 = 1'b1;
    end else begin
        PC1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        PC2_ce0 = 1'b1;
    end else begin
        PC2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        PI_ce0 = 1'b1;
    end else begin
        PI_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        S_ce0 = 1'b1;
    end else begin
        S_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        S_ce1 = 1'b1;
    end else begin
        S_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        S_ce2 = 1'b1;
    end else begin
        S_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        S_ce3 = 1'b1;
    end else begin
        S_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        S_ce4 = 1'b1;
    end else begin
        S_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        S_ce5 = 1'b1;
    end else begin
        S_ce5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        S_ce6 = 1'b1;
    end else begin
        S_ce6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        S_ce7 = 1'b1;
    end else begin
        S_ce7 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln267_fu_2612_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln223_reg_2786_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_temp_phi_fu_601_p4 = R_1_fu_2598_p2;
    end else begin
        ap_phi_mux_temp_phi_fu_601_p4 = temp_reg_598;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln267_fu_2612_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sub_key_address0 = zext_ln232_fu_1019_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sub_key_address0 = sub_key_addr_reg_2753;
    end else begin
        sub_key_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        sub_key_ce0 = 1'b1;
    end else begin
        sub_key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sub_key_we0 = 1'b1;
    end else begin
        sub_key_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln171_fu_647_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln182_fu_708_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln192_fu_783_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln216_fu_954_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln267_fu_2612_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C_2_fu_851_p3 = {{trunc_ln203_fu_837_p1}, {tmp_4_fu_841_p4}};

assign C_3_fu_903_p3 = {{trunc_ln197_fu_899_p1}, {tmp_2_fu_891_p3}};

assign D_1_fu_739_p1 = permuted_choice_1_0_reg_531[27:0];

assign D_2_fu_873_p3 = {{trunc_ln204_fu_859_p1}, {tmp_5_fu_863_p4}};

assign D_3_fu_923_p3 = {{trunc_ln198_fu_919_p1}, {tmp_3_fu_911_p3}};

assign IP_address0 = zext_ln174_1_fu_659_p1;

assign PC1_address0 = zext_ln184_1_fu_720_p1;

assign PC2_address0 = zext_ln218_fu_966_p1;

assign PI_address0 = zext_ln270_1_fu_2624_p1;

assign R_1_fu_2598_p2 = (or_ln254_9_fu_2530_p33 ^ L_0_reg_608);

assign R_fu_678_p1 = init_perm_res_0_reg_509[31:0];

assign S_address0 = zext_ln246_1_fu_1880_p1;

assign S_address1 = sext_ln246_fu_1939_p1;

assign S_address2 = sext_ln246_1_fu_1998_p1;

assign S_address3 = sext_ln246_2_fu_2057_p1;

assign S_address4 = sext_ln246_3_fu_2116_p1;

assign S_address5 = sext_ln246_4_fu_2175_p1;

assign S_address6 = sext_ln246_5_fu_2234_p1;

assign S_address7 = sext_ln246_6_fu_2301_p1;

assign add_ln246_1_fu_1992_p2 = (11'd128 + zext_ln246_5_cast_fu_1984_p3);

assign add_ln246_2_fu_2051_p2 = (11'd192 + zext_ln246_7_cast_fu_2043_p3);

assign add_ln246_3_fu_2110_p2 = (11'd256 + zext_ln246_9_cast_fu_2102_p3);

assign add_ln246_4_fu_2169_p2 = (11'd320 + zext_ln246_11_cast_fu_2161_p3);

assign add_ln246_5_fu_2228_p2 = (11'd384 + zext_ln246_13_cast_fu_2220_p3);

assign add_ln246_6_fu_2295_p2 = (11'd448 + zext_ln246_15_cast_fu_2287_p3);

assign add_ln246_fu_1933_p2 = (11'd64 + zext_ln246_3_cast_fu_1925_p3);

assign add_ln_fu_1872_p3 = {{24'd0}, {zext_ln246_fu_1868_p1}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return = inv_init_perm_res_0_reg_630;

assign empty_27_fu_795_p2 = ((i_2_reg_553 == 5'd15) ? 1'b1 : 1'b0);

assign empty_28_fu_801_p2 = ((i_2_reg_553 == 5'd8) ? 1'b1 : 1'b0);

assign empty_29_fu_807_p2 = (empty_28_fu_801_p2 | empty_27_fu_795_p2);

assign empty_30_fu_813_p2 = ((i_2_reg_553 == 5'd1) ? 1'b1 : 1'b0);

assign empty_31_fu_819_p2 = (empty_30_fu_813_p2 | empty_29_fu_807_p2);

assign empty_32_fu_825_p2 = ((i_2_reg_553 == 5'd0) ? 1'b1 : 1'b0);

assign empty_33_fu_831_p2 = (empty_32_fu_825_p2 | empty_31_fu_819_p2);

assign i_5_fu_714_p2 = (i_1_reg_542 + 6'd1);

assign i_6_fu_1007_p2 = (i_3_reg_587 + 5'd1);

assign i_7_fu_2618_p2 = (i_4_reg_619 + 7'd1);

assign i_8_fu_789_p2 = (i_2_reg_553 + 5'd1);

assign i_fu_653_p2 = (i_0_reg_520 + 7'd1);

assign icmp_ln171_fu_647_p2 = ((i_0_reg_520 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln182_fu_708_p2 = ((i_1_reg_542 == 6'd56) ? 1'b1 : 1'b0);

assign icmp_ln192_fu_783_p2 = ((i_2_reg_553 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln216_fu_954_p2 = ((j_0_reg_576 == 6'd48) ? 1'b1 : 1'b0);

assign icmp_ln223_fu_1001_p2 = ((i_3_reg_587 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln267_fu_2612_p2 = ((i_4_reg_619 == 7'd64) ? 1'b1 : 1'b0);

assign init_perm_res_fu_701_p3 = {{trunc_ln174_1_reg_2682}, {trunc_ln174_fu_697_p1}};

assign inv_init_perm_res_fu_2652_p3 = {{trunc_ln270_1_reg_2863}, {trunc_ln270_fu_2648_p1}};

assign j_fu_960_p2 = (j_0_reg_576 + 6'd1);

assign lshr_ln174_fu_692_p2 = input_r >> zext_ln174_fu_688_p1;

assign lshr_ln184_fu_767_p2 = key >> zext_ln184_fu_763_p1;

assign lshr_ln218_fu_985_p2 = tmp_23_reg_2758 >> zext_ln218_1_fu_981_p1;

assign lshr_ln270_fu_2643_p2 = pre_output_reg_2845 >> zext_ln270_fu_2639_p1;

assign or_ln1_fu_994_p3 = {{trunc_ln218_1_reg_2776}, {trunc_ln218_fu_990_p1}};

assign or_ln246_1_fu_1911_p4 = {{{tmp_39_fu_1893_p3}, {tmp_38_fu_1885_p3}}, {trunc_ln243_1_fu_1901_p4}};

assign or_ln246_2_fu_1970_p4 = {{{tmp_41_fu_1952_p3}, {tmp_40_fu_1944_p3}}, {trunc_ln243_2_fu_1960_p4}};

assign or_ln246_3_fu_2029_p4 = {{{tmp_43_fu_2011_p3}, {tmp_42_fu_2003_p3}}, {trunc_ln243_3_fu_2019_p4}};

assign or_ln246_4_fu_2088_p4 = {{{tmp_45_fu_2070_p3}, {tmp_44_fu_2062_p3}}, {trunc_ln243_4_fu_2078_p4}};

assign or_ln246_5_fu_2147_p4 = {{{tmp_47_fu_2129_p3}, {tmp_46_fu_2121_p3}}, {trunc_ln243_5_fu_2137_p4}};

assign or_ln246_6_fu_2206_p4 = {{{tmp_49_fu_2188_p3}, {tmp_48_fu_2180_p3}}, {trunc_ln243_6_fu_2196_p4}};

assign or_ln246_7_fu_2273_p4 = {{{tmp_50_fu_2255_p3}, {xor_ln241_fu_2249_p2}}, {trunc_ln243_7_fu_2263_p4}};

assign or_ln254_9_fu_2530_p33 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{trunc_ln253_1_fu_2322_p1}, {tmp_51_fu_2310_p3}}, {trunc_ln254_fu_2318_p1}}, {tmp_52_fu_2326_p3}}, {tmp_53_fu_2334_p3}}, {trunc_ln254_1_fu_2342_p1}}, {trunc_ln253_2_fu_2346_p1}}, {tmp_54_fu_2350_p3}}, {tmp_55_fu_2358_p3}}, {tmp_56_fu_2366_p3}}, {tmp_58_fu_2382_p3}}, {tmp_57_fu_2374_p3}}, {tmp_59_fu_2390_p3}}, {tmp_60_fu_2398_p3}}, {tmp_62_fu_2414_p3}}, {tmp_61_fu_2406_p3}}, {tmp_63_fu_2426_p3}}, {trunc_ln253_fu_2306_p1}}, {trunc_ln253_4_fu_2434_p1}}, {tmp_64_fu_2438_p3}}, {trunc_ln253_5_fu_2446_p1}}, {tmp_65_fu_2450_p3}}, {tmp_67_fu_2466_p3}}, {tmp_66_fu_2458_p3}}, {tmp_68_fu_2474_p3}}, {tmp_69_fu_2482_p3}}, {tmp_70_fu_2490_p3}}, {tmp_71_fu_2498_p3}}, {tmp_72_fu_2506_p3}}, {tmp_73_fu_2514_p3}}, {trunc_ln253_3_fu_2422_p1}}, {tmp_74_fu_2522_p3}};

assign or_ln_fu_1858_p4 = {{{tmp_37_fu_1840_p3}, {tmp_36_fu_1832_p3}}, {trunc_ln6_fu_1848_p4}};

assign permuted_choice_1_fu_776_p3 = {{trunc_ln184_1_reg_2715}, {trunc_ln184_fu_772_p1}};

assign pre_output_fu_2604_p3 = {{temp_reg_598}, {L_0_reg_608}};

assign s_input_2_cast_fu_1388_p12 = {{{{{{{{{{{{{{{{{{{{3'd0}, {trunc_ln229_fu_1032_p1}}}, {tmp_30_fu_1358_p4}}}, {tmp_31_fu_1368_p4}}}, {tmp_32_fu_1378_p4}}}, {tmp_20_fu_1104_p4}}}, {tmp_21_fu_1114_p4}}}, {tmp_22_fu_1124_p4}}}, {tmp_24_fu_1134_p4}}}, {trunc_ln229_1_fu_1092_p1}}}, {tmp_6_fu_1024_p3}};

assign s_input_fu_1700_p2 = (trunc_ln232_fu_1414_p1 ^ s_input_2_cast_fu_1388_p12);

assign sext_ln246_1_fu_1998_p1 = $signed(add_ln246_1_fu_1992_p2);

assign sext_ln246_2_fu_2057_p1 = $signed(add_ln246_2_fu_2051_p2);

assign sext_ln246_3_fu_2116_p1 = $signed(add_ln246_3_fu_2110_p2);

assign sext_ln246_4_fu_2175_p1 = $signed(add_ln246_4_fu_2169_p2);

assign sext_ln246_5_fu_2234_p1 = $signed(add_ln246_5_fu_2228_p2);

assign sext_ln246_6_fu_2301_p1 = $signed(add_ln246_6_fu_2295_p2);

assign sext_ln246_fu_1939_p1 = $signed(add_ln246_fu_1933_p2);

assign sub_ln174_fu_682_p2 = ($signed(7'd64) - $signed(IP_q0));

assign sub_ln184_fu_757_p2 = ($signed(7'd64) - $signed(zext_ln184_2_fu_753_p1));

assign sub_ln218_fu_975_p2 = ($signed(6'd56) - $signed(PC2_q0));

assign sub_ln232_fu_1013_p2 = (5'd15 - i_3_reg_587);

assign sub_ln270_fu_2633_p2 = ($signed(7'd64) - $signed(PI_q0));

assign tmp_10_fu_1500_p9 = {{{{{{{{tmp_31_fu_1368_p4}, {tmp_32_fu_1378_p4}}, {tmp_20_fu_1104_p4}}, {tmp_21_fu_1114_p4}}, {tmp_22_fu_1124_p4}}, {tmp_24_fu_1134_p4}}, {trunc_ln229_1_fu_1092_p1}}, {tmp_6_fu_1024_p3}};

assign tmp_11_fu_1534_p10 = {{{{{{{{{tmp_33_fu_1524_p4}, {tmp_31_fu_1368_p4}}, {tmp_32_fu_1378_p4}}, {tmp_20_fu_1104_p4}}, {tmp_21_fu_1114_p4}}, {tmp_22_fu_1124_p4}}, {tmp_24_fu_1134_p4}}, {trunc_ln229_1_fu_1092_p1}}, {tmp_6_fu_1024_p3}};

assign tmp_12_fu_1564_p8 = {{{{{{{tmp_32_fu_1378_p4}, {tmp_20_fu_1104_p4}}, {tmp_21_fu_1114_p4}}, {tmp_22_fu_1124_p4}}, {tmp_24_fu_1134_p4}}, {trunc_ln229_1_fu_1092_p1}}, {tmp_6_fu_1024_p3}};

assign tmp_13_fu_1596_p9 = {{{{{{{{tmp_34_fu_1586_p4}, {tmp_32_fu_1378_p4}}, {tmp_20_fu_1104_p4}}, {tmp_21_fu_1114_p4}}, {tmp_22_fu_1124_p4}}, {tmp_24_fu_1134_p4}}, {trunc_ln229_1_fu_1092_p1}}, {tmp_6_fu_1024_p3}};

assign tmp_14_fu_1638_p8 = {{{{{{{tmp_35_fu_1628_p4}, {tmp_20_fu_1104_p4}}, {tmp_21_fu_1114_p4}}, {tmp_22_fu_1124_p4}}, {tmp_24_fu_1134_p4}}, {trunc_ln229_1_fu_1092_p1}}, {tmp_6_fu_1024_p3}};

assign tmp_15_fu_1044_p3 = ap_phi_mux_temp_phi_fu_601_p4[32'd23];

assign tmp_16_fu_1052_p3 = ap_phi_mux_temp_phi_fu_601_p4[32'd19];

assign tmp_17_fu_1060_p3 = ap_phi_mux_temp_phi_fu_601_p4[32'd15];

assign tmp_18_fu_1068_p3 = ap_phi_mux_temp_phi_fu_601_p4[32'd11];

assign tmp_19_fu_1076_p3 = ap_phi_mux_temp_phi_fu_601_p4[32'd7];

assign tmp_20_fu_1104_p4 = {{ap_phi_mux_temp_phi_fu_601_p4[20:15]}};

assign tmp_21_fu_1114_p4 = {{ap_phi_mux_temp_phi_fu_601_p4[16:11]}};

assign tmp_22_fu_1124_p4 = {{ap_phi_mux_temp_phi_fu_601_p4[12:7]}};

assign tmp_23_fu_946_p3 = {{C_1_fu_322}, {D_fu_326}};

assign tmp_24_fu_1134_p4 = {{ap_phi_mux_temp_phi_fu_601_p4[8:3]}};

assign tmp_25_fu_1084_p3 = ap_phi_mux_temp_phi_fu_601_p4[32'd3];

assign tmp_26_fu_1222_p4 = {{ap_phi_mux_temp_phi_fu_601_p4[17:15]}};

assign tmp_27_fu_1272_p4 = {{ap_phi_mux_temp_phi_fu_601_p4[13:11]}};

assign tmp_28_fu_1316_p4 = {{ap_phi_mux_temp_phi_fu_601_p4[9:7]}};

assign tmp_29_fu_1338_p4 = {{ap_phi_mux_temp_phi_fu_601_p4[5:3]}};

assign tmp_2_fu_891_p3 = C_1_fu_322[32'd27];

assign tmp_30_fu_1358_p4 = {{ap_phi_mux_temp_phi_fu_601_p4[31:27]}};

assign tmp_31_fu_1368_p4 = {{ap_phi_mux_temp_phi_fu_601_p4[28:23]}};

assign tmp_32_fu_1378_p4 = {{ap_phi_mux_temp_phi_fu_601_p4[24:19]}};

assign tmp_33_fu_1524_p4 = {{ap_phi_mux_temp_phi_fu_601_p4[29:27]}};

assign tmp_34_fu_1586_p4 = {{ap_phi_mux_temp_phi_fu_601_p4[25:23]}};

assign tmp_35_fu_1628_p4 = {{ap_phi_mux_temp_phi_fu_601_p4[21:19]}};

assign tmp_36_fu_1832_p3 = xor_ln232_21_fu_1826_p2[32'd42];

assign tmp_37_fu_1840_p3 = xor_ln232_20_fu_1820_p2[32'd47];

assign tmp_38_fu_1885_p3 = xor_ln232_19_fu_1814_p2[32'd36];

assign tmp_39_fu_1893_p3 = xor_ln232_18_fu_1808_p2[32'd41];

assign tmp_3_fu_911_p3 = D_fu_326[32'd27];

assign tmp_40_fu_1944_p3 = xor_ln232_16_fu_1796_p2[32'd30];

assign tmp_41_fu_1952_p3 = xor_ln232_15_fu_1790_p2[32'd35];

assign tmp_42_fu_2003_p3 = xor_ln232_13_fu_1778_p2[32'd24];

assign tmp_43_fu_2011_p3 = xor_ln232_12_fu_1772_p2[32'd29];

assign tmp_44_fu_2062_p3 = xor_ln232_10_fu_1760_p2[32'd18];

assign tmp_45_fu_2070_p3 = xor_ln232_9_fu_1754_p2[32'd23];

assign tmp_46_fu_2121_p3 = xor_ln232_7_fu_1742_p2[32'd12];

assign tmp_47_fu_2129_p3 = xor_ln232_6_fu_1736_p2[32'd17];

assign tmp_48_fu_2180_p3 = xor_ln232_4_fu_1724_p2[32'd6];

assign tmp_49_fu_2188_p3 = xor_ln232_3_fu_1718_p2[32'd11];

assign tmp_4_fu_841_p4 = {{C_1_fu_322[27:26]}};

assign tmp_50_fu_2255_p3 = xor_ln240_fu_2243_p2[32'd5];

assign tmp_51_fu_2310_p3 = S_q1[32'd1];

assign tmp_52_fu_2326_p3 = S_q5[32'd3];

assign tmp_53_fu_2334_p3 = S_q7[32'd3];

assign tmp_54_fu_2350_p3 = S_q4[32'd3];

assign tmp_55_fu_2358_p3 = S_q0[32'd3];

assign tmp_56_fu_2366_p3 = S_q3[32'd1];

assign tmp_57_fu_2374_p3 = S_q6[32'd2];

assign tmp_58_fu_2382_p3 = S_q5[32'd1];

assign tmp_59_fu_2390_p3 = S_q1[32'd3];

assign tmp_5_fu_863_p4 = {{D_fu_326[27:26]}};

assign tmp_60_fu_2398_p3 = S_q4[32'd2];

assign tmp_61_fu_2406_p3 = S_q2[32'd2];

assign tmp_62_fu_2414_p3 = S_q7[32'd1];

assign tmp_63_fu_2426_p3 = S_q0[32'd2];

assign tmp_64_fu_2438_p3 = S_q3[32'd2];

assign tmp_65_fu_2450_p3 = S_q6[32'd1];

assign tmp_66_fu_2458_p3 = S_q2[32'd3];

assign tmp_67_fu_2466_p3 = S_q0[32'd1];

assign tmp_68_fu_2474_p3 = S_q4[32'd1];

assign tmp_69_fu_2482_p3 = S_q3[32'd3];

assign tmp_6_fu_1024_p3 = ap_phi_mux_temp_phi_fu_601_p4[32'd31];

assign tmp_70_fu_2490_p3 = S_q7[32'd2];

assign tmp_71_fu_2498_p3 = S_q1[32'd2];

assign tmp_72_fu_2506_p3 = S_q5[32'd2];

assign tmp_73_fu_2514_p3 = S_q2[32'd1];

assign tmp_74_fu_2522_p3 = S_q6[32'd3];

assign tmp_7_fu_1036_p3 = ap_phi_mux_temp_phi_fu_601_p4[32'd27];

assign tmp_8_fu_1422_p10 = {{{{{{{{{tmp_7_fu_1036_p3}, {tmp_31_fu_1368_p4}}, {tmp_32_fu_1378_p4}}, {tmp_20_fu_1104_p4}}, {tmp_21_fu_1114_p4}}, {tmp_22_fu_1124_p4}}, {tmp_24_fu_1134_p4}}, {trunc_ln229_1_fu_1092_p1}}, {tmp_6_fu_1024_p3}};

assign tmp_9_fu_1448_p11 = {{{{{{{{{{trunc_ln229_fu_1032_p1}, {tmp_30_fu_1358_p4}}, {tmp_31_fu_1368_p4}}, {tmp_32_fu_1378_p4}}, {tmp_20_fu_1104_p4}}, {tmp_21_fu_1114_p4}}, {tmp_22_fu_1124_p4}}, {tmp_24_fu_1134_p4}}, {trunc_ln229_1_fu_1092_p1}}, {tmp_6_fu_1024_p3}};

assign tmp_s_fu_1476_p9 = {{{{{{{{tmp_15_fu_1044_p3}, {tmp_32_fu_1378_p4}}, {tmp_20_fu_1104_p4}}, {tmp_21_fu_1114_p4}}, {tmp_22_fu_1124_p4}}, {tmp_24_fu_1134_p4}}, {trunc_ln229_1_fu_1092_p1}}, {tmp_6_fu_1024_p3}};

assign trunc_ln174_1_fu_664_p1 = init_perm_res_0_reg_509[62:0];

assign trunc_ln174_fu_697_p1 = lshr_ln174_fu_692_p2[0:0];

assign trunc_ln184_1_fu_725_p1 = permuted_choice_1_0_reg_531[62:0];

assign trunc_ln184_fu_772_p1 = lshr_ln184_fu_767_p2[0:0];

assign trunc_ln197_fu_899_p1 = C_1_fu_322[26:0];

assign trunc_ln198_fu_919_p1 = D_fu_326[26:0];

assign trunc_ln203_fu_837_p1 = C_1_fu_322[25:0];

assign trunc_ln204_fu_859_p1 = D_fu_326[25:0];

assign trunc_ln218_1_fu_971_p1 = sub_key_load_1_reg_564[62:0];

assign trunc_ln218_fu_990_p1 = lshr_ln218_fu_985_p2[0:0];

assign trunc_ln229_10_fu_1282_p6 = {{{{{tmp_27_fu_1272_p4}, {tmp_22_fu_1124_p4}}, {tmp_24_fu_1134_p4}}, {trunc_ln229_1_fu_1092_p1}}, {1'd0}};

assign trunc_ln229_11_fu_1296_p4 = {{{tmp_25_fu_1084_p3}, {trunc_ln229_1_fu_1092_p1}}, {1'd0}};

assign trunc_ln229_12_fu_1306_p4 = {{{tmp_24_fu_1134_p4}, {trunc_ln229_1_fu_1092_p1}}, {1'd0}};

assign trunc_ln229_13_fu_1326_p5 = {{{{tmp_28_fu_1316_p4}, {tmp_24_fu_1134_p4}}, {trunc_ln229_1_fu_1092_p1}}, {1'd0}};

assign trunc_ln229_14_fu_1348_p4 = {{{tmp_29_fu_1338_p4}, {trunc_ln229_1_fu_1092_p1}}, {1'd0}};

assign trunc_ln229_1_fu_1092_p1 = ap_phi_mux_temp_phi_fu_601_p4[4:0];

assign trunc_ln229_2_fu_1178_p7 = {{{{{{tmp_20_fu_1104_p4}, {tmp_21_fu_1114_p4}}, {tmp_22_fu_1124_p4}}, {tmp_24_fu_1134_p4}}, {trunc_ln229_1_fu_1092_p1}}, {1'd0}};

assign trunc_ln229_3_fu_1194_p6 = {{{{{tmp_18_fu_1068_p3}, {tmp_22_fu_1124_p4}}, {tmp_24_fu_1134_p4}}, {trunc_ln229_1_fu_1092_p1}}, {1'd0}};

assign trunc_ln229_4_fu_1208_p6 = {{{{{tmp_21_fu_1114_p4}, {tmp_22_fu_1124_p4}}, {tmp_24_fu_1134_p4}}, {trunc_ln229_1_fu_1092_p1}}, {1'd0}};

assign trunc_ln229_5_fu_1232_p7 = {{{{{{tmp_26_fu_1222_p4}, {tmp_21_fu_1114_p4}}, {tmp_22_fu_1124_p4}}, {tmp_24_fu_1134_p4}}, {trunc_ln229_1_fu_1092_p1}}, {1'd0}};

assign trunc_ln229_6_fu_1096_p3 = {{trunc_ln229_1_fu_1092_p1}, {1'd0}};

assign trunc_ln229_7_fu_1248_p5 = {{{{tmp_19_fu_1076_p3}, {tmp_24_fu_1134_p4}}, {trunc_ln229_1_fu_1092_p1}}, {1'd0}};

assign trunc_ln229_8_fu_1144_p8 = {{{{{{{tmp_16_fu_1052_p3}, {tmp_20_fu_1104_p4}}, {tmp_21_fu_1114_p4}}, {tmp_22_fu_1124_p4}}, {tmp_24_fu_1134_p4}}, {trunc_ln229_1_fu_1092_p1}}, {1'd0}};

assign trunc_ln229_9_fu_1260_p5 = {{{{tmp_22_fu_1124_p4}, {tmp_24_fu_1134_p4}}, {trunc_ln229_1_fu_1092_p1}}, {1'd0}};

assign trunc_ln229_fu_1032_p1 = ap_phi_mux_temp_phi_fu_601_p4[0:0];

assign trunc_ln229_s_fu_1162_p7 = {{{{{{tmp_17_fu_1060_p3}, {tmp_21_fu_1114_p4}}, {tmp_22_fu_1124_p4}}, {tmp_24_fu_1134_p4}}, {trunc_ln229_1_fu_1092_p1}}, {1'd0}};

assign trunc_ln232_10_fu_1620_p1 = sub_key_q0[24:0];

assign trunc_ln232_11_fu_1624_p1 = sub_key_q0[29:0];

assign trunc_ln232_12_fu_1656_p1 = sub_key_q0[32:0];

assign trunc_ln232_13_fu_1660_p1 = sub_key_q0[18:0];

assign trunc_ln232_14_fu_1664_p1 = sub_key_q0[23:0];

assign trunc_ln232_15_fu_1668_p1 = sub_key_q0[26:0];

assign trunc_ln232_16_fu_1672_p1 = sub_key_q0[12:0];

assign trunc_ln232_17_fu_1676_p1 = sub_key_q0[17:0];

assign trunc_ln232_18_fu_1680_p1 = sub_key_q0[20:0];

assign trunc_ln232_19_fu_1684_p1 = sub_key_q0[6:0];

assign trunc_ln232_1_fu_1418_p1 = sub_key_q0[5:0];

assign trunc_ln232_20_fu_1688_p1 = sub_key_q0[11:0];

assign trunc_ln232_21_fu_1692_p1 = sub_key_q0[14:0];

assign trunc_ln232_22_fu_1696_p1 = sub_key_q0[8:0];

assign trunc_ln232_2_fu_1444_p1 = sub_key_q0[42:0];

assign trunc_ln232_3_fu_1472_p1 = sub_key_q0[47:0];

assign trunc_ln232_4_fu_1496_p1 = sub_key_q0[36:0];

assign trunc_ln232_5_fu_1520_p1 = sub_key_q0[41:0];

assign trunc_ln232_6_fu_1556_p1 = sub_key_q0[44:0];

assign trunc_ln232_7_fu_1560_p1 = sub_key_q0[30:0];

assign trunc_ln232_8_fu_1582_p1 = sub_key_q0[35:0];

assign trunc_ln232_9_fu_1616_p1 = sub_key_q0[38:0];

assign trunc_ln232_fu_1414_p1 = sub_key_q0[50:0];

assign trunc_ln240_fu_2239_p1 = sub_key_q0[0:0];

assign trunc_ln243_1_fu_1901_p4 = {{xor_ln232_17_fu_1802_p2[40:37]}};

assign trunc_ln243_2_fu_1960_p4 = {{xor_ln232_14_fu_1784_p2[34:31]}};

assign trunc_ln243_3_fu_2019_p4 = {{xor_ln232_11_fu_1766_p2[28:25]}};

assign trunc_ln243_4_fu_2078_p4 = {{xor_ln232_8_fu_1748_p2[22:19]}};

assign trunc_ln243_5_fu_2137_p4 = {{xor_ln232_5_fu_1730_p2[16:13]}};

assign trunc_ln243_6_fu_2196_p4 = {{xor_ln232_2_fu_1712_p2[10:7]}};

assign trunc_ln243_7_fu_2263_p4 = {{xor_ln232_1_fu_1706_p2[4:1]}};

assign trunc_ln253_1_fu_2322_p1 = S_q3[0:0];

assign trunc_ln253_2_fu_2346_p1 = S_q6[0:0];

assign trunc_ln253_3_fu_2422_p1 = S_q0[0:0];

assign trunc_ln253_4_fu_2434_p1 = S_q5[0:0];

assign trunc_ln253_5_fu_2446_p1 = S_q7[0:0];

assign trunc_ln253_fu_2306_p1 = S_q1[0:0];

assign trunc_ln254_1_fu_2342_p1 = S_q2[0:0];

assign trunc_ln254_fu_2318_p1 = S_q4[0:0];

assign trunc_ln270_1_fu_2629_p1 = inv_init_perm_res_0_reg_630[62:0];

assign trunc_ln270_fu_2648_p1 = lshr_ln270_fu_2643_p2[0:0];

assign trunc_ln6_fu_1848_p4 = {{s_input_fu_1700_p2[46:43]}};

assign xor_ln232_10_fu_1760_p2 = (trunc_ln232_13_fu_1660_p1 ^ trunc_ln229_3_fu_1194_p6);

assign xor_ln232_11_fu_1766_p2 = (trunc_ln232_12_fu_1656_p1 ^ tmp_14_fu_1638_p8);

assign xor_ln232_12_fu_1772_p2 = (trunc_ln232_11_fu_1624_p1 ^ trunc_ln229_2_fu_1178_p7);

assign xor_ln232_13_fu_1778_p2 = (trunc_ln232_10_fu_1620_p1 ^ trunc_ln229_s_fu_1162_p7);

assign xor_ln232_14_fu_1784_p2 = (trunc_ln232_9_fu_1616_p1 ^ tmp_13_fu_1596_p9);

assign xor_ln232_15_fu_1790_p2 = (trunc_ln232_8_fu_1582_p1 ^ tmp_12_fu_1564_p8);

assign xor_ln232_16_fu_1796_p2 = (trunc_ln232_7_fu_1560_p1 ^ trunc_ln229_8_fu_1144_p8);

assign xor_ln232_17_fu_1802_p2 = (trunc_ln232_6_fu_1556_p1 ^ tmp_11_fu_1534_p10);

assign xor_ln232_18_fu_1808_p2 = (trunc_ln232_5_fu_1520_p1 ^ tmp_10_fu_1500_p9);

assign xor_ln232_19_fu_1814_p2 = (trunc_ln232_4_fu_1496_p1 ^ tmp_s_fu_1476_p9);

assign xor_ln232_1_fu_1706_p2 = (trunc_ln232_22_fu_1696_p1 ^ trunc_ln229_14_fu_1348_p4);

assign xor_ln232_20_fu_1820_p2 = (trunc_ln232_3_fu_1472_p1 ^ tmp_9_fu_1448_p11);

assign xor_ln232_21_fu_1826_p2 = (trunc_ln232_2_fu_1444_p1 ^ tmp_8_fu_1422_p10);

assign xor_ln232_2_fu_1712_p2 = (trunc_ln232_21_fu_1692_p1 ^ trunc_ln229_13_fu_1326_p5);

assign xor_ln232_3_fu_1718_p2 = (trunc_ln232_20_fu_1688_p1 ^ trunc_ln229_12_fu_1306_p4);

assign xor_ln232_4_fu_1724_p2 = (trunc_ln232_19_fu_1684_p1 ^ trunc_ln229_11_fu_1296_p4);

assign xor_ln232_5_fu_1730_p2 = (trunc_ln232_18_fu_1680_p1 ^ trunc_ln229_10_fu_1282_p6);

assign xor_ln232_6_fu_1736_p2 = (trunc_ln232_17_fu_1676_p1 ^ trunc_ln229_9_fu_1260_p5);

assign xor_ln232_7_fu_1742_p2 = (trunc_ln232_16_fu_1672_p1 ^ trunc_ln229_7_fu_1248_p5);

assign xor_ln232_8_fu_1748_p2 = (trunc_ln232_15_fu_1668_p1 ^ trunc_ln229_5_fu_1232_p7);

assign xor_ln232_9_fu_1754_p2 = (trunc_ln232_14_fu_1664_p1 ^ trunc_ln229_4_fu_1208_p6);

assign xor_ln240_fu_2243_p2 = (trunc_ln232_1_fu_1418_p1 ^ trunc_ln229_6_fu_1096_p3);

assign xor_ln241_fu_2249_p2 = (trunc_ln240_fu_2239_p1 ^ tmp_6_fu_1024_p3);

assign zext_ln174_1_fu_659_p1 = i_0_reg_520;

assign zext_ln174_fu_688_p1 = sub_ln174_fu_682_p2;

assign zext_ln184_1_fu_720_p1 = i_1_reg_542;

assign zext_ln184_2_fu_753_p1 = PC1_q0;

assign zext_ln184_fu_763_p1 = sub_ln184_fu_757_p2;

assign zext_ln214_fu_941_p1 = i_2_reg_553;

assign zext_ln218_1_fu_981_p1 = sub_ln218_fu_975_p2;

assign zext_ln218_fu_966_p1 = j_0_reg_576;

assign zext_ln232_fu_1019_p1 = sub_ln232_fu_1013_p2;

assign zext_ln246_11_cast_fu_2161_p3 = {{3'd0}, {zext_ln246_6_fu_2157_p1}};

assign zext_ln246_13_cast_fu_2220_p3 = {{3'd0}, {zext_ln246_7_fu_2216_p1}};

assign zext_ln246_15_cast_fu_2287_p3 = {{3'd0}, {zext_ln246_8_fu_2283_p1}};

assign zext_ln246_1_fu_1880_p1 = add_ln_fu_1872_p3;

assign zext_ln246_2_fu_1921_p1 = or_ln246_1_fu_1911_p4;

assign zext_ln246_3_cast_fu_1925_p3 = {{3'd0}, {zext_ln246_2_fu_1921_p1}};

assign zext_ln246_3_fu_1980_p1 = or_ln246_2_fu_1970_p4;

assign zext_ln246_4_fu_2039_p1 = or_ln246_3_fu_2029_p4;

assign zext_ln246_5_cast_fu_1984_p3 = {{3'd0}, {zext_ln246_3_fu_1980_p1}};

assign zext_ln246_5_fu_2098_p1 = or_ln246_4_fu_2088_p4;

assign zext_ln246_6_fu_2157_p1 = or_ln246_5_fu_2147_p4;

assign zext_ln246_7_cast_fu_2043_p3 = {{3'd0}, {zext_ln246_4_fu_2039_p1}};

assign zext_ln246_7_fu_2216_p1 = or_ln246_6_fu_2206_p4;

assign zext_ln246_8_fu_2283_p1 = or_ln246_7_fu_2273_p4;

assign zext_ln246_9_cast_fu_2102_p3 = {{3'd0}, {zext_ln246_5_fu_2098_p1}};

assign zext_ln246_fu_1868_p1 = or_ln_fu_1858_p4;

assign zext_ln270_1_fu_2624_p1 = i_4_reg_619;

assign zext_ln270_fu_2639_p1 = sub_ln270_fu_2633_p2;

endmodule //des_dec

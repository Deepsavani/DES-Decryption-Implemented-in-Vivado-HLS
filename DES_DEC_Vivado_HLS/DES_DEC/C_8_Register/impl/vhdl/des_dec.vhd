-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity des_dec is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r : IN STD_LOGIC_VECTOR (63 downto 0);
    key : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of des_dec is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "des_dec,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35tl-cpg236-2L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.689625,HLS_SYN_LAT=6629,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=2285,HLS_SYN_LUT=3830,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (21 downto 0) := "0000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (21 downto 0) := "0000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (21 downto 0) := "0000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (21 downto 0) := "0000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (21 downto 0) := "0000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (21 downto 0) := "0000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (21 downto 0) := "0001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (21 downto 0) := "0010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (21 downto 0) := "0100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (21 downto 0) := "1000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv6_38 : STD_LOGIC_VECTOR (5 downto 0) := "111000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_2A : STD_LOGIC_VECTOR (5 downto 0) := "101010";
    constant ap_const_lv6_2B : STD_LOGIC_VECTOR (5 downto 0) := "101011";
    constant ap_const_lv48_840000000000 : STD_LOGIC_VECTOR (47 downto 0) := "100001000000000000000000000000000000000000000000";
    constant ap_const_lv47_780000000000 : STD_LOGIC_VECTOR (46 downto 0) := "11110000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal IP_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal IP_ce0 : STD_LOGIC;
    signal IP_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal PC1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal PC1_ce0 : STD_LOGIC;
    signal PC1_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal PC2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal PC2_ce0 : STD_LOGIC;
    signal PC2_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal E_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal E_ce0 : STD_LOGIC;
    signal E_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal S_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal S_ce0 : STD_LOGIC;
    signal S_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal P_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal P_ce0 : STD_LOGIC;
    signal P_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal PI_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal PI_ce0 : STD_LOGIC;
    signal PI_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_fu_613_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_2231 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln171_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln174_1_fu_624_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln174_1_reg_2241 : STD_LOGIC_VECTOR (62 downto 0);
    signal L_reg_2246 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_fu_638_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_reg_2251 : STD_LOGIC_VECTOR (31 downto 0);
    signal init_perm_res_fu_661_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_5_fu_674_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_5_reg_2264 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln182_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln184_1_fu_685_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln184_1_reg_2274 : STD_LOGIC_VECTOR (62 downto 0);
    signal permuted_choice_1_fu_736_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_7_fu_749_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_7_reg_2415 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal trunc_ln214_fu_901_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln214_reg_2423 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln192_fu_743_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_910_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_9_reg_2451 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal j_fu_1596_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_2459 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln216_fu_1590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_key_0_fu_1667_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_key_0_reg_2469 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_8_fu_1745_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_8_reg_2492 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal pre_output_fu_1751_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal pre_output_reg_2497 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln223_fu_1739_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_6_fu_1765_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_6_reg_2505 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal icmp_ln227_fu_1759_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln229_1_fu_1776_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln229_1_reg_2515 : STD_LOGIC_VECTOR (62 downto 0);
    signal xor_ln232_1_fu_1844_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal xor_ln232_1_reg_2520 : STD_LOGIC_VECTOR (46 downto 0);
    signal xor_ln232_2_fu_1850_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal xor_ln232_2_reg_2525 : STD_LOGIC_VECTOR (47 downto 0);
    signal s_input_fu_1876_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal j_7_fu_1889_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_7_reg_2538 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal sub_ln240_fu_1925_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln240_reg_2543 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln235_fu_1883_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln240_2_fu_1949_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln240_2_reg_2548 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln243_1_fu_1961_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln243_1_reg_2553 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln246_1_fu_2090_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln246_1_reg_2558 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal j_8_fu_2123_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_8_reg_2571 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal icmp_ln252_fu_2117_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln254_1_fu_2134_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln254_1_reg_2581 : STD_LOGIC_VECTOR (30 downto 0);
    signal R_1_fu_2138_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_function_res_fu_2164_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal i_6_fu_2177_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_6_reg_2599 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal icmp_ln267_fu_2171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln270_1_fu_2188_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln270_1_reg_2609 : STD_LOGIC_VECTOR (62 downto 0);
    signal inv_init_perm_res_fu_2211_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal init_perm_res_0_reg_373 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_0_reg_384 : STD_LOGIC_VECTOR (6 downto 0);
    signal permuted_choice_1_0_reg_395 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_reg_406 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_2_reg_417 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_0_reg_428 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal temp_reg_439 : STD_LOGIC_VECTOR (31 downto 0);
    signal L_0_reg_449 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_reg_460 : STD_LOGIC_VECTOR (4 downto 0);
    signal s_input_0_reg_472 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_reg_483 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_2_reg_494 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal f_function_res_0_reg_506 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_3_reg_517 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_4_reg_528 : STD_LOGIC_VECTOR (6 downto 0);
    signal inv_init_perm_res_0_reg_539 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln174_1_fu_619_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln184_1_fu_680_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln218_fu_1602_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln229_fu_1771_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln246_3_fu_2096_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln254_fu_2129_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln270_1_fu_2183_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal C_1_fu_194 : STD_LOGIC_VECTOR (27 downto 0);
    signal C_2_fu_811_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal empty_17_fu_791_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal C_3_fu_863_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal D_fu_198 : STD_LOGIC_VECTOR (27 downto 0);
    signal D_1_fu_699_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal D_2_fu_833_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal D_3_fu_883_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal sub_key_15_fu_202 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_key_0_21_ph_fu_918_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal sub_key_15_1_fu_206 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_key_1_2_ph_fu_955_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_key_15_2_fu_210 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_key_2_2_ph_fu_992_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_key_15_3_fu_214 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_key_3_2_ph_fu_1029_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_key_15_4_fu_218 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_key_4_2_ph_fu_1066_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_key_15_5_fu_222 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_key_5_2_ph_fu_1103_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_key_15_6_fu_226 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_key_6_2_ph_fu_1140_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_key_15_7_fu_230 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_key_7_2_ph_fu_1177_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_key_15_8_fu_234 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_key_8_2_ph_fu_1214_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_key_15_9_fu_238 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_key_9_2_ph_fu_1251_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_key_15_10_fu_242 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_key_10_2_ph_fu_1288_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_key_15_11_fu_246 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_key_11_2_ph_fu_1325_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_key_15_12_fu_250 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_key_12_2_ph_fu_1362_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_key_15_13_fu_254 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_key_13_2_ph_fu_1399_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_key_15_14_fu_258 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_key_14_2_ph_fu_1436_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_key_15_15_fu_262 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_key_15_2_ph_fu_1473_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_output_1_fu_266 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_output_fu_2104_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln174_fu_642_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln174_fu_648_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln174_fu_652_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln174_fu_657_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln184_2_fu_713_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln184_fu_717_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln184_fu_723_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln184_fu_727_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln184_fu_732_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_12_fu_761_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_11_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_14_fu_773_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_13_fu_767_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_16_fu_785_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_15_fu_779_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln203_fu_797_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_3_fu_801_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln204_fu_819_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_s_fu_823_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln197_fu_859_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_2_fu_851_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln198_fu_879_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_4_fu_871_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln218_fu_1644_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln218_1_fu_1650_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal lshr_ln218_fu_1654_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_6_fu_1607_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln218_1_fu_1663_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln218_fu_1659_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln232_fu_1780_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_1790_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_1790_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln232_4_fu_1840_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal trunc_ln232_3_fu_1836_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal trunc_ln232_2_fu_1832_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln232_1_fu_1828_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal sub_ln229_fu_1856_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln229_1_fu_1862_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln229_fu_1866_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln229_fu_1872_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln240_fu_1895_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_1899_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln240_fu_1911_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln240_fu_1907_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln240_2_fu_1921_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln240_1_fu_1931_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln240_1_fu_1917_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln240_1_fu_1943_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln240_5_fu_1939_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln243_fu_1955_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln240_fu_1967_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln240_4_fu_1974_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal lshr_ln240_fu_1978_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal and_ln240_fu_1984_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln240_6_fu_1989_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal lshr_ln240_1_fu_1992_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_7_fu_2002_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln240_1_fu_1998_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln240_3_fu_1970_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal lshr_ln243_fu_2026_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal and_ln243_fu_2032_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal zext_ln243_fu_2037_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_8_fu_2016_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln241_fu_2010_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_2046_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln243_1_fu_2040_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal trunc_ln246_fu_2060_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln246_1_fu_2064_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln246_fu_2056_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln246_fu_2068_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_11_fu_2078_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln246_2_fu_2074_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln246_fu_2086_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln246_1_fu_2100_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sub_ln254_fu_2144_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln254_1_fu_2150_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln254_fu_2154_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln254_fu_2160_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln270_fu_2192_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln270_fu_2198_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln270_fu_2202_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln270_fu_2207_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (21 downto 0);

    component des_dec_mux_164_6bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (63 downto 0);
        din5 : IN STD_LOGIC_VECTOR (63 downto 0);
        din6 : IN STD_LOGIC_VECTOR (63 downto 0);
        din7 : IN STD_LOGIC_VECTOR (63 downto 0);
        din8 : IN STD_LOGIC_VECTOR (63 downto 0);
        din9 : IN STD_LOGIC_VECTOR (63 downto 0);
        din10 : IN STD_LOGIC_VECTOR (63 downto 0);
        din11 : IN STD_LOGIC_VECTOR (63 downto 0);
        din12 : IN STD_LOGIC_VECTOR (63 downto 0);
        din13 : IN STD_LOGIC_VECTOR (63 downto 0);
        din14 : IN STD_LOGIC_VECTOR (63 downto 0);
        din15 : IN STD_LOGIC_VECTOR (63 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component des_dec_IP IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component des_dec_PC1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component des_dec_PC2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component des_dec_E IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component des_dec_S IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component des_dec_P IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component des_dec_PI IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;



begin
    IP_U : component des_dec_IP
    generic map (
        DataWidth => 7,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => IP_address0,
        ce0 => IP_ce0,
        q0 => IP_q0);

    PC1_U : component des_dec_PC1
    generic map (
        DataWidth => 6,
        AddressRange => 56,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => PC1_address0,
        ce0 => PC1_ce0,
        q0 => PC1_q0);

    PC2_U : component des_dec_PC2
    generic map (
        DataWidth => 6,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => PC2_address0,
        ce0 => PC2_ce0,
        q0 => PC2_q0);

    E_U : component des_dec_E
    generic map (
        DataWidth => 6,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => E_address0,
        ce0 => E_ce0,
        q0 => E_q0);

    S_U : component des_dec_S
    generic map (
        DataWidth => 4,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => S_address0,
        ce0 => S_ce0,
        q0 => S_q0);

    P_U : component des_dec_P
    generic map (
        DataWidth => 6,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => P_address0,
        ce0 => P_ce0,
        q0 => P_q0);

    PI_U : component des_dec_PI
    generic map (
        DataWidth => 7,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => PI_address0,
        ce0 => PI_ce0,
        q0 => PI_q0);

    des_dec_mux_164_6bkb_U1 : component des_dec_mux_164_6bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => ap_const_lv64_0,
        din1 => sub_key_15_fu_202,
        din2 => sub_key_15_fu_202,
        din3 => sub_key_15_fu_202,
        din4 => sub_key_15_fu_202,
        din5 => sub_key_15_fu_202,
        din6 => sub_key_15_fu_202,
        din7 => sub_key_15_fu_202,
        din8 => sub_key_15_fu_202,
        din9 => sub_key_15_fu_202,
        din10 => sub_key_15_fu_202,
        din11 => sub_key_15_fu_202,
        din12 => sub_key_15_fu_202,
        din13 => sub_key_15_fu_202,
        din14 => sub_key_15_fu_202,
        din15 => sub_key_15_fu_202,
        din16 => trunc_ln214_reg_2423,
        dout => sub_key_0_21_ph_fu_918_p18);

    des_dec_mux_164_6bkb_U2 : component des_dec_mux_164_6bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => sub_key_15_1_fu_206,
        din1 => ap_const_lv64_0,
        din2 => sub_key_15_1_fu_206,
        din3 => sub_key_15_1_fu_206,
        din4 => sub_key_15_1_fu_206,
        din5 => sub_key_15_1_fu_206,
        din6 => sub_key_15_1_fu_206,
        din7 => sub_key_15_1_fu_206,
        din8 => sub_key_15_1_fu_206,
        din9 => sub_key_15_1_fu_206,
        din10 => sub_key_15_1_fu_206,
        din11 => sub_key_15_1_fu_206,
        din12 => sub_key_15_1_fu_206,
        din13 => sub_key_15_1_fu_206,
        din14 => sub_key_15_1_fu_206,
        din15 => sub_key_15_1_fu_206,
        din16 => trunc_ln214_reg_2423,
        dout => sub_key_1_2_ph_fu_955_p18);

    des_dec_mux_164_6bkb_U3 : component des_dec_mux_164_6bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => sub_key_15_2_fu_210,
        din1 => sub_key_15_2_fu_210,
        din2 => ap_const_lv64_0,
        din3 => sub_key_15_2_fu_210,
        din4 => sub_key_15_2_fu_210,
        din5 => sub_key_15_2_fu_210,
        din6 => sub_key_15_2_fu_210,
        din7 => sub_key_15_2_fu_210,
        din8 => sub_key_15_2_fu_210,
        din9 => sub_key_15_2_fu_210,
        din10 => sub_key_15_2_fu_210,
        din11 => sub_key_15_2_fu_210,
        din12 => sub_key_15_2_fu_210,
        din13 => sub_key_15_2_fu_210,
        din14 => sub_key_15_2_fu_210,
        din15 => sub_key_15_2_fu_210,
        din16 => trunc_ln214_reg_2423,
        dout => sub_key_2_2_ph_fu_992_p18);

    des_dec_mux_164_6bkb_U4 : component des_dec_mux_164_6bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => sub_key_15_3_fu_214,
        din1 => sub_key_15_3_fu_214,
        din2 => sub_key_15_3_fu_214,
        din3 => ap_const_lv64_0,
        din4 => sub_key_15_3_fu_214,
        din5 => sub_key_15_3_fu_214,
        din6 => sub_key_15_3_fu_214,
        din7 => sub_key_15_3_fu_214,
        din8 => sub_key_15_3_fu_214,
        din9 => sub_key_15_3_fu_214,
        din10 => sub_key_15_3_fu_214,
        din11 => sub_key_15_3_fu_214,
        din12 => sub_key_15_3_fu_214,
        din13 => sub_key_15_3_fu_214,
        din14 => sub_key_15_3_fu_214,
        din15 => sub_key_15_3_fu_214,
        din16 => trunc_ln214_reg_2423,
        dout => sub_key_3_2_ph_fu_1029_p18);

    des_dec_mux_164_6bkb_U5 : component des_dec_mux_164_6bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => sub_key_15_4_fu_218,
        din1 => sub_key_15_4_fu_218,
        din2 => sub_key_15_4_fu_218,
        din3 => sub_key_15_4_fu_218,
        din4 => ap_const_lv64_0,
        din5 => sub_key_15_4_fu_218,
        din6 => sub_key_15_4_fu_218,
        din7 => sub_key_15_4_fu_218,
        din8 => sub_key_15_4_fu_218,
        din9 => sub_key_15_4_fu_218,
        din10 => sub_key_15_4_fu_218,
        din11 => sub_key_15_4_fu_218,
        din12 => sub_key_15_4_fu_218,
        din13 => sub_key_15_4_fu_218,
        din14 => sub_key_15_4_fu_218,
        din15 => sub_key_15_4_fu_218,
        din16 => trunc_ln214_reg_2423,
        dout => sub_key_4_2_ph_fu_1066_p18);

    des_dec_mux_164_6bkb_U6 : component des_dec_mux_164_6bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => sub_key_15_5_fu_222,
        din1 => sub_key_15_5_fu_222,
        din2 => sub_key_15_5_fu_222,
        din3 => sub_key_15_5_fu_222,
        din4 => sub_key_15_5_fu_222,
        din5 => ap_const_lv64_0,
        din6 => sub_key_15_5_fu_222,
        din7 => sub_key_15_5_fu_222,
        din8 => sub_key_15_5_fu_222,
        din9 => sub_key_15_5_fu_222,
        din10 => sub_key_15_5_fu_222,
        din11 => sub_key_15_5_fu_222,
        din12 => sub_key_15_5_fu_222,
        din13 => sub_key_15_5_fu_222,
        din14 => sub_key_15_5_fu_222,
        din15 => sub_key_15_5_fu_222,
        din16 => trunc_ln214_reg_2423,
        dout => sub_key_5_2_ph_fu_1103_p18);

    des_dec_mux_164_6bkb_U7 : component des_dec_mux_164_6bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => sub_key_15_6_fu_226,
        din1 => sub_key_15_6_fu_226,
        din2 => sub_key_15_6_fu_226,
        din3 => sub_key_15_6_fu_226,
        din4 => sub_key_15_6_fu_226,
        din5 => sub_key_15_6_fu_226,
        din6 => ap_const_lv64_0,
        din7 => sub_key_15_6_fu_226,
        din8 => sub_key_15_6_fu_226,
        din9 => sub_key_15_6_fu_226,
        din10 => sub_key_15_6_fu_226,
        din11 => sub_key_15_6_fu_226,
        din12 => sub_key_15_6_fu_226,
        din13 => sub_key_15_6_fu_226,
        din14 => sub_key_15_6_fu_226,
        din15 => sub_key_15_6_fu_226,
        din16 => trunc_ln214_reg_2423,
        dout => sub_key_6_2_ph_fu_1140_p18);

    des_dec_mux_164_6bkb_U8 : component des_dec_mux_164_6bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => sub_key_15_7_fu_230,
        din1 => sub_key_15_7_fu_230,
        din2 => sub_key_15_7_fu_230,
        din3 => sub_key_15_7_fu_230,
        din4 => sub_key_15_7_fu_230,
        din5 => sub_key_15_7_fu_230,
        din6 => sub_key_15_7_fu_230,
        din7 => ap_const_lv64_0,
        din8 => sub_key_15_7_fu_230,
        din9 => sub_key_15_7_fu_230,
        din10 => sub_key_15_7_fu_230,
        din11 => sub_key_15_7_fu_230,
        din12 => sub_key_15_7_fu_230,
        din13 => sub_key_15_7_fu_230,
        din14 => sub_key_15_7_fu_230,
        din15 => sub_key_15_7_fu_230,
        din16 => trunc_ln214_reg_2423,
        dout => sub_key_7_2_ph_fu_1177_p18);

    des_dec_mux_164_6bkb_U9 : component des_dec_mux_164_6bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => sub_key_15_8_fu_234,
        din1 => sub_key_15_8_fu_234,
        din2 => sub_key_15_8_fu_234,
        din3 => sub_key_15_8_fu_234,
        din4 => sub_key_15_8_fu_234,
        din5 => sub_key_15_8_fu_234,
        din6 => sub_key_15_8_fu_234,
        din7 => sub_key_15_8_fu_234,
        din8 => ap_const_lv64_0,
        din9 => sub_key_15_8_fu_234,
        din10 => sub_key_15_8_fu_234,
        din11 => sub_key_15_8_fu_234,
        din12 => sub_key_15_8_fu_234,
        din13 => sub_key_15_8_fu_234,
        din14 => sub_key_15_8_fu_234,
        din15 => sub_key_15_8_fu_234,
        din16 => trunc_ln214_reg_2423,
        dout => sub_key_8_2_ph_fu_1214_p18);

    des_dec_mux_164_6bkb_U10 : component des_dec_mux_164_6bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => sub_key_15_9_fu_238,
        din1 => sub_key_15_9_fu_238,
        din2 => sub_key_15_9_fu_238,
        din3 => sub_key_15_9_fu_238,
        din4 => sub_key_15_9_fu_238,
        din5 => sub_key_15_9_fu_238,
        din6 => sub_key_15_9_fu_238,
        din7 => sub_key_15_9_fu_238,
        din8 => sub_key_15_9_fu_238,
        din9 => ap_const_lv64_0,
        din10 => sub_key_15_9_fu_238,
        din11 => sub_key_15_9_fu_238,
        din12 => sub_key_15_9_fu_238,
        din13 => sub_key_15_9_fu_238,
        din14 => sub_key_15_9_fu_238,
        din15 => sub_key_15_9_fu_238,
        din16 => trunc_ln214_reg_2423,
        dout => sub_key_9_2_ph_fu_1251_p18);

    des_dec_mux_164_6bkb_U11 : component des_dec_mux_164_6bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => sub_key_15_10_fu_242,
        din1 => sub_key_15_10_fu_242,
        din2 => sub_key_15_10_fu_242,
        din3 => sub_key_15_10_fu_242,
        din4 => sub_key_15_10_fu_242,
        din5 => sub_key_15_10_fu_242,
        din6 => sub_key_15_10_fu_242,
        din7 => sub_key_15_10_fu_242,
        din8 => sub_key_15_10_fu_242,
        din9 => sub_key_15_10_fu_242,
        din10 => ap_const_lv64_0,
        din11 => sub_key_15_10_fu_242,
        din12 => sub_key_15_10_fu_242,
        din13 => sub_key_15_10_fu_242,
        din14 => sub_key_15_10_fu_242,
        din15 => sub_key_15_10_fu_242,
        din16 => trunc_ln214_reg_2423,
        dout => sub_key_10_2_ph_fu_1288_p18);

    des_dec_mux_164_6bkb_U12 : component des_dec_mux_164_6bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => sub_key_15_11_fu_246,
        din1 => sub_key_15_11_fu_246,
        din2 => sub_key_15_11_fu_246,
        din3 => sub_key_15_11_fu_246,
        din4 => sub_key_15_11_fu_246,
        din5 => sub_key_15_11_fu_246,
        din6 => sub_key_15_11_fu_246,
        din7 => sub_key_15_11_fu_246,
        din8 => sub_key_15_11_fu_246,
        din9 => sub_key_15_11_fu_246,
        din10 => sub_key_15_11_fu_246,
        din11 => ap_const_lv64_0,
        din12 => sub_key_15_11_fu_246,
        din13 => sub_key_15_11_fu_246,
        din14 => sub_key_15_11_fu_246,
        din15 => sub_key_15_11_fu_246,
        din16 => trunc_ln214_reg_2423,
        dout => sub_key_11_2_ph_fu_1325_p18);

    des_dec_mux_164_6bkb_U13 : component des_dec_mux_164_6bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => sub_key_15_12_fu_250,
        din1 => sub_key_15_12_fu_250,
        din2 => sub_key_15_12_fu_250,
        din3 => sub_key_15_12_fu_250,
        din4 => sub_key_15_12_fu_250,
        din5 => sub_key_15_12_fu_250,
        din6 => sub_key_15_12_fu_250,
        din7 => sub_key_15_12_fu_250,
        din8 => sub_key_15_12_fu_250,
        din9 => sub_key_15_12_fu_250,
        din10 => sub_key_15_12_fu_250,
        din11 => sub_key_15_12_fu_250,
        din12 => ap_const_lv64_0,
        din13 => sub_key_15_12_fu_250,
        din14 => sub_key_15_12_fu_250,
        din15 => sub_key_15_12_fu_250,
        din16 => trunc_ln214_reg_2423,
        dout => sub_key_12_2_ph_fu_1362_p18);

    des_dec_mux_164_6bkb_U14 : component des_dec_mux_164_6bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => sub_key_15_13_fu_254,
        din1 => sub_key_15_13_fu_254,
        din2 => sub_key_15_13_fu_254,
        din3 => sub_key_15_13_fu_254,
        din4 => sub_key_15_13_fu_254,
        din5 => sub_key_15_13_fu_254,
        din6 => sub_key_15_13_fu_254,
        din7 => sub_key_15_13_fu_254,
        din8 => sub_key_15_13_fu_254,
        din9 => sub_key_15_13_fu_254,
        din10 => sub_key_15_13_fu_254,
        din11 => sub_key_15_13_fu_254,
        din12 => sub_key_15_13_fu_254,
        din13 => ap_const_lv64_0,
        din14 => sub_key_15_13_fu_254,
        din15 => sub_key_15_13_fu_254,
        din16 => trunc_ln214_reg_2423,
        dout => sub_key_13_2_ph_fu_1399_p18);

    des_dec_mux_164_6bkb_U15 : component des_dec_mux_164_6bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => sub_key_15_14_fu_258,
        din1 => sub_key_15_14_fu_258,
        din2 => sub_key_15_14_fu_258,
        din3 => sub_key_15_14_fu_258,
        din4 => sub_key_15_14_fu_258,
        din5 => sub_key_15_14_fu_258,
        din6 => sub_key_15_14_fu_258,
        din7 => sub_key_15_14_fu_258,
        din8 => sub_key_15_14_fu_258,
        din9 => sub_key_15_14_fu_258,
        din10 => sub_key_15_14_fu_258,
        din11 => sub_key_15_14_fu_258,
        din12 => sub_key_15_14_fu_258,
        din13 => sub_key_15_14_fu_258,
        din14 => ap_const_lv64_0,
        din15 => sub_key_15_14_fu_258,
        din16 => trunc_ln214_reg_2423,
        dout => sub_key_14_2_ph_fu_1436_p18);

    des_dec_mux_164_6bkb_U16 : component des_dec_mux_164_6bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => sub_key_15_15_fu_262,
        din1 => sub_key_15_15_fu_262,
        din2 => sub_key_15_15_fu_262,
        din3 => sub_key_15_15_fu_262,
        din4 => sub_key_15_15_fu_262,
        din5 => sub_key_15_15_fu_262,
        din6 => sub_key_15_15_fu_262,
        din7 => sub_key_15_15_fu_262,
        din8 => sub_key_15_15_fu_262,
        din9 => sub_key_15_15_fu_262,
        din10 => sub_key_15_15_fu_262,
        din11 => sub_key_15_15_fu_262,
        din12 => sub_key_15_15_fu_262,
        din13 => sub_key_15_15_fu_262,
        din14 => sub_key_15_15_fu_262,
        din15 => ap_const_lv64_0,
        din16 => trunc_ln214_reg_2423,
        dout => sub_key_15_2_ph_fu_1473_p18);

    des_dec_mux_164_6bkb_U17 : component des_dec_mux_164_6bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => sub_key_15_fu_202,
        din1 => sub_key_15_1_fu_206,
        din2 => sub_key_15_2_fu_210,
        din3 => sub_key_15_3_fu_214,
        din4 => sub_key_15_4_fu_218,
        din5 => sub_key_15_5_fu_222,
        din6 => sub_key_15_6_fu_226,
        din7 => sub_key_15_7_fu_230,
        din8 => sub_key_15_8_fu_234,
        din9 => sub_key_15_9_fu_238,
        din10 => sub_key_15_10_fu_242,
        din11 => sub_key_15_11_fu_246,
        din12 => sub_key_15_12_fu_250,
        din13 => sub_key_15_13_fu_254,
        din14 => sub_key_15_14_fu_258,
        din15 => sub_key_15_15_fu_262,
        din16 => trunc_ln214_reg_2423,
        dout => tmp_6_fu_1607_p18);

    des_dec_mux_164_6bkb_U18 : component des_dec_mux_164_6bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => sub_key_15_fu_202,
        din1 => sub_key_15_1_fu_206,
        din2 => sub_key_15_2_fu_210,
        din3 => sub_key_15_3_fu_214,
        din4 => sub_key_15_4_fu_218,
        din5 => sub_key_15_5_fu_222,
        din6 => sub_key_15_6_fu_226,
        din7 => sub_key_15_7_fu_230,
        din8 => sub_key_15_8_fu_234,
        din9 => sub_key_15_9_fu_238,
        din10 => sub_key_15_10_fu_242,
        din11 => sub_key_15_11_fu_246,
        din12 => sub_key_15_12_fu_250,
        din13 => sub_key_15_13_fu_254,
        din14 => sub_key_15_14_fu_258,
        din15 => sub_key_15_15_fu_262,
        din16 => tmp_5_fu_1790_p17,
        dout => tmp_5_fu_1790_p18);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    C_1_fu_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (empty_17_fu_791_p2 = ap_const_lv1_1) and (icmp_ln192_fu_743_p2 = ap_const_lv1_0))) then 
                C_1_fu_194 <= C_3_fu_863_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (empty_17_fu_791_p2 = ap_const_lv1_0) and (icmp_ln192_fu_743_p2 = ap_const_lv1_0))) then 
                C_1_fu_194 <= C_2_fu_811_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln182_fu_668_p2 = ap_const_lv1_1))) then 
                C_1_fu_194 <= permuted_choice_1_0_reg_395(55 downto 28);
            end if; 
        end if;
    end process;

    D_fu_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (empty_17_fu_791_p2 = ap_const_lv1_1) and (icmp_ln192_fu_743_p2 = ap_const_lv1_0))) then 
                D_fu_198 <= D_3_fu_883_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (empty_17_fu_791_p2 = ap_const_lv1_0) and (icmp_ln192_fu_743_p2 = ap_const_lv1_0))) then 
                D_fu_198 <= D_2_fu_833_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln182_fu_668_p2 = ap_const_lv1_1))) then 
                D_fu_198 <= D_1_fu_699_p1;
            end if; 
        end if;
    end process;

    L_0_reg_449_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln192_fu_743_p2 = ap_const_lv1_1))) then 
                L_0_reg_449 <= L_reg_2246;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln252_fu_2117_p2 = ap_const_lv1_1))) then 
                L_0_reg_449 <= temp_reg_439;
            end if; 
        end if;
    end process;

    f_function_res_0_reg_506_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln235_fu_1883_p2 = ap_const_lv1_1))) then 
                f_function_res_0_reg_506 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                f_function_res_0_reg_506 <= f_function_res_fu_2164_p3;
            end if; 
        end if;
    end process;

    i_0_reg_384_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_384 <= i_reg_2231;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_384 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i_1_reg_406_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_1_reg_406 <= i_5_reg_2264;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln171_fu_607_p2 = ap_const_lv1_1))) then 
                i_1_reg_406 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_2_reg_417_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln216_fu_1590_p2 = ap_const_lv1_1))) then 
                i_2_reg_417 <= i_7_reg_2415;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln182_fu_668_p2 = ap_const_lv1_1))) then 
                i_2_reg_417 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_3_reg_460_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln192_fu_743_p2 = ap_const_lv1_1))) then 
                i_3_reg_460 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln252_fu_2117_p2 = ap_const_lv1_1))) then 
                i_3_reg_460 <= i_8_reg_2492;
            end if; 
        end if;
    end process;

    i_4_reg_528_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                i_4_reg_528 <= i_6_reg_2599;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln223_fu_1739_p2 = ap_const_lv1_1))) then 
                i_4_reg_528 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    init_perm_res_0_reg_373_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                init_perm_res_0_reg_373 <= init_perm_res_fu_661_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                init_perm_res_0_reg_373 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    inv_init_perm_res_0_reg_539_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                inv_init_perm_res_0_reg_539 <= inv_init_perm_res_fu_2211_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln223_fu_1739_p2 = ap_const_lv1_1))) then 
                inv_init_perm_res_0_reg_539 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    j_0_reg_428_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                j_0_reg_428 <= j_reg_2459;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j_0_reg_428 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_1_reg_483_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                j_1_reg_483 <= j_6_reg_2505;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln223_fu_1739_p2 = ap_const_lv1_0))) then 
                j_1_reg_483 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_2_reg_494_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                j_2_reg_494 <= j_7_reg_2538;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln227_fu_1759_p2 = ap_const_lv1_1))) then 
                j_2_reg_494 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_3_reg_517_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln235_fu_1883_p2 = ap_const_lv1_1))) then 
                j_3_reg_517 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                j_3_reg_517 <= j_8_reg_2571;
            end if; 
        end if;
    end process;

    permuted_choice_1_0_reg_395_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                permuted_choice_1_0_reg_395 <= permuted_choice_1_fu_736_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln171_fu_607_p2 = ap_const_lv1_1))) then 
                permuted_choice_1_0_reg_395 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_input_0_reg_472_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                s_input_0_reg_472 <= s_input_fu_1876_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln223_fu_1739_p2 = ap_const_lv1_0))) then 
                s_input_0_reg_472 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_output_1_fu_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                s_output_1_fu_266 <= s_output_fu_2104_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln192_fu_743_p2 = ap_const_lv1_1))) then 
                s_output_1_fu_266 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sub_key_15_10_fu_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (trunc_ln214_reg_2423 = ap_const_lv4_A))) then 
                sub_key_15_10_fu_242 <= sub_key_0_reg_2469;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                sub_key_15_10_fu_242 <= sub_key_10_2_ph_fu_1288_p18;
            end if; 
        end if;
    end process;

    sub_key_15_11_fu_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (trunc_ln214_reg_2423 = ap_const_lv4_B))) then 
                sub_key_15_11_fu_246 <= sub_key_0_reg_2469;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                sub_key_15_11_fu_246 <= sub_key_11_2_ph_fu_1325_p18;
            end if; 
        end if;
    end process;

    sub_key_15_12_fu_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (trunc_ln214_reg_2423 = ap_const_lv4_C))) then 
                sub_key_15_12_fu_250 <= sub_key_0_reg_2469;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                sub_key_15_12_fu_250 <= sub_key_12_2_ph_fu_1362_p18;
            end if; 
        end if;
    end process;

    sub_key_15_13_fu_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (trunc_ln214_reg_2423 = ap_const_lv4_D))) then 
                sub_key_15_13_fu_254 <= sub_key_0_reg_2469;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                sub_key_15_13_fu_254 <= sub_key_13_2_ph_fu_1399_p18;
            end if; 
        end if;
    end process;

    sub_key_15_14_fu_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (trunc_ln214_reg_2423 = ap_const_lv4_E))) then 
                sub_key_15_14_fu_258 <= sub_key_0_reg_2469;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                sub_key_15_14_fu_258 <= sub_key_14_2_ph_fu_1436_p18;
            end if; 
        end if;
    end process;

    sub_key_15_15_fu_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (trunc_ln214_reg_2423 = ap_const_lv4_F))) then 
                sub_key_15_15_fu_262 <= sub_key_0_reg_2469;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                sub_key_15_15_fu_262 <= sub_key_15_2_ph_fu_1473_p18;
            end if; 
        end if;
    end process;

    sub_key_15_1_fu_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (trunc_ln214_reg_2423 = ap_const_lv4_1))) then 
                sub_key_15_1_fu_206 <= sub_key_0_reg_2469;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                sub_key_15_1_fu_206 <= sub_key_1_2_ph_fu_955_p18;
            end if; 
        end if;
    end process;

    sub_key_15_2_fu_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (trunc_ln214_reg_2423 = ap_const_lv4_2))) then 
                sub_key_15_2_fu_210 <= sub_key_0_reg_2469;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                sub_key_15_2_fu_210 <= sub_key_2_2_ph_fu_992_p18;
            end if; 
        end if;
    end process;

    sub_key_15_3_fu_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (trunc_ln214_reg_2423 = ap_const_lv4_3))) then 
                sub_key_15_3_fu_214 <= sub_key_0_reg_2469;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                sub_key_15_3_fu_214 <= sub_key_3_2_ph_fu_1029_p18;
            end if; 
        end if;
    end process;

    sub_key_15_4_fu_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (trunc_ln214_reg_2423 = ap_const_lv4_4))) then 
                sub_key_15_4_fu_218 <= sub_key_0_reg_2469;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                sub_key_15_4_fu_218 <= sub_key_4_2_ph_fu_1066_p18;
            end if; 
        end if;
    end process;

    sub_key_15_5_fu_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (trunc_ln214_reg_2423 = ap_const_lv4_5))) then 
                sub_key_15_5_fu_222 <= sub_key_0_reg_2469;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                sub_key_15_5_fu_222 <= sub_key_5_2_ph_fu_1103_p18;
            end if; 
        end if;
    end process;

    sub_key_15_6_fu_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (trunc_ln214_reg_2423 = ap_const_lv4_6))) then 
                sub_key_15_6_fu_226 <= sub_key_0_reg_2469;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                sub_key_15_6_fu_226 <= sub_key_6_2_ph_fu_1140_p18;
            end if; 
        end if;
    end process;

    sub_key_15_7_fu_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (trunc_ln214_reg_2423 = ap_const_lv4_7))) then 
                sub_key_15_7_fu_230 <= sub_key_0_reg_2469;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                sub_key_15_7_fu_230 <= sub_key_7_2_ph_fu_1177_p18;
            end if; 
        end if;
    end process;

    sub_key_15_8_fu_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (trunc_ln214_reg_2423 = ap_const_lv4_8))) then 
                sub_key_15_8_fu_234 <= sub_key_0_reg_2469;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                sub_key_15_8_fu_234 <= sub_key_8_2_ph_fu_1214_p18;
            end if; 
        end if;
    end process;

    sub_key_15_9_fu_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (trunc_ln214_reg_2423 = ap_const_lv4_9))) then 
                sub_key_15_9_fu_238 <= sub_key_0_reg_2469;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                sub_key_15_9_fu_238 <= sub_key_9_2_ph_fu_1251_p18;
            end if; 
        end if;
    end process;

    sub_key_15_fu_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (trunc_ln214_reg_2423 = ap_const_lv4_0))) then 
                sub_key_15_fu_202 <= sub_key_0_reg_2469;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                sub_key_15_fu_202 <= sub_key_0_21_ph_fu_918_p18;
            end if; 
        end if;
    end process;

    temp_reg_439_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln192_fu_743_p2 = ap_const_lv1_1))) then 
                temp_reg_439 <= R_reg_2251;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln252_fu_2117_p2 = ap_const_lv1_1))) then 
                temp_reg_439 <= R_1_fu_2138_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln171_fu_607_p2 = ap_const_lv1_1))) then
                L_reg_2246 <= init_perm_res_0_reg_373(63 downto 32);
                R_reg_2251 <= R_fu_638_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                add_ln246_1_reg_2558 <= add_ln246_1_fu_2090_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_5_reg_2264 <= i_5_fu_674_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                i_6_reg_2599 <= i_6_fu_2177_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_7_reg_2415 <= i_7_fu_749_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                i_8_reg_2492 <= i_8_fu_1745_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_2231 <= i_fu_613_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                j_6_reg_2505 <= j_6_fu_1765_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                j_7_reg_2538 <= j_7_fu_1889_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                j_8_reg_2571 <= j_8_fu_2123_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                j_reg_2459 <= j_fu_1596_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln223_fu_1739_p2 = ap_const_lv1_1))) then
                pre_output_reg_2497 <= pre_output_fu_1751_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                sub_key_0_reg_2469 <= sub_key_0_fu_1667_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln235_fu_1883_p2 = ap_const_lv1_0))) then
                    sub_ln240_2_reg_2548(5 downto 1) <= sub_ln240_2_fu_1949_p2(5 downto 1);
                    sub_ln240_reg_2543(6 downto 1) <= sub_ln240_fu_1925_p2(6 downto 1);
                    sub_ln243_1_reg_2553(5 downto 1) <= sub_ln243_1_fu_1961_p2(5 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_9_reg_2451 <= tmp_9_fu_910_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln171_fu_607_p2 = ap_const_lv1_0))) then
                trunc_ln174_1_reg_2241 <= trunc_ln174_1_fu_624_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln182_fu_668_p2 = ap_const_lv1_0))) then
                trunc_ln184_1_reg_2274 <= trunc_ln184_1_fu_685_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln192_fu_743_p2 = ap_const_lv1_0))) then
                trunc_ln214_reg_2423 <= trunc_ln214_fu_901_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln227_fu_1759_p2 = ap_const_lv1_0))) then
                trunc_ln229_1_reg_2515 <= trunc_ln229_1_fu_1776_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln252_fu_2117_p2 = ap_const_lv1_0))) then
                trunc_ln254_1_reg_2581 <= trunc_ln254_1_fu_2134_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln267_fu_2171_p2 = ap_const_lv1_0))) then
                trunc_ln270_1_reg_2609 <= trunc_ln270_1_fu_2188_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln227_fu_1759_p2 = ap_const_lv1_1))) then
                xor_ln232_1_reg_2520 <= xor_ln232_1_fu_1844_p2;
                xor_ln232_2_reg_2525 <= xor_ln232_2_fu_1850_p2;
            end if;
        end if;
    end process;
    sub_ln240_reg_2543(0) <= '0';
    sub_ln240_2_reg_2548(0) <= '0';
    sub_ln243_1_reg_2553(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln171_fu_607_p2, ap_CS_fsm_state4, icmp_ln182_fu_668_p2, ap_CS_fsm_state6, icmp_ln192_fu_743_p2, ap_CS_fsm_state8, icmp_ln216_fu_1590_p2, ap_CS_fsm_state12, icmp_ln223_fu_1739_p2, ap_CS_fsm_state13, icmp_ln227_fu_1759_p2, ap_CS_fsm_state15, icmp_ln235_fu_1883_p2, ap_CS_fsm_state19, icmp_ln252_fu_2117_p2, ap_CS_fsm_state21, icmp_ln267_fu_2171_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln171_fu_607_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln182_fu_668_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln192_fu_743_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln216_fu_1590_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln223_fu_1739_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln227_fu_1759_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln235_fu_1883_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln252_fu_2117_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln267_fu_2171_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    C_2_fu_811_p3 <= (trunc_ln203_fu_797_p1 & tmp_3_fu_801_p4);
    C_3_fu_863_p3 <= (trunc_ln197_fu_859_p1 & tmp_2_fu_851_p3);
    D_1_fu_699_p1 <= permuted_choice_1_0_reg_395(28 - 1 downto 0);
    D_2_fu_833_p3 <= (trunc_ln204_fu_819_p1 & tmp_s_fu_823_p4);
    D_3_fu_883_p3 <= (trunc_ln198_fu_879_p1 & tmp_4_fu_871_p3);
    E_address0 <= zext_ln229_fu_1771_p1(6 - 1 downto 0);

    E_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            E_ce0 <= ap_const_logic_1;
        else 
            E_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    IP_address0 <= zext_ln174_1_fu_619_p1(6 - 1 downto 0);

    IP_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            IP_ce0 <= ap_const_logic_1;
        else 
            IP_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    PC1_address0 <= zext_ln184_1_fu_680_p1(6 - 1 downto 0);

    PC1_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            PC1_ce0 <= ap_const_logic_1;
        else 
            PC1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    PC2_address0 <= zext_ln218_fu_1602_p1(6 - 1 downto 0);

    PC2_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            PC2_ce0 <= ap_const_logic_1;
        else 
            PC2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    PI_address0 <= zext_ln270_1_fu_2183_p1(6 - 1 downto 0);

    PI_ce0_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            PI_ce0 <= ap_const_logic_1;
        else 
            PI_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    P_address0 <= zext_ln254_fu_2129_p1(5 - 1 downto 0);

    P_ce0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            P_ce0 <= ap_const_logic_1;
        else 
            P_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    R_1_fu_2138_p2 <= (f_function_res_0_reg_506 xor L_0_reg_449);
    R_fu_638_p1 <= init_perm_res_0_reg_373(32 - 1 downto 0);
    S_address0 <= sext_ln246_3_fu_2096_p1(9 - 1 downto 0);

    S_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            S_ce0 <= ap_const_logic_1;
        else 
            S_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln246_1_fu_2090_p2 <= std_logic_vector(signed(sext_ln246_2_fu_2074_p1) + signed(zext_ln246_fu_2086_p1));
    add_ln246_fu_2068_p2 <= std_logic_vector(signed(sext_ln246_1_fu_2064_p1) + signed(sext_ln246_fu_2056_p1));
    and_ln240_fu_1984_p2 <= (xor_ln232_2_reg_2525 and lshr_ln240_fu_1978_p2);
    and_ln243_fu_2032_p2 <= (xor_ln232_1_reg_2520 and lshr_ln243_fu_2026_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state21, icmp_ln267_fu_2171_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln267_fu_2171_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state21, icmp_ln267_fu_2171_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln267_fu_2171_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= inv_init_perm_res_0_reg_539;
    empty_11_fu_755_p2 <= "1" when (i_2_reg_417 = ap_const_lv5_F) else "0";
    empty_12_fu_761_p2 <= "1" when (i_2_reg_417 = ap_const_lv5_8) else "0";
    empty_13_fu_767_p2 <= (empty_12_fu_761_p2 or empty_11_fu_755_p2);
    empty_14_fu_773_p2 <= "1" when (i_2_reg_417 = ap_const_lv5_1) else "0";
    empty_15_fu_779_p2 <= (empty_14_fu_773_p2 or empty_13_fu_767_p2);
    empty_16_fu_785_p2 <= "1" when (i_2_reg_417 = ap_const_lv5_0) else "0";
    empty_17_fu_791_p2 <= (empty_16_fu_785_p2 or empty_15_fu_779_p2);
    f_function_res_fu_2164_p3 <= (trunc_ln254_1_reg_2581 & trunc_ln254_fu_2160_p1);
    i_5_fu_674_p2 <= std_logic_vector(unsigned(i_1_reg_406) + unsigned(ap_const_lv6_1));
    i_6_fu_2177_p2 <= std_logic_vector(unsigned(i_4_reg_528) + unsigned(ap_const_lv7_1));
    i_7_fu_749_p2 <= std_logic_vector(unsigned(i_2_reg_417) + unsigned(ap_const_lv5_1));
    i_8_fu_1745_p2 <= std_logic_vector(unsigned(i_3_reg_460) + unsigned(ap_const_lv5_1));
    i_fu_613_p2 <= std_logic_vector(unsigned(i_0_reg_384) + unsigned(ap_const_lv7_1));
    icmp_ln171_fu_607_p2 <= "1" when (i_0_reg_384 = ap_const_lv7_40) else "0";
    icmp_ln182_fu_668_p2 <= "1" when (i_1_reg_406 = ap_const_lv6_38) else "0";
    icmp_ln192_fu_743_p2 <= "1" when (i_2_reg_417 = ap_const_lv5_10) else "0";
    icmp_ln216_fu_1590_p2 <= "1" when (j_0_reg_428 = ap_const_lv6_30) else "0";
    icmp_ln223_fu_1739_p2 <= "1" when (i_3_reg_460 = ap_const_lv5_10) else "0";
    icmp_ln227_fu_1759_p2 <= "1" when (j_1_reg_483 = ap_const_lv6_30) else "0";
    icmp_ln235_fu_1883_p2 <= "1" when (j_2_reg_494 = ap_const_lv4_8) else "0";
    icmp_ln252_fu_2117_p2 <= "1" when (j_3_reg_517 = ap_const_lv6_20) else "0";
    icmp_ln267_fu_2171_p2 <= "1" when (i_4_reg_528 = ap_const_lv7_40) else "0";
    init_perm_res_fu_661_p3 <= (trunc_ln174_1_reg_2241 & trunc_ln174_fu_657_p1);
    inv_init_perm_res_fu_2211_p3 <= (trunc_ln270_1_reg_2609 & trunc_ln270_fu_2207_p1);
    j_6_fu_1765_p2 <= std_logic_vector(unsigned(j_1_reg_483) + unsigned(ap_const_lv6_1));
    j_7_fu_1889_p2 <= std_logic_vector(unsigned(j_2_reg_494) + unsigned(ap_const_lv4_1));
    j_8_fu_2123_p2 <= std_logic_vector(unsigned(j_3_reg_517) + unsigned(ap_const_lv6_1));
    j_fu_1596_p2 <= std_logic_vector(unsigned(j_0_reg_428) + unsigned(ap_const_lv6_1));
    lshr_ln174_fu_652_p2 <= std_logic_vector(shift_right(unsigned(input_r),to_integer(unsigned('0' & zext_ln174_fu_648_p1(31-1 downto 0)))));
    lshr_ln184_fu_727_p2 <= std_logic_vector(shift_right(unsigned(key),to_integer(unsigned('0' & zext_ln184_fu_723_p1(31-1 downto 0)))));
    lshr_ln218_fu_1654_p2 <= std_logic_vector(shift_right(unsigned(tmp_9_reg_2451),to_integer(unsigned('0' & zext_ln218_1_fu_1650_p1(31-1 downto 0)))));
    lshr_ln229_fu_1866_p2 <= std_logic_vector(shift_right(unsigned(temp_reg_439),to_integer(unsigned('0' & zext_ln229_1_fu_1862_p1(31-1 downto 0)))));
    lshr_ln240_1_fu_1992_p2 <= std_logic_vector(shift_right(unsigned(and_ln240_fu_1984_p2),to_integer(unsigned('0' & zext_ln240_6_fu_1989_p1(31-1 downto 0)))));
    lshr_ln240_fu_1978_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv48_840000000000),to_integer(unsigned('0' & zext_ln240_4_fu_1974_p1(31-1 downto 0)))));
    lshr_ln243_1_fu_2040_p2 <= std_logic_vector(shift_right(unsigned(and_ln243_fu_2032_p2),to_integer(unsigned('0' & zext_ln243_fu_2037_p1(31-1 downto 0)))));
    lshr_ln243_fu_2026_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv47_780000000000),to_integer(unsigned('0' & zext_ln240_3_fu_1970_p1(31-1 downto 0)))));
    lshr_ln254_fu_2154_p2 <= std_logic_vector(shift_right(unsigned(s_output_1_fu_266),to_integer(unsigned('0' & zext_ln254_1_fu_2150_p1(31-1 downto 0)))));
    lshr_ln270_fu_2202_p2 <= std_logic_vector(shift_right(unsigned(pre_output_reg_2497),to_integer(unsigned('0' & zext_ln270_fu_2198_p1(31-1 downto 0)))));
    or_ln241_fu_2010_p2 <= (trunc_ln240_1_fu_1998_p1 or tmp_7_fu_2002_p3);
    permuted_choice_1_fu_736_p3 <= (trunc_ln184_1_reg_2274 & trunc_ln184_fu_732_p1);
    pre_output_fu_1751_p3 <= (temp_reg_439 & L_0_reg_449);
    s_input_fu_1876_p3 <= (trunc_ln229_1_reg_2515 & trunc_ln229_fu_1872_p1);
    s_output_fu_2104_p3 <= (trunc_ln246_1_fu_2100_p1 & S_q0);
        sext_ln240_fu_1967_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln240_reg_2543),32));

        sext_ln246_1_fu_2064_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln246_fu_2060_p1),9));

        sext_ln246_2_fu_2074_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln246_fu_2068_p2),11));

        sext_ln246_3_fu_2096_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln246_1_reg_2558),64));

        sext_ln246_fu_2056_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_fu_2046_p4),9));

    shl_ln240_1_fu_1931_p3 <= (trunc_ln240_fu_1895_p1 & ap_const_lv2_0);
    shl_ln240_fu_1911_p2 <= std_logic_vector(shift_left(unsigned(j_2_reg_494),to_integer(unsigned('0' & ap_const_lv4_1(4-1 downto 0)))));
    shl_ln_fu_1899_p3 <= (trunc_ln240_fu_1895_p1 & ap_const_lv3_0);
    sub_key_0_fu_1667_p3 <= (trunc_ln218_1_fu_1663_p1 & trunc_ln218_fu_1659_p1);
    sub_ln174_fu_642_p2 <= std_logic_vector(signed(ap_const_lv7_40) - signed(IP_q0));
    sub_ln184_fu_717_p2 <= std_logic_vector(signed(ap_const_lv7_40) - signed(zext_ln184_2_fu_713_p1));
    sub_ln218_fu_1644_p2 <= std_logic_vector(signed(ap_const_lv6_38) - signed(PC2_q0));
    sub_ln229_fu_1856_p2 <= std_logic_vector(signed(ap_const_lv6_20) - signed(E_q0));
    sub_ln240_1_fu_1943_p2 <= std_logic_vector(signed(ap_const_lv6_2A) - signed(zext_ln240_1_fu_1917_p1));
    sub_ln240_2_fu_1949_p2 <= std_logic_vector(unsigned(sub_ln240_1_fu_1943_p2) - unsigned(zext_ln240_5_fu_1939_p1));
    sub_ln240_fu_1925_p2 <= std_logic_vector(unsigned(zext_ln240_fu_1907_p1) - unsigned(zext_ln240_2_fu_1921_p1));
    sub_ln243_1_fu_1961_p2 <= std_logic_vector(unsigned(sub_ln243_fu_1955_p2) - unsigned(zext_ln240_5_fu_1939_p1));
    sub_ln243_fu_1955_p2 <= std_logic_vector(signed(ap_const_lv6_2B) - signed(zext_ln240_1_fu_1917_p1));
    sub_ln254_fu_2144_p2 <= std_logic_vector(signed(ap_const_lv6_20) - signed(P_q0));
    sub_ln270_fu_2192_p2 <= std_logic_vector(signed(ap_const_lv7_40) - signed(PI_q0));
    tmp_10_fu_2046_p4 <= ((tmp_8_fu_2016_p4 & or_ln241_fu_2010_p2) & ap_const_lv4_0);
    tmp_11_fu_2078_p3 <= (j_2_reg_494 & ap_const_lv6_0);
    tmp_2_fu_851_p3 <= C_1_fu_194(27 downto 27);
    tmp_3_fu_801_p4 <= C_1_fu_194(27 downto 26);
    tmp_4_fu_871_p3 <= D_fu_198(27 downto 27);
    tmp_5_fu_1790_p17 <= (trunc_ln232_fu_1780_p1 xor ap_const_lv4_F);
    tmp_7_fu_2002_p3 <= lshr_ln240_1_fu_1992_p2(4 downto 4);
    tmp_8_fu_2016_p4 <= lshr_ln240_1_fu_1992_p2(7 downto 5);
    tmp_9_fu_910_p3 <= (C_1_fu_194 & D_fu_198);
    tmp_s_fu_823_p4 <= D_fu_198(27 downto 26);
    trunc_ln174_1_fu_624_p1 <= init_perm_res_0_reg_373(63 - 1 downto 0);
    trunc_ln174_fu_657_p1 <= lshr_ln174_fu_652_p2(1 - 1 downto 0);
    trunc_ln184_1_fu_685_p1 <= permuted_choice_1_0_reg_395(63 - 1 downto 0);
    trunc_ln184_fu_732_p1 <= lshr_ln184_fu_727_p2(1 - 1 downto 0);
    trunc_ln197_fu_859_p1 <= C_1_fu_194(27 - 1 downto 0);
    trunc_ln198_fu_879_p1 <= D_fu_198(27 - 1 downto 0);
    trunc_ln203_fu_797_p1 <= C_1_fu_194(26 - 1 downto 0);
    trunc_ln204_fu_819_p1 <= D_fu_198(26 - 1 downto 0);
    trunc_ln214_fu_901_p1 <= i_2_reg_417(4 - 1 downto 0);
    trunc_ln218_1_fu_1663_p1 <= tmp_6_fu_1607_p18(63 - 1 downto 0);
    trunc_ln218_fu_1659_p1 <= lshr_ln218_fu_1654_p2(1 - 1 downto 0);
    trunc_ln229_1_fu_1776_p1 <= s_input_0_reg_472(63 - 1 downto 0);
    trunc_ln229_fu_1872_p1 <= lshr_ln229_fu_1866_p2(1 - 1 downto 0);
    trunc_ln232_1_fu_1828_p1 <= s_input_0_reg_472(48 - 1 downto 0);
    trunc_ln232_2_fu_1832_p1 <= tmp_5_fu_1790_p18(48 - 1 downto 0);
    trunc_ln232_3_fu_1836_p1 <= s_input_0_reg_472(47 - 1 downto 0);
    trunc_ln232_4_fu_1840_p1 <= tmp_5_fu_1790_p18(47 - 1 downto 0);
    trunc_ln232_fu_1780_p1 <= i_3_reg_460(4 - 1 downto 0);
    trunc_ln240_1_fu_1998_p1 <= lshr_ln240_1_fu_1992_p2(1 - 1 downto 0);
    trunc_ln240_fu_1895_p1 <= j_2_reg_494(3 - 1 downto 0);
    trunc_ln246_1_fu_2100_p1 <= s_output_1_fu_266(28 - 1 downto 0);
    trunc_ln246_fu_2060_p1 <= lshr_ln243_1_fu_2040_p2(8 - 1 downto 0);
    trunc_ln254_1_fu_2134_p1 <= f_function_res_0_reg_506(31 - 1 downto 0);
    trunc_ln254_fu_2160_p1 <= lshr_ln254_fu_2154_p2(1 - 1 downto 0);
    trunc_ln270_1_fu_2188_p1 <= inv_init_perm_res_0_reg_539(63 - 1 downto 0);
    trunc_ln270_fu_2207_p1 <= lshr_ln270_fu_2202_p2(1 - 1 downto 0);
    xor_ln232_1_fu_1844_p2 <= (trunc_ln232_4_fu_1840_p1 xor trunc_ln232_3_fu_1836_p1);
    xor_ln232_2_fu_1850_p2 <= (trunc_ln232_2_fu_1832_p1 xor trunc_ln232_1_fu_1828_p1);
    zext_ln174_1_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_384),64));
    zext_ln174_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln174_fu_642_p2),64));
    zext_ln184_1_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_406),64));
    zext_ln184_2_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(PC1_q0),7));
    zext_ln184_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln184_fu_717_p2),64));
    zext_ln218_1_fu_1650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln218_fu_1644_p2),56));
    zext_ln218_fu_1602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_428),64));
    zext_ln229_1_fu_1862_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln229_fu_1856_p2),32));
    zext_ln229_fu_1771_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_483),64));
    zext_ln240_1_fu_1917_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln240_fu_1911_p2),6));
    zext_ln240_2_fu_1921_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln240_fu_1911_p2),7));
    zext_ln240_3_fu_1970_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln240_fu_1967_p1),47));
    zext_ln240_4_fu_1974_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln240_fu_1967_p1),48));
    zext_ln240_5_fu_1939_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln240_1_fu_1931_p3),6));
    zext_ln240_6_fu_1989_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln240_2_reg_2548),48));
    zext_ln240_fu_1907_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_1899_p3),7));
    zext_ln243_fu_2037_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln243_1_reg_2553),47));
    zext_ln246_fu_2086_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_2078_p3),11));
    zext_ln254_1_fu_2150_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln254_fu_2144_p2),32));
    zext_ln254_fu_2129_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_3_reg_517),64));
    zext_ln270_1_fu_2183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_528),64));
    zext_ln270_fu_2198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln270_fu_2192_p2),64));
end behav;

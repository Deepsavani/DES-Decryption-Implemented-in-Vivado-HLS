-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_3_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (59 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (63 downto 0);
    sub_key_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    sub_key_ce0 : OUT STD_LOGIC;
    sub_key_we0 : OUT STD_LOGIC;
    sub_key_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of Loop_3_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_38 : STD_LOGIC_VECTOR (5 downto 0) := "111000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal PC2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal PC2_ce0 : STD_LOGIC;
    signal PC2_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_fu_177_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_408 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub_key_addr_reg_416 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln192_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_334_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_8_reg_421 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_fu_348_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_429 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln216_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln218_1_fu_359_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln218_1_reg_439 : STD_LOGIC_VECTOR (62 downto 0);
    signal or_ln_fu_382_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_2_i_reg_107 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal sub_key_load_reg_118 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_0_i_reg_130 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln214_fu_329_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln218_fu_354_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal C_3_fu_62 : STD_LOGIC_VECTOR (27 downto 0);
    signal C_1_fu_243_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal empty_76_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal C_2_fu_291_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal D_fu_66 : STD_LOGIC_VECTOR (27 downto 0);
    signal D_3_fu_157_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal D_1_fu_261_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal D_2_fu_311_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal empty_71_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_70_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_73_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_72_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_75_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_74_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln203_fu_225_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_s_fu_233_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln204_fu_229_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_2_fu_251_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln197_fu_287_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_fu_279_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln198_fu_307_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_1_fu_299_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln218_fu_363_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln218_1_fu_369_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal lshr_ln218_fu_373_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal trunc_ln218_fu_378_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component Loop_3_proc_PC2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;



begin
    PC2_U : component Loop_3_proc_PC2
    generic map (
        DataWidth => 6,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => PC2_address0,
        ce0 => PC2_ce0,
        q0 => PC2_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln192_fu_171_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    C_3_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((empty_76_fu_219_p2 = ap_const_lv1_1) and (icmp_ln192_fu_171_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                C_3_fu_62 <= C_2_fu_291_p3;
            elsif (((empty_76_fu_219_p2 = ap_const_lv1_0) and (icmp_ln192_fu_171_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                C_3_fu_62 <= C_1_fu_243_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                C_3_fu_62 <= p_read(55 downto 28);
            end if; 
        end if;
    end process;

    D_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((empty_76_fu_219_p2 = ap_const_lv1_1) and (icmp_ln192_fu_171_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                D_fu_66 <= D_2_fu_311_p3;
            elsif (((empty_76_fu_219_p2 = ap_const_lv1_0) and (icmp_ln192_fu_171_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                D_fu_66 <= D_1_fu_261_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                D_fu_66 <= D_3_fu_157_p1;
            end if; 
        end if;
    end process;

    i_2_i_reg_107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln216_fu_342_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_2_i_reg_107 <= i_reg_408;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_2_i_reg_107 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_0_i_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_0_i_reg_130 <= j_reg_429;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                j_0_i_reg_130 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    sub_key_load_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                sub_key_load_reg_118 <= or_ln_fu_382_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                sub_key_load_reg_118 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_408 <= i_fu_177_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j_reg_429 <= j_fu_348_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln192_fu_171_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                sub_key_addr_reg_416 <= zext_ln214_fu_329_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_8_reg_421 <= tmp_8_fu_334_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln216_fu_342_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                trunc_ln218_1_reg_439 <= trunc_ln218_1_fu_359_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln192_fu_171_p2, ap_CS_fsm_state4, icmp_ln216_fu_342_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln192_fu_171_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln216_fu_342_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    C_1_fu_243_p3 <= (trunc_ln203_fu_225_p1 & tmp_s_fu_233_p4);
    C_2_fu_291_p3 <= (trunc_ln197_fu_287_p1 & tmp_fu_279_p3);
    D_1_fu_261_p3 <= (trunc_ln204_fu_229_p1 & tmp_2_fu_251_p4);
    D_2_fu_311_p3 <= (trunc_ln198_fu_307_p1 & tmp_1_fu_299_p3);
    D_3_fu_157_p1 <= p_read1(28 - 1 downto 0);
    PC2_address0 <= zext_ln218_fu_354_p1(6 - 1 downto 0);

    PC2_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            PC2_ce0 <= ap_const_logic_1;
        else 
            PC2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln192_fu_171_p2)
    begin
        if (((icmp_ln192_fu_171_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln192_fu_171_p2)
    begin
        if (((icmp_ln192_fu_171_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_70_fu_183_p2 <= "1" when (i_2_i_reg_107 = ap_const_lv5_F) else "0";
    empty_71_fu_189_p2 <= "1" when (i_2_i_reg_107 = ap_const_lv5_8) else "0";
    empty_72_fu_195_p2 <= (empty_71_fu_189_p2 or empty_70_fu_183_p2);
    empty_73_fu_201_p2 <= "1" when (i_2_i_reg_107 = ap_const_lv5_1) else "0";
    empty_74_fu_207_p2 <= (empty_73_fu_201_p2 or empty_72_fu_195_p2);
    empty_75_fu_213_p2 <= "1" when (i_2_i_reg_107 = ap_const_lv5_0) else "0";
    empty_76_fu_219_p2 <= (empty_75_fu_213_p2 or empty_74_fu_207_p2);
    i_fu_177_p2 <= std_logic_vector(unsigned(i_2_i_reg_107) + unsigned(ap_const_lv5_1));
    icmp_ln192_fu_171_p2 <= "1" when (i_2_i_reg_107 = ap_const_lv5_10) else "0";
    icmp_ln216_fu_342_p2 <= "1" when (j_0_i_reg_130 = ap_const_lv6_30) else "0";
    j_fu_348_p2 <= std_logic_vector(unsigned(j_0_i_reg_130) + unsigned(ap_const_lv6_1));
    lshr_ln218_fu_373_p2 <= std_logic_vector(shift_right(unsigned(tmp_8_reg_421),to_integer(unsigned('0' & zext_ln218_1_fu_369_p1(31-1 downto 0)))));
    or_ln_fu_382_p3 <= (trunc_ln218_1_reg_439 & trunc_ln218_fu_378_p1);
    sub_key_address0 <= sub_key_addr_reg_416;

    sub_key_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sub_key_ce0 <= ap_const_logic_1;
        else 
            sub_key_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_key_d0 <= sub_key_load_reg_118;

    sub_key_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sub_key_we0 <= ap_const_logic_1;
        else 
            sub_key_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln218_fu_363_p2 <= std_logic_vector(signed(ap_const_lv6_38) - signed(PC2_q0));
    tmp_1_fu_299_p3 <= D_fu_66(27 downto 27);
    tmp_2_fu_251_p4 <= D_fu_66(27 downto 26);
    tmp_8_fu_334_p3 <= (C_3_fu_62 & D_fu_66);
    tmp_fu_279_p3 <= C_3_fu_62(27 downto 27);
    tmp_s_fu_233_p4 <= C_3_fu_62(27 downto 26);
    trunc_ln197_fu_287_p1 <= C_3_fu_62(27 - 1 downto 0);
    trunc_ln198_fu_307_p1 <= D_fu_66(27 - 1 downto 0);
    trunc_ln203_fu_225_p1 <= C_3_fu_62(26 - 1 downto 0);
    trunc_ln204_fu_229_p1 <= D_fu_66(26 - 1 downto 0);
    trunc_ln218_1_fu_359_p1 <= sub_key_load_reg_118(63 - 1 downto 0);
    trunc_ln218_fu_378_p1 <= lshr_ln218_fu_373_p2(1 - 1 downto 0);
    zext_ln214_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_i_reg_107),64));
    zext_ln218_1_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln218_fu_363_p2),56));
    zext_ln218_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i_reg_130),64));
end behav;

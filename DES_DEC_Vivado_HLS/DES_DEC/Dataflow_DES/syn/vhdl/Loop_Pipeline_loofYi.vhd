-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity Loop_Pipeline_loofYi_rom is 
    generic(
             DWIDTH     : integer := 4; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 512
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of Loop_Pipeline_loofYi_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1110", 1 => "0100", 2 => "1101", 3 => "0001", 4 => "0010", 
    5 => "1111", 6 => "1011", 7 => "1000", 8 => "0011", 9 => "1010", 
    10 => "0110", 11 => "1100", 12 => "0101", 13 => "1001", 14 => "0000", 
    15 => "0111", 16 => "0000", 17 => "1111", 18 => "0111", 19 => "0100", 
    20 => "1110", 21 => "0010", 22 => "1101", 23 => "0001", 24 => "1010", 
    25 => "0110", 26 => "1100", 27 => "1011", 28 => "1001", 29 => "0101", 
    30 => "0011", 31 => "1000", 32 => "0100", 33 => "0001", 34 => "1110", 
    35 => "1000", 36 => "1101", 37 => "0110", 38 => "0010", 39 => "1011", 
    40 => "1111", 41 => "1100", 42 => "1001", 43 => "0111", 44 => "0011", 
    45 => "1010", 46 => "0101", 47 => "0000", 48 => "1111", 49 => "1100", 
    50 => "1000", 51 => "0010", 52 => "0100", 53 => "1001", 54 => "0001", 
    55 => "0111", 56 => "0101", 57 => "1011", 58 => "0011", 59 => "1110", 
    60 => "1010", 61 => "0000", 62 => "0110", 63 => "1101", 64 => "1111", 
    65 => "0001", 66 => "1000", 67 => "1110", 68 => "0110", 69 => "1011", 
    70 => "0011", 71 => "0100", 72 => "1001", 73 => "0111", 74 => "0010", 
    75 => "1101", 76 => "1100", 77 => "0000", 78 => "0101", 79 => "1010", 
    80 => "0011", 81 => "1101", 82 => "0100", 83 => "0111", 84 => "1111", 
    85 => "0010", 86 => "1000", 87 => "1110", 88 => "1100", 89 => "0000", 
    90 => "0001", 91 => "1010", 92 => "0110", 93 => "1001", 94 => "1011", 
    95 => "0101", 96 => "0000", 97 => "1110", 98 => "0111", 99 => "1011", 
    100 => "1010", 101 => "0100", 102 => "1101", 103 => "0001", 104 => "0101", 
    105 => "1000", 106 => "1100", 107 => "0110", 108 => "1001", 109 => "0011", 
    110 => "0010", 111 => "1111", 112 => "1101", 113 => "1000", 114 => "1010", 
    115 => "0001", 116 => "0011", 117 => "1111", 118 => "0100", 119 => "0010", 
    120 => "1011", 121 => "0110", 122 => "0111", 123 => "1100", 124 => "0000", 
    125 => "0101", 126 => "1110", 127 => "1001", 128 => "1010", 129 => "0000", 
    130 => "1001", 131 => "1110", 132 => "0110", 133 => "0011", 134 => "1111", 
    135 => "0101", 136 => "0001", 137 => "1101", 138 => "1100", 139 => "0111", 
    140 => "1011", 141 => "0100", 142 => "0010", 143 => "1000", 144 => "1101", 
    145 => "0111", 146 => "0000", 147 => "1001", 148 => "0011", 149 => "0100", 
    150 => "0110", 151 => "1010", 152 => "0010", 153 => "1000", 154 => "0101", 
    155 => "1110", 156 => "1100", 157 => "1011", 158 => "1111", 159 => "0001", 
    160 => "1101", 161 => "0110", 162 => "0100", 163 => "1001", 164 => "1000", 
    165 => "1111", 166 => "0011", 167 => "0000", 168 => "1011", 169 => "0001", 
    170 => "0010", 171 => "1100", 172 => "0101", 173 => "1010", 174 => "1110", 
    175 => "0111", 176 => "0001", 177 => "1010", 178 => "1101", 179 => "0000", 
    180 => "0110", 181 => "1001", 182 => "1000", 183 => "0111", 184 => "0100", 
    185 => "1111", 186 => "1110", 187 => "0011", 188 => "1011", 189 => "0101", 
    190 => "0010", 191 => "1100", 192 => "0111", 193 => "1101", 194 => "1110", 
    195 => "0011", 196 => "0000", 197 => "0110", 198 => "1001", 199 => "1010", 
    200 => "0001", 201 => "0010", 202 => "1000", 203 => "0101", 204 => "1011", 
    205 => "1100", 206 => "0100", 207 => "1111", 208 => "1101", 209 => "1000", 
    210 => "1011", 211 => "0101", 212 => "0110", 213 => "1111", 214 => "0000", 
    215 => "0011", 216 => "0100", 217 => "0111", 218 => "0010", 219 => "1100", 
    220 => "0001", 221 => "1010", 222 => "1110", 223 => "1001", 224 => "1010", 
    225 => "0110", 226 => "1001", 227 => "0000", 228 => "1100", 229 => "1011", 
    230 => "0111", 231 => "1101", 232 => "1111", 233 => "0001", 234 => "0011", 
    235 => "1110", 236 => "0101", 237 => "0010", 238 => "1000", 239 => "0100", 
    240 => "0011", 241 => "1111", 242 => "0000", 243 => "0110", 244 => "1010", 
    245 => "0001", 246 => "1101", 247 => "1000", 248 => "1001", 249 => "0100", 
    250 => "0101", 251 => "1011", 252 => "1100", 253 => "0111", 254 => "0010", 
    255 => "1110", 256 => "0010", 257 => "1100", 258 => "0100", 259 => "0001", 
    260 => "0111", 261 => "1010", 262 => "1011", 263 => "0110", 264 => "1000", 
    265 => "0101", 266 => "0011", 267 => "1111", 268 => "1101", 269 => "0000", 
    270 => "1110", 271 => "1001", 272 => "1110", 273 => "1011", 274 => "0010", 
    275 => "1100", 276 => "0100", 277 => "0111", 278 => "1101", 279 => "0001", 
    280 => "0101", 281 => "0000", 282 => "1111", 283 => "1010", 284 => "0011", 
    285 => "1001", 286 => "1000", 287 => "0110", 288 => "0100", 289 => "0010", 
    290 => "0001", 291 => "1011", 292 => "1010", 293 => "1101", 294 => "0111", 
    295 => "1000", 296 => "1111", 297 => "1001", 298 => "1100", 299 => "0101", 
    300 => "0110", 301 => "0011", 302 => "0000", 303 => "1110", 304 => "1011", 
    305 => "1000", 306 => "1100", 307 => "0111", 308 => "0001", 309 => "1110", 
    310 => "0010", 311 => "1101", 312 => "0110", 313 => "1111", 314 => "0000", 
    315 => "1001", 316 => "1010", 317 => "0100", 318 => "0101", 319 => "0011", 
    320 => "1100", 321 => "0001", 322 => "1010", 323 => "1111", 324 => "1001", 
    325 => "0010", 326 => "0110", 327 => "1000", 328 => "0000", 329 => "1101", 
    330 => "0011", 331 => "0100", 332 => "1110", 333 => "0111", 334 => "0101", 
    335 => "1011", 336 => "1010", 337 => "1111", 338 => "0100", 339 => "0010", 
    340 => "0111", 341 => "1100", 342 => "1001", 343 => "0101", 344 => "0110", 
    345 => "0001", 346 => "1101", 347 => "1110", 348 => "0000", 349 => "1011", 
    350 => "0011", 351 => "1000", 352 => "1001", 353 => "1110", 354 => "1111", 
    355 => "0101", 356 => "0010", 357 => "1000", 358 => "1100", 359 => "0011", 
    360 => "0111", 361 => "0000", 362 => "0100", 363 => "1010", 364 => "0001", 
    365 => "1101", 366 => "1011", 367 => "0110", 368 => "0100", 369 => "0011", 
    370 => "0010", 371 => "1100", 372 => "1001", 373 => "0101", 374 => "1111", 
    375 => "1010", 376 => "1011", 377 => "1110", 378 => "0001", 379 => "0111", 
    380 => "0110", 381 => "0000", 382 => "1000", 383 => "1101", 384 => "0100", 
    385 => "1011", 386 => "0010", 387 => "1110", 388 => "1111", 389 => "0000", 
    390 => "1000", 391 => "1101", 392 => "0011", 393 => "1100", 394 => "1001", 
    395 => "0111", 396 => "0101", 397 => "1010", 398 => "0110", 399 => "0001", 
    400 => "1101", 401 => "0000", 402 => "1011", 403 => "0111", 404 => "0100", 
    405 => "1001", 406 => "0001", 407 => "1010", 408 => "1110", 409 => "0011", 
    410 => "0101", 411 => "1100", 412 => "0010", 413 => "1111", 414 => "1000", 
    415 => "0110", 416 => "0001", 417 => "0100", 418 => "1011", 419 => "1101", 
    420 => "1100", 421 => "0011", 422 => "0111", 423 => "1110", 424 => "1010", 
    425 => "1111", 426 => "0110", 427 => "1000", 428 => "0000", 429 => "0101", 
    430 => "1001", 431 => "0010", 432 => "0110", 433 => "1011", 434 => "1101", 
    435 => "1000", 436 => "0001", 437 => "0100", 438 => "1010", 439 => "0111", 
    440 => "1001", 441 => "0101", 442 => "0000", 443 => "1111", 444 => "1110", 
    445 => "0010", 446 => "0011", 447 => "1100", 448 => "1101", 449 => "0010", 
    450 => "1000", 451 => "0100", 452 => "0110", 453 => "1111", 454 => "1011", 
    455 => "0001", 456 => "1010", 457 => "1001", 458 => "0011", 459 => "1110", 
    460 => "0101", 461 => "0000", 462 => "1100", 463 => "0111", 464 => "0001", 
    465 => "1111", 466 => "1101", 467 => "1000", 468 => "1010", 469 => "0011", 
    470 => "0111", 471 => "0100", 472 => "1100", 473 => "0101", 474 => "0110", 
    475 => "1011", 476 => "0000", 477 => "1110", 478 => "1001", 479 => "0010", 
    480 => "0111", 481 => "1011", 482 => "0100", 483 => "0001", 484 => "1001", 
    485 => "1100", 486 => "1110", 487 => "0010", 488 => "0000", 489 => "0110", 
    490 => "1010", 491 => "1101", 492 => "1111", 493 => "0011", 494 => "0101", 
    495 => "1000", 496 => "0010", 497 => "0001", 498 => "1110", 499 => "0111", 
    500 => "0100", 501 => "1010", 502 => "1000", 503 => "1101", 504 => "1111", 
    505 => "1100", 506 => "1001", 507 => "0000", 508 => "0011", 509 => "0101", 
    510 => "0110", 511 => "1011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity Loop_Pipeline_loofYi is
    generic (
        DataWidth : INTEGER := 4;
        AddressRange : INTEGER := 512;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of Loop_Pipeline_loofYi is
    component Loop_Pipeline_loofYi_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    Loop_Pipeline_loofYi_rom_U :  component Loop_Pipeline_loofYi_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;



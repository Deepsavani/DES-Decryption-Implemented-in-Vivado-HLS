-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity des_dec is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r : IN STD_LOGIC_VECTOR (63 downto 0);
    key : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of des_dec is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "des_dec,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35tl-cpg236-2L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.689625,HLS_SYN_LAT=3531,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1034,HLS_SYN_LUT=2428,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv8_9 : STD_LOGIC_VECTOR (7 downto 0) := "00001001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv8_A : STD_LOGIC_VECTOR (7 downto 0) := "00001010";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv8_C : STD_LOGIC_VECTOR (7 downto 0) := "00001100";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv8_E : STD_LOGIC_VECTOR (7 downto 0) := "00001110";
    constant ap_const_lv8_F : STD_LOGIC_VECTOR (7 downto 0) := "00001111";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_10 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv6_38 : STD_LOGIC_VECTOR (5 downto 0) := "111000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_2A : STD_LOGIC_VECTOR (5 downto 0) := "101010";
    constant ap_const_lv6_2B : STD_LOGIC_VECTOR (5 downto 0) := "101011";
    constant ap_const_lv48_840000000000 : STD_LOGIC_VECTOR (47 downto 0) := "100001000000000000000000000000000000000000000000";
    constant ap_const_lv47_780000000000 : STD_LOGIC_VECTOR (46 downto 0) := "11110000000000000000000000000000000000000000000";
    constant ap_const_lv8_50 : STD_LOGIC_VECTOR (7 downto 0) := "01010000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal array_temp_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal array_temp_ce0 : STD_LOGIC;
    signal array_temp_we0 : STD_LOGIC;
    signal array_temp_d0 : STD_LOGIC_VECTOR (47 downto 0);
    signal array_temp_q0 : STD_LOGIC_VECTOR (47 downto 0);
    signal array_temp_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal array_temp_ce1 : STD_LOGIC;
    signal array_temp_we1 : STD_LOGIC;
    signal array_temp_d1 : STD_LOGIC_VECTOR (47 downto 0);
    signal array_temp_q1 : STD_LOGIC_VECTOR (47 downto 0);
    signal PC1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal PC1_ce0 : STD_LOGIC;
    signal PC1_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal E_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal E_ce0 : STD_LOGIC;
    signal E_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal S_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal S_ce0 : STD_LOGIC;
    signal S_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal P_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal P_ce0 : STD_LOGIC;
    signal P_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_fu_566_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_2581 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln171_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln174_2_fu_583_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln174_2_reg_2591 : STD_LOGIC_VECTOR (62 downto 0);
    signal L_reg_2596 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_fu_597_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_reg_2601 : STD_LOGIC_VECTOR (31 downto 0);
    signal init_perm_res_fu_624_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_2_fu_637_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_2_reg_2614 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln182_fu_631_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln184_1_fu_648_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln184_1_reg_2624 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_fu_652_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_2636 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_660_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_2653 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln198_fu_668_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln198_reg_2669 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_672_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_2686 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_680_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_2701 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_688_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_2718 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_696_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_2734 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_704_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_2749 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_712_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_2766 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_720_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_2783 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_728_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_2798 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_736_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_2814 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_744_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_2829 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_752_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_2845 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_760_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_2860 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_768_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_2875 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_776_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_reg_2890 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_784_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_reg_2907 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_792_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_reg_2922 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_800_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_reg_2938 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_808_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_reg_2956 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_816_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_reg_2970 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_824_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_reg_2985 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_832_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_reg_3001 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_840_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_reg_3017 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_848_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_reg_3034 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_856_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_reg_3051 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_864_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_reg_3067 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_872_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_reg_3082 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_880_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_reg_3097 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_888_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_reg_3112 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_896_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_reg_3129 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_904_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_reg_3146 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_912_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_reg_3162 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_920_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_reg_3178 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_928_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_reg_3195 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_936_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_reg_3210 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_fu_944_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_reg_3225 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_952_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_reg_3241 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_fu_960_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_reg_3257 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_968_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_reg_3273 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_fu_976_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_reg_3289 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_984_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_reg_3305 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_fu_992_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_reg_3320 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_fu_1000_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_reg_3335 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_1008_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_reg_3351 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_fu_1016_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_reg_3368 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_fu_1024_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_reg_3383 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_fu_1165_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_reg_3400 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_fu_1173_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_reg_3416 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_fu_1181_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_reg_3431 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_fu_1189_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_reg_3448 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_55_fu_1197_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_55_reg_3466 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_fu_1205_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_reg_3483 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_fu_1213_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_reg_3499 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_fu_1221_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_reg_3515 : STD_LOGIC_VECTOR (0 downto 0);
    signal permuted_choice_1_fu_1366_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_6_fu_2121_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_6_reg_3540 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal pre_output_fu_2127_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal pre_output_reg_3545 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln223_fu_2115_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_2141_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_3553 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal icmp_ln227_fu_2135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_input_fu_2187_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal xor_ln232_fu_2207_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal xor_ln232_reg_3573 : STD_LOGIC_VECTOR (46 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal xor_ln232_1_fu_2213_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal xor_ln232_1_reg_3578 : STD_LOGIC_VECTOR (47 downto 0);
    signal j_4_fu_2225_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_4_reg_3586 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal sub_ln240_fu_2261_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln240_reg_3591 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln235_fu_2219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln240_2_fu_2285_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln240_2_reg_3596 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln243_1_fu_2297_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln243_1_reg_3601 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln246_1_fu_2426_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln246_1_reg_3606 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal j_5_fu_2459_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_5_reg_3619 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal icmp_ln252_fu_2453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln254_1_fu_2470_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln254_1_reg_3629 : STD_LOGIC_VECTOR (30 downto 0);
    signal R_1_fu_2474_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_function_res_fu_2500_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal i_5_fu_2513_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_5_reg_3647 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal icmp_ln267_fu_2507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln270_2_fu_2534_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln270_2_reg_3657 : STD_LOGIC_VECTOR (62 downto 0);
    signal inv_init_perm_res_fu_2561_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal init_perm_res_0_reg_401 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_0_reg_412 : STD_LOGIC_VECTOR (6 downto 0);
    signal permuted_choice_1_0_reg_423 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_reg_434 : STD_LOGIC_VECTOR (5 downto 0);
    signal temp_reg_445 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal L_0_reg_455 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_reg_466 : STD_LOGIC_VECTOR (4 downto 0);
    signal s_input_0_reg_478 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_reg_490 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_2_reg_501 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal f_function_res_0_reg_513 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_3_reg_524 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_4_reg_535 : STD_LOGIC_VECTOR (6 downto 0);
    signal inv_init_perm_res_0_reg_546 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln174_1_fu_578_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln184_1_fu_643_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln229_fu_2147_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln232_fu_2158_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln246_3_fu_2432_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln254_fu_2465_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln270_2_fu_2529_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_output_1_fu_284 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_output_fu_2440_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln218_s_fu_1032_p49 : STD_LOGIC_VECTOR (47 downto 0);
    signal or_ln218_2_fu_1237_p49 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal or_ln218_1_fu_1373_p49 : STD_LOGIC_VECTOR (47 downto 0);
    signal or_ln218_3_fu_1426_p49 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal or_ln218_4_fu_1479_p49 : STD_LOGIC_VECTOR (47 downto 0);
    signal or_ln218_5_fu_1532_p49 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal or_ln218_6_fu_1585_p49 : STD_LOGIC_VECTOR (47 downto 0);
    signal or_ln218_7_fu_1638_p49 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal or_ln218_8_fu_1691_p49 : STD_LOGIC_VECTOR (47 downto 0);
    signal or_ln218_9_fu_1744_p49 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal or_ln218_10_fu_1797_p49 : STD_LOGIC_VECTOR (47 downto 0);
    signal or_ln218_11_fu_1850_p49 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal or_ln218_12_fu_1903_p49 : STD_LOGIC_VECTOR (47 downto 0);
    signal or_ln218_13_fu_1956_p49 : STD_LOGIC_VECTOR (47 downto 0);
    signal or_ln218_14_fu_2009_p49 : STD_LOGIC_VECTOR (47 downto 0);
    signal or_ln218_15_fu_2062_p49 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln174_fu_572_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln174_fu_601_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln174_fu_605_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln174_fu_611_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln174_fu_615_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln174_1_fu_620_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln198_1_fu_1133_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln198_fu_1147_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_5_fu_1151_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln198_s_fu_1137_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal or_ln212_fu_1159_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_59_fu_1229_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln184_2_fu_1343_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln184_fu_1347_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln184_fu_1353_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln184_fu_1357_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln184_fu_1362_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln232_fu_2152_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln229_fu_2163_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln229_1_fu_2169_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln229_fu_2173_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln229_1_fu_2183_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln229_fu_2179_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln232_2_fu_2203_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal trunc_ln232_1_fu_2199_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal trunc_ln232_fu_2195_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln240_fu_2231_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_2235_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln240_fu_2247_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln240_fu_2243_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln240_2_fu_2257_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln240_1_fu_2267_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln240_1_fu_2253_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln240_1_fu_2279_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln240_5_fu_2275_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln243_fu_2291_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln240_fu_2303_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln240_4_fu_2310_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal lshr_ln240_fu_2314_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal and_ln240_fu_2320_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln240_6_fu_2325_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal lshr_ln240_1_fu_2328_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_60_fu_2338_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln240_1_fu_2334_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln240_3_fu_2306_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal lshr_ln243_fu_2362_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal and_ln243_fu_2368_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal zext_ln243_fu_2373_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_49_fu_2352_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln241_fu_2346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_50_fu_2382_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln243_1_fu_2376_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal trunc_ln246_fu_2396_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln246_1_fu_2400_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln246_fu_2392_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln246_fu_2404_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_51_fu_2414_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln246_2_fu_2410_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln246_fu_2422_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln246_1_fu_2436_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sub_ln254_fu_2480_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln254_1_fu_2486_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln254_fu_2490_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln254_fu_2496_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln270_1_fu_2519_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln270_fu_2523_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln270_fu_2538_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln270_fu_2542_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln270_fu_2548_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln270_fu_2552_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln270_1_fu_2557_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);

    component des_dec_array_temp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (47 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (47 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (47 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component des_dec_PC1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component des_dec_E IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component des_dec_S IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component des_dec_P IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;



begin
    array_temp_U : component des_dec_array_temp
    generic map (
        DataWidth => 48,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => array_temp_address0,
        ce0 => array_temp_ce0,
        we0 => array_temp_we0,
        d0 => array_temp_d0,
        q0 => array_temp_q0,
        address1 => array_temp_address1,
        ce1 => array_temp_ce1,
        we1 => array_temp_we1,
        d1 => array_temp_d1,
        q1 => array_temp_q1);

    PC1_U : component des_dec_PC1
    generic map (
        DataWidth => 6,
        AddressRange => 56,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => PC1_address0,
        ce0 => PC1_ce0,
        q0 => PC1_q0);

    E_U : component des_dec_E
    generic map (
        DataWidth => 6,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => E_address0,
        ce0 => E_ce0,
        q0 => E_q0);

    S_U : component des_dec_S
    generic map (
        DataWidth => 4,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => S_address0,
        ce0 => S_ce0,
        q0 => S_q0);

    P_U : component des_dec_P
    generic map (
        DataWidth => 6,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => P_address0,
        ce0 => P_ce0,
        q0 => P_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    L_0_reg_455_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                L_0_reg_455 <= L_reg_2596;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln252_fu_2453_p2 = ap_const_lv1_1))) then 
                L_0_reg_455 <= temp_reg_445;
            end if; 
        end if;
    end process;

    f_function_res_0_reg_513_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln235_fu_2219_p2 = ap_const_lv1_1))) then 
                f_function_res_0_reg_513 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                f_function_res_0_reg_513 <= f_function_res_fu_2500_p3;
            end if; 
        end if;
    end process;

    i_0_reg_412_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_412 <= i_reg_2581;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_412 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i_1_reg_434_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_1_reg_434 <= i_2_reg_2614;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln171_fu_560_p2 = ap_const_lv1_1))) then 
                i_1_reg_434 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_3_reg_466_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_3_reg_466 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln252_fu_2453_p2 = ap_const_lv1_1))) then 
                i_3_reg_466 <= i_6_reg_3540;
            end if; 
        end if;
    end process;

    i_4_reg_535_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                i_4_reg_535 <= i_5_reg_3647;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln223_fu_2115_p2 = ap_const_lv1_1))) then 
                i_4_reg_535 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    init_perm_res_0_reg_401_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                init_perm_res_0_reg_401 <= init_perm_res_fu_624_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                init_perm_res_0_reg_401 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    inv_init_perm_res_0_reg_546_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                inv_init_perm_res_0_reg_546 <= inv_init_perm_res_fu_2561_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln223_fu_2115_p2 = ap_const_lv1_1))) then 
                inv_init_perm_res_0_reg_546 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    j_1_reg_490_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                j_1_reg_490 <= j_reg_3553;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln223_fu_2115_p2 = ap_const_lv1_0))) then 
                j_1_reg_490 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_2_reg_501_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                j_2_reg_501 <= j_4_reg_3586;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                j_2_reg_501 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_3_reg_524_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln235_fu_2219_p2 = ap_const_lv1_1))) then 
                j_3_reg_524 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                j_3_reg_524 <= j_5_reg_3619;
            end if; 
        end if;
    end process;

    permuted_choice_1_0_reg_423_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                permuted_choice_1_0_reg_423 <= permuted_choice_1_fu_1366_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln171_fu_560_p2 = ap_const_lv1_1))) then 
                permuted_choice_1_0_reg_423 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_input_0_reg_478_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                s_input_0_reg_478 <= s_input_fu_2187_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln223_fu_2115_p2 = ap_const_lv1_0))) then 
                s_input_0_reg_478 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    s_output_1_fu_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                s_output_1_fu_284 <= s_output_fu_2440_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln182_fu_631_p2 = ap_const_lv1_1))) then 
                s_output_1_fu_284 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    temp_reg_445_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                temp_reg_445 <= R_reg_2601;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln252_fu_2453_p2 = ap_const_lv1_1))) then 
                temp_reg_445 <= R_1_fu_2474_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln171_fu_560_p2 = ap_const_lv1_1))) then
                L_reg_2596 <= init_perm_res_0_reg_401(63 downto 32);
                R_reg_2601 <= R_fu_597_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                add_ln246_1_reg_3606 <= add_ln246_1_fu_2426_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_2_reg_2614 <= i_2_fu_637_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                i_5_reg_3647 <= i_5_fu_2513_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                i_6_reg_3540 <= i_6_fu_2121_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_2581 <= i_fu_566_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                j_4_reg_3586 <= j_4_fu_2225_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                j_5_reg_3619 <= j_5_fu_2459_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                j_reg_3553 <= j_fu_2141_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln223_fu_2115_p2 = ap_const_lv1_1))) then
                pre_output_reg_3545 <= pre_output_fu_2127_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln235_fu_2219_p2 = ap_const_lv1_0))) then
                    sub_ln240_2_reg_3596(5 downto 1) <= sub_ln240_2_fu_2285_p2(5 downto 1);
                    sub_ln240_reg_3591(6 downto 1) <= sub_ln240_fu_2261_p2(6 downto 1);
                    sub_ln243_1_reg_3601(5 downto 1) <= sub_ln243_1_fu_2297_p2(5 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln182_fu_631_p2 = ap_const_lv1_1))) then
                tmp_10_reg_2798 <= permuted_choice_1_0_reg_423(50 downto 50);
                tmp_11_reg_2814 <= permuted_choice_1_0_reg_423(52 downto 52);
                tmp_12_reg_2829 <= permuted_choice_1_0_reg_423(49 downto 49);
                tmp_13_reg_2845 <= permuted_choice_1_0_reg_423(34 downto 34);
                tmp_14_reg_2860 <= permuted_choice_1_0_reg_423(45 downto 45);
                tmp_15_reg_2875 <= permuted_choice_1_0_reg_423(32 downto 32);
                tmp_16_reg_2890 <= permuted_choice_1_0_reg_423(36 downto 36);
                tmp_17_reg_2907 <= permuted_choice_1_0_reg_423(43 downto 43);
                tmp_18_reg_2922 <= permuted_choice_1_0_reg_423(51 downto 51);
                tmp_19_reg_2938 <= permuted_choice_1_0_reg_423(29 downto 29);
                tmp_1_reg_2653 <= permuted_choice_1_0_reg_423(27 downto 27);
                tmp_20_reg_2956 <= permuted_choice_1_0_reg_423(47 downto 47);
                tmp_21_reg_2970 <= permuted_choice_1_0_reg_423(39 downto 39);
                tmp_22_reg_2985 <= permuted_choice_1_0_reg_423(48 downto 48);
                tmp_23_reg_3001 <= permuted_choice_1_0_reg_423(35 downto 35);
                tmp_24_reg_3017 <= permuted_choice_1_0_reg_423(42 downto 42);
                tmp_25_reg_3034 <= permuted_choice_1_0_reg_423(53 downto 53);
                tmp_26_reg_3051 <= permuted_choice_1_0_reg_423(14 downto 14);
                tmp_27_reg_3067 <= permuted_choice_1_0_reg_423(3 downto 3);
                tmp_28_reg_3082 <= permuted_choice_1_0_reg_423(24 downto 24);
                tmp_29_reg_3097 <= permuted_choice_1_0_reg_423(18 downto 18);
                tmp_2_reg_2686 <= permuted_choice_1_0_reg_423(28 downto 28);
                tmp_30_reg_3112 <= permuted_choice_1_0_reg_423(8 downto 8);
                tmp_31_reg_3129 <= permuted_choice_1_0_reg_423(25 downto 25);
                tmp_32_reg_3146 <= permuted_choice_1_0_reg_423(15 downto 15);
                tmp_33_reg_3162 <= permuted_choice_1_0_reg_423(4 downto 4);
                tmp_34_reg_3178 <= permuted_choice_1_0_reg_423(10 downto 10);
                tmp_35_reg_3195 <= permuted_choice_1_0_reg_423(22 downto 22);
                tmp_36_reg_3210 <= permuted_choice_1_0_reg_423(7 downto 7);
                tmp_37_reg_3225 <= permuted_choice_1_0_reg_423(11 downto 11);
                tmp_38_reg_3241 <= permuted_choice_1_0_reg_423(6 downto 6);
                tmp_39_reg_3257 <= permuted_choice_1_0_reg_423(16 downto 16);
                tmp_3_reg_2701 <= permuted_choice_1_0_reg_423(40 downto 40);
                tmp_40_reg_3273 <= permuted_choice_1_0_reg_423(21 downto 21);
                tmp_41_reg_3289 <= permuted_choice_1_0_reg_423(2 downto 2);
                tmp_42_reg_3305 <= permuted_choice_1_0_reg_423(9 downto 9);
                tmp_43_reg_3320 <= permuted_choice_1_0_reg_423(13 downto 13);
                tmp_44_reg_3335 <= permuted_choice_1_0_reg_423(5 downto 5);
                tmp_45_reg_3351 <= permuted_choice_1_0_reg_423(19 downto 19);
                tmp_46_reg_3368 <= permuted_choice_1_0_reg_423(26 downto 26);
                tmp_47_reg_3383 <= permuted_choice_1_0_reg_423(23 downto 23);
                tmp_48_reg_3400 <= permuted_choice_1_0_reg_423(37 downto 37);
                tmp_4_reg_2718 <= permuted_choice_1_0_reg_423(38 downto 38);
                tmp_52_reg_3416 <= permuted_choice_1_0_reg_423(30 downto 30);
                tmp_53_reg_3431 <= permuted_choice_1_0_reg_423(33 downto 33);
                tmp_54_reg_3448 <= permuted_choice_1_0_reg_423(46 downto 46);
                tmp_55_reg_3466 <= permuted_choice_1_0_reg_423(17 downto 17);
                tmp_56_reg_3483 <= permuted_choice_1_0_reg_423(20 downto 20);
                tmp_57_reg_3499 <= permuted_choice_1_0_reg_423(1 downto 1);
                tmp_58_reg_3515 <= permuted_choice_1_0_reg_423(12 downto 12);
                tmp_6_reg_2734 <= permuted_choice_1_0_reg_423(41 downto 41);
                tmp_7_reg_2749 <= permuted_choice_1_0_reg_423(44 downto 44);
                tmp_8_reg_2766 <= permuted_choice_1_0_reg_423(31 downto 31);
                tmp_9_reg_2783 <= permuted_choice_1_0_reg_423(54 downto 54);
                tmp_reg_2636 <= permuted_choice_1_0_reg_423(55 downto 55);
                trunc_ln198_reg_2669 <= trunc_ln198_fu_668_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln171_fu_560_p2 = ap_const_lv1_0))) then
                trunc_ln174_2_reg_2591 <= trunc_ln174_2_fu_583_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln182_fu_631_p2 = ap_const_lv1_0))) then
                trunc_ln184_1_reg_2624 <= trunc_ln184_1_fu_648_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln252_fu_2453_p2 = ap_const_lv1_0))) then
                trunc_ln254_1_reg_3629 <= trunc_ln254_1_fu_2470_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) and (icmp_ln267_fu_2507_p2 = ap_const_lv1_0))) then
                trunc_ln270_2_reg_3657 <= trunc_ln270_2_fu_2534_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                xor_ln232_1_reg_3578 <= xor_ln232_1_fu_2213_p2;
                xor_ln232_reg_3573 <= xor_ln232_fu_2207_p2;
            end if;
        end if;
    end process;
    sub_ln240_reg_3591(0) <= '0';
    sub_ln240_2_reg_3596(0) <= '0';
    sub_ln243_1_reg_3601(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln171_fu_560_p2, ap_CS_fsm_state4, icmp_ln182_fu_631_p2, ap_CS_fsm_state13, icmp_ln223_fu_2115_p2, ap_CS_fsm_state14, icmp_ln227_fu_2135_p2, ap_CS_fsm_state17, icmp_ln235_fu_2219_p2, ap_CS_fsm_state21, icmp_ln252_fu_2453_p2, ap_CS_fsm_state23, icmp_ln267_fu_2507_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln171_fu_560_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln182_fu_631_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln223_fu_2115_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln227_fu_2135_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln235_fu_2219_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln252_fu_2453_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state23 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state23) and (icmp_ln267_fu_2507_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    E_address0 <= zext_ln229_fu_2147_p1(6 - 1 downto 0);

    E_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            E_ce0 <= ap_const_logic_1;
        else 
            E_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    PC1_address0 <= zext_ln184_1_fu_643_p1(6 - 1 downto 0);

    PC1_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            PC1_ce0 <= ap_const_logic_1;
        else 
            PC1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    P_address0 <= zext_ln254_fu_2465_p1(5 - 1 downto 0);

    P_ce0_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            P_ce0 <= ap_const_logic_1;
        else 
            P_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    R_1_fu_2474_p2 <= (f_function_res_0_reg_513 xor L_0_reg_455);
    R_fu_597_p1 <= init_perm_res_0_reg_401(32 - 1 downto 0);
    S_address0 <= sext_ln246_3_fu_2432_p1(9 - 1 downto 0);

    S_ce0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            S_ce0 <= ap_const_logic_1;
        else 
            S_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln174_fu_572_p2 <= std_logic_vector(unsigned(ap_const_lv7_10) + unsigned(i_0_reg_412));
    add_ln246_1_fu_2426_p2 <= std_logic_vector(signed(sext_ln246_2_fu_2410_p1) + signed(zext_ln246_fu_2422_p1));
    add_ln246_fu_2404_p2 <= std_logic_vector(signed(sext_ln246_1_fu_2400_p1) + signed(sext_ln246_fu_2392_p1));
    add_ln270_fu_2523_p2 <= std_logic_vector(unsigned(ap_const_lv8_50) + unsigned(zext_ln270_1_fu_2519_p1));
    and_ln240_fu_2320_p2 <= (xor_ln232_1_reg_3578 and lshr_ln240_fu_2314_p2);
    and_ln243_fu_2368_p2 <= (xor_ln232_reg_3573 and lshr_ln243_fu_2362_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state23, icmp_ln267_fu_2507_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) and (icmp_ln267_fu_2507_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state23, icmp_ln267_fu_2507_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) and (icmp_ln267_fu_2507_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= inv_init_perm_res_0_reg_546;

    array_temp_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state23, ap_CS_fsm_state12, zext_ln174_1_fu_578_p1, zext_ln270_2_fu_2529_p1, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            array_temp_address0 <= zext_ln270_2_fu_2529_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            array_temp_address0 <= ap_const_lv8_F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            array_temp_address0 <= ap_const_lv8_D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            array_temp_address0 <= ap_const_lv8_B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            array_temp_address0 <= ap_const_lv8_9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            array_temp_address0 <= ap_const_lv8_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            array_temp_address0 <= ap_const_lv8_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            array_temp_address0 <= ap_const_lv8_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            array_temp_address0 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            array_temp_address0 <= zext_ln174_1_fu_578_p1(8 - 1 downto 0);
        else 
            array_temp_address0 <= "XXXXXXXX";
        end if; 
    end process;


    array_temp_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state14, ap_CS_fsm_state12, zext_ln232_fu_2158_p1, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            array_temp_address1 <= zext_ln232_fu_2158_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            array_temp_address1 <= ap_const_lv8_E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            array_temp_address1 <= ap_const_lv8_C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            array_temp_address1 <= ap_const_lv8_A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            array_temp_address1 <= ap_const_lv8_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            array_temp_address1 <= ap_const_lv8_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            array_temp_address1 <= ap_const_lv8_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            array_temp_address1 <= ap_const_lv8_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            array_temp_address1 <= ap_const_lv8_1;
        else 
            array_temp_address1 <= "XXXXXXXX";
        end if; 
    end process;


    array_temp_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state23, ap_CS_fsm_state12, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            array_temp_ce0 <= ap_const_logic_1;
        else 
            array_temp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    array_temp_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state14, ap_CS_fsm_state12, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            array_temp_ce1 <= ap_const_logic_1;
        else 
            array_temp_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    array_temp_d0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state12, or_ln218_s_fu_1032_p49, ap_CS_fsm_state6, or_ln218_3_fu_1426_p49, ap_CS_fsm_state7, or_ln218_5_fu_1532_p49, ap_CS_fsm_state8, or_ln218_7_fu_1638_p49, ap_CS_fsm_state9, or_ln218_9_fu_1744_p49, ap_CS_fsm_state10, or_ln218_11_fu_1850_p49, ap_CS_fsm_state11, or_ln218_13_fu_1956_p49, or_ln218_15_fu_2062_p49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            array_temp_d0 <= or_ln218_15_fu_2062_p49;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            array_temp_d0 <= or_ln218_13_fu_1956_p49;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            array_temp_d0 <= or_ln218_11_fu_1850_p49;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            array_temp_d0 <= or_ln218_9_fu_1744_p49;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            array_temp_d0 <= or_ln218_7_fu_1638_p49;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            array_temp_d0 <= or_ln218_5_fu_1532_p49;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            array_temp_d0 <= or_ln218_3_fu_1426_p49;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            array_temp_d0 <= or_ln218_s_fu_1032_p49;
        else 
            array_temp_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    array_temp_d1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state12, or_ln218_2_fu_1237_p49, ap_CS_fsm_state6, or_ln218_1_fu_1373_p49, ap_CS_fsm_state7, or_ln218_4_fu_1479_p49, ap_CS_fsm_state8, or_ln218_6_fu_1585_p49, ap_CS_fsm_state9, or_ln218_8_fu_1691_p49, ap_CS_fsm_state10, or_ln218_10_fu_1797_p49, ap_CS_fsm_state11, or_ln218_12_fu_1903_p49, or_ln218_14_fu_2009_p49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            array_temp_d1 <= or_ln218_14_fu_2009_p49;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            array_temp_d1 <= or_ln218_12_fu_1903_p49;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            array_temp_d1 <= or_ln218_10_fu_1797_p49;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            array_temp_d1 <= or_ln218_8_fu_1691_p49;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            array_temp_d1 <= or_ln218_6_fu_1585_p49;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            array_temp_d1 <= or_ln218_4_fu_1479_p49;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            array_temp_d1 <= or_ln218_1_fu_1373_p49;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            array_temp_d1 <= or_ln218_2_fu_1237_p49;
        else 
            array_temp_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    array_temp_we0_assign_proc : process(ap_CS_fsm_state4, icmp_ln182_fu_631_p2, ap_CS_fsm_state12, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln182_fu_631_p2 = ap_const_lv1_1)))) then 
            array_temp_we0 <= ap_const_logic_1;
        else 
            array_temp_we0 <= ap_const_logic_0;
        end if; 
    end process;


    array_temp_we1_assign_proc : process(ap_CS_fsm_state4, icmp_ln182_fu_631_p2, ap_CS_fsm_state12, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln182_fu_631_p2 = ap_const_lv1_1)))) then 
            array_temp_we1 <= ap_const_logic_1;
        else 
            array_temp_we1 <= ap_const_logic_0;
        end if; 
    end process;

    f_function_res_fu_2500_p3 <= (trunc_ln254_1_reg_3629 & trunc_ln254_fu_2496_p1);
    i_2_fu_637_p2 <= std_logic_vector(unsigned(i_1_reg_434) + unsigned(ap_const_lv6_1));
    i_5_fu_2513_p2 <= std_logic_vector(unsigned(i_4_reg_535) + unsigned(ap_const_lv7_1));
    i_6_fu_2121_p2 <= std_logic_vector(unsigned(i_3_reg_466) + unsigned(ap_const_lv5_1));
    i_fu_566_p2 <= std_logic_vector(unsigned(i_0_reg_412) + unsigned(ap_const_lv7_1));
    icmp_ln171_fu_560_p2 <= "1" when (i_0_reg_412 = ap_const_lv7_40) else "0";
    icmp_ln182_fu_631_p2 <= "1" when (i_1_reg_434 = ap_const_lv6_38) else "0";
    icmp_ln223_fu_2115_p2 <= "1" when (i_3_reg_466 = ap_const_lv5_10) else "0";
    icmp_ln227_fu_2135_p2 <= "1" when (j_1_reg_490 = ap_const_lv6_30) else "0";
    icmp_ln235_fu_2219_p2 <= "1" when (j_2_reg_501 = ap_const_lv4_8) else "0";
    icmp_ln252_fu_2453_p2 <= "1" when (j_3_reg_524 = ap_const_lv6_20) else "0";
    icmp_ln267_fu_2507_p2 <= "1" when (i_4_reg_535 = ap_const_lv7_40) else "0";
    init_perm_res_fu_624_p3 <= (trunc_ln174_2_reg_2591 & trunc_ln174_1_fu_620_p1);
    inv_init_perm_res_fu_2561_p3 <= (trunc_ln270_2_reg_3657 & trunc_ln270_1_fu_2557_p1);
    j_4_fu_2225_p2 <= std_logic_vector(unsigned(j_2_reg_501) + unsigned(ap_const_lv4_1));
    j_5_fu_2459_p2 <= std_logic_vector(unsigned(j_3_reg_524) + unsigned(ap_const_lv6_1));
    j_fu_2141_p2 <= std_logic_vector(unsigned(j_1_reg_490) + unsigned(ap_const_lv6_1));
    lshr_ln174_fu_615_p2 <= std_logic_vector(shift_right(unsigned(input_r),to_integer(unsigned('0' & zext_ln174_fu_611_p1(31-1 downto 0)))));
    lshr_ln184_fu_1357_p2 <= std_logic_vector(shift_right(unsigned(key),to_integer(unsigned('0' & zext_ln184_fu_1353_p1(31-1 downto 0)))));
    lshr_ln229_fu_2173_p2 <= std_logic_vector(shift_right(unsigned(temp_reg_445),to_integer(unsigned('0' & zext_ln229_1_fu_2169_p1(31-1 downto 0)))));
    lshr_ln240_1_fu_2328_p2 <= std_logic_vector(shift_right(unsigned(and_ln240_fu_2320_p2),to_integer(unsigned('0' & zext_ln240_6_fu_2325_p1(31-1 downto 0)))));
    lshr_ln240_fu_2314_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv48_840000000000),to_integer(unsigned('0' & zext_ln240_4_fu_2310_p1(31-1 downto 0)))));
    lshr_ln243_1_fu_2376_p2 <= std_logic_vector(shift_right(unsigned(and_ln243_fu_2368_p2),to_integer(unsigned('0' & zext_ln243_fu_2373_p1(31-1 downto 0)))));
    lshr_ln243_fu_2362_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv47_780000000000),to_integer(unsigned('0' & zext_ln240_3_fu_2306_p1(31-1 downto 0)))));
    lshr_ln254_fu_2490_p2 <= std_logic_vector(shift_right(unsigned(s_output_1_fu_284),to_integer(unsigned('0' & zext_ln254_1_fu_2486_p1(31-1 downto 0)))));
    lshr_ln270_fu_2552_p2 <= std_logic_vector(shift_right(unsigned(pre_output_reg_3545),to_integer(unsigned('0' & zext_ln270_fu_2548_p1(31-1 downto 0)))));
    or_ln212_fu_1159_p2 <= (trunc_ln198_s_fu_1137_p4 or tmp_5_fu_1151_p3);
    or_ln218_10_fu_1797_p49 <= (((((((((((((((((((((((((((((((((((((((((((((((tmp_18_reg_2922 & tmp_22_reg_2985) & tmp_9_reg_2783) & tmp_6_reg_2734) & tmp_16_reg_2890) & tmp_15_reg_2875) & tmp_13_reg_2845) & tmp_48_reg_3400) & tmp_10_reg_2798) & tmp_8_reg_2766) & tmp_7_reg_2749) & tmp_reg_2636) & tmp_24_reg_3017) & tmp_54_reg_3448) & tmp_25_reg_3034) & tmp_53_reg_3431) & tmp_21_reg_2970) & tmp_19_reg_2938) & tmp_12_reg_2829) & tmp_52_reg_3416) & tmp_4_reg_2718) & tmp_14_reg_2860) & tmp_11_reg_2814) & tmp_23_reg_3001) & tmp_28_reg_3082) & tmp_43_reg_3320) & tmp_38_reg_3241) & trunc_ln198_reg_2669) & tmp_29_reg_3097) & tmp_34_reg_3178) & tmp_36_reg_3210) & tmp_31_reg_3129) & tmp_26_reg_3051) & tmp_56_reg_3483) & tmp_33_reg_3162) & tmp_55_reg_3466) & tmp_40_reg_3273) & tmp_39_reg_3257) & tmp_46_reg_3368) & tmp_42_reg_3305) & tmp_27_reg_3067) & tmp_58_reg_3515) & tmp_45_reg_3351) & tmp_47_reg_3383) & tmp_32_reg_3146) & tmp_57_reg_3499) & tmp_30_reg_3112) & tmp_44_reg_3335);
    or_ln218_11_fu_1850_p49 <= (((((((((((((((((((((((((((((((((((((((((((((((tmp_12_reg_2829 & tmp_54_reg_3448) & tmp_11_reg_2814) & tmp_21_reg_2970) & tmp_13_reg_2845) & tmp_52_reg_3416) & tmp_15_reg_2875) & tmp_23_reg_3001) & tmp_22_reg_2985) & tmp_19_reg_2938) & tmp_24_reg_3017) & tmp_25_reg_3034) & tmp_3_reg_2701) & tmp_7_reg_2749) & tmp_18_reg_2922) & tmp_8_reg_2766) & tmp_48_reg_3400) & tmp_reg_2636) & tmp_20_reg_2956) & tmp_2_reg_2686) & tmp_16_reg_2890) & tmp_17_reg_2907) & tmp_10_reg_2798) & tmp_53_reg_3431) & tmp_35_reg_3195) & tmp_37_reg_3225) & tmp_33_reg_3162) & tmp_46_reg_3368) & tmp_39_reg_3257) & tmp_30_reg_3112) & tmp_44_reg_3335) & tmp_47_reg_3383) & tmp_58_reg_3515) & tmp_29_reg_3097) & tmp_41_reg_3289) & tmp_32_reg_3146) & tmp_45_reg_3351) & tmp_26_reg_3051) & tmp_28_reg_3082) & tmp_36_reg_3210) & tmp_57_reg_3499) & tmp_34_reg_3178) & tmp_55_reg_3466) & tmp_40_reg_3273) & tmp_43_reg_3320) & tmp_1_reg_2653) & tmp_38_reg_3241) & tmp_27_reg_3067);
    or_ln218_12_fu_1903_p49 <= (((((((((((((((((((((((((((((((((((((((((((((((tmp_20_reg_2956 & tmp_7_reg_2749) & tmp_10_reg_2798) & tmp_48_reg_3400) & tmp_15_reg_2875) & tmp_2_reg_2686) & tmp_52_reg_3416) & tmp_53_reg_3431) & tmp_54_reg_3448) & tmp_reg_2636) & tmp_3_reg_2701) & tmp_18_reg_2922) & tmp_4_reg_2718) & tmp_24_reg_3017) & tmp_12_reg_2829) & tmp_19_reg_2938) & tmp_23_reg_3001) & tmp_25_reg_3034) & tmp_14_reg_2860) & tmp_9_reg_2783) & tmp_13_reg_2845) & tmp_6_reg_2734) & tmp_22_reg_2985) & tmp_8_reg_2766) & tmp_56_reg_3483) & tmp_42_reg_3305) & tmp_41_reg_3289) & tmp_28_reg_3082) & tmp_26_reg_3051) & tmp_38_reg_3241) & tmp_27_reg_3067) & tmp_40_reg_3273) & tmp_34_reg_3178) & tmp_39_reg_3257) & trunc_ln198_reg_2669) & tmp_43_reg_3320) & tmp_55_reg_3466) & tmp_58_reg_3515) & tmp_35_reg_3195) & tmp_44_reg_3335) & tmp_1_reg_2653) & tmp_30_reg_3112) & tmp_32_reg_3146) & tmp_45_reg_3351) & tmp_37_reg_3225) & tmp_31_reg_3129) & tmp_33_reg_3162) & tmp_57_reg_3499);
    or_ln218_13_fu_1956_p49 <= (((((((((((((((((((((((((((((((((((((((((((((((tmp_14_reg_2860 & tmp_24_reg_3017) & tmp_22_reg_2985) & tmp_23_reg_3001) & tmp_52_reg_3416) & tmp_9_reg_2783) & tmp_2_reg_2686) & tmp_8_reg_2766) & tmp_7_reg_2749) & tmp_25_reg_3034) & tmp_4_reg_2718) & tmp_12_reg_2829) & tmp_16_reg_2890) & tmp_3_reg_2701) & tmp_20_reg_2956) & tmp_reg_2636) & tmp_53_reg_3431) & tmp_18_reg_2922) & tmp_17_reg_2907) & tmp_11_reg_2814) & tmp_15_reg_2875) & tmp_21_reg_2970) & tmp_54_reg_3448) & tmp_19_reg_2938) & tmp_29_reg_3097) & tmp_36_reg_3210) & trunc_ln198_reg_2669) & tmp_35_reg_3195) & tmp_58_reg_3515) & tmp_33_reg_3162) & tmp_57_reg_3499) & tmp_45_reg_3351) & tmp_30_reg_3112) & tmp_26_reg_3051) & tmp_46_reg_3368) & tmp_37_reg_3225) & tmp_32_reg_3146) & tmp_34_reg_3178) & tmp_56_reg_3483) & tmp_27_reg_3067) & tmp_31_reg_3129) & tmp_38_reg_3241) & tmp_43_reg_3320) & tmp_55_reg_3466) & tmp_42_reg_3305) & tmp_47_reg_3383) & tmp_41_reg_3289) & tmp_1_reg_2653);
    or_ln218_14_fu_2009_p49 <= (((((((((((((((((((((((((((((((((((((((((((((((tmp_17_reg_2907 & tmp_3_reg_2701) & tmp_54_reg_3448) & tmp_53_reg_3431) & tmp_2_reg_2686) & tmp_11_reg_2814) & tmp_9_reg_2783) & tmp_19_reg_2938) & tmp_24_reg_3017) & tmp_18_reg_2922) & tmp_16_reg_2890) & tmp_20_reg_2956) & tmp_13_reg_2845) & tmp_4_reg_2718) & tmp_14_reg_2860) & tmp_25_reg_3034) & tmp_8_reg_2766) & tmp_12_reg_2829) & tmp_6_reg_2734) & tmp_10_reg_2798) & tmp_52_reg_3416) & tmp_48_reg_3400) & tmp_7_reg_2749) & tmp_reg_2636) & tmp_39_reg_3257) & tmp_44_reg_3335) & tmp_46_reg_3368) & tmp_56_reg_3483) & tmp_34_reg_3178) & tmp_41_reg_3289) & tmp_1_reg_2653) & tmp_55_reg_3466) & tmp_38_reg_3241) & tmp_58_reg_3515) & tmp_28_reg_3082) & tmp_42_reg_3305) & tmp_43_reg_3320) & tmp_30_reg_3112) & tmp_29_reg_3097) & tmp_57_reg_3499) & tmp_47_reg_3383) & tmp_33_reg_3162) & tmp_37_reg_3225) & tmp_32_reg_3146) & tmp_36_reg_3210) & tmp_40_reg_3273) & trunc_ln198_reg_2669) & tmp_31_reg_3129);
    or_ln218_15_fu_2062_p49 <= (((((((((((((((((((((((((((((((((((((((((((((((tmp_24_reg_3017 & tmp_21_reg_2970) & tmp_14_reg_2860) & tmp_15_reg_2875) & tmp_reg_2636) & tmp_18_reg_2922) & tmp_25_reg_3034) & tmp_2_reg_2686) & tmp_6_reg_2734) & tmp_10_reg_2798) & tmp_23_reg_3001) & tmp_54_reg_3448) & tmp_53_reg_3431) & tmp_48_reg_3400) & tmp_7_reg_2749) & tmp_11_reg_2814) & tmp_52_reg_3416) & tmp_22_reg_2985) & tmp_3_reg_2701) & tmp_12_reg_2829) & tmp_19_reg_2938) & tmp_16_reg_2890) & tmp_17_reg_2907) & tmp_9_reg_2783) & tmp_32_reg_3146) & tmp_33_reg_3162) & tmp_31_reg_3129) & tmp_45_reg_3351) & tmp_42_reg_3305) & tmp_57_reg_3499) & tmp_46_reg_3368) & tmp_39_reg_3257) & tmp_44_reg_3335) & tmp_37_reg_3225) & tmp_47_reg_3383) & tmp_30_reg_3112) & tmp_58_reg_3515) & tmp_36_reg_3210) & tmp_55_reg_3466) & trunc_ln198_reg_2669) & tmp_35_reg_3195) & tmp_27_reg_3067) & tmp_34_reg_3178) & tmp_26_reg_3051) & tmp_38_reg_3241) & tmp_56_reg_3483) & tmp_1_reg_2653) & tmp_28_reg_3082);
    or_ln218_1_fu_1373_p49 <= (((((((((((((((((((((((((((((((((((((((((((((((tmp_4_reg_2718 & tmp_23_reg_3001) & tmp_6_reg_2734) & tmp_2_reg_2686) & tmp_18_reg_2922) & tmp_20_reg_2956) & tmp_12_reg_2829) & tmp_11_reg_2814) & tmp_48_reg_3400) & tmp_54_reg_3448) & tmp_8_reg_2766) & tmp_24_reg_3017) & tmp_19_reg_2938) & tmp_53_reg_3431) & tmp_3_reg_2701) & tmp_22_reg_2985) & tmp_9_reg_2783) & tmp_7_reg_2749) & tmp_16_reg_2890) & tmp_14_reg_2860) & tmp_25_reg_3034) & tmp_15_reg_2875) & tmp_21_reg_2970) & tmp_10_reg_2798) & tmp_37_reg_3225) & trunc_ln198_reg_2669) & tmp_40_reg_3273) & tmp_32_reg_3146) & tmp_44_reg_3335) & tmp_31_reg_3129) & tmp_35_reg_3195) & tmp_58_reg_3515) & tmp_57_reg_3499) & tmp_36_reg_3210) & tmp_45_reg_3351) & tmp_33_reg_3162) & tmp_30_reg_3112) & tmp_27_reg_3067) & tmp_43_reg_3320) & tmp_28_reg_3082) & tmp_29_reg_3097) & tmp_1_reg_2653) & tmp_38_reg_3241) & tmp_34_reg_3178) & tmp_41_reg_3289) & tmp_39_reg_3257) & tmp_47_reg_3383) & tmp_56_reg_3483);
    or_ln218_2_fu_1237_p49 <= (((((((((((((((((((((((((((((((((((((((((((((((tmp_3_fu_680_p3 & tmp_48_fu_1165_p3) & tmp_17_fu_784_p3) & tmp_52_fu_1173_p3) & tmp_25_fu_848_p3) & tmp_12_fu_744_p3) & tmp_18_fu_792_p3) & tmp_9_fu_720_p3) & tmp_21_fu_816_p3) & tmp_22_fu_824_p3) & tmp_53_fu_1181_p3) & tmp_7_fu_704_p3) & tmp_8_fu_712_p3) & tmp_23_fu_832_p3) & tmp_24_fu_840_p3) & tmp_10_fu_728_p3) & tmp_2_fu_672_p3) & tmp_54_fu_1189_p3) & tmp_4_fu_688_p3) & tmp_20_fu_808_p3) & tmp_fu_652_p3) & tmp_13_fu_752_p3) & tmp_6_fu_696_p3) & tmp_11_fu_736_p3) & tmp_43_fu_992_p3) & tmp_41_fu_976_p3) & tmp_47_fu_1024_p3) & tmp_55_fu_1197_p3) & tmp_36_fu_936_p3) & tmp_1_fu_660_p3) & tmp_28_fu_872_p3) & tmp_26_fu_856_p3) & tmp_27_fu_864_p3) & tmp_42_fu_984_p3) & tmp_40_fu_968_p3) & tmp_38_fu_952_p3) & tmp_34_fu_920_p3) & tmp_44_fu_1000_p3) & tmp_32_fu_904_p3) & tmp_46_fu_1016_p3) & tmp_56_fu_1205_p3) & tmp_57_fu_1213_p3) & tmp_30_fu_888_p3) & tmp_58_fu_1221_p3) & tmp_33_fu_912_p3) & tmp_29_fu_880_p3) & tmp_59_fu_1229_p3) & tmp_35_fu_928_p3);
    or_ln218_3_fu_1426_p49 <= (((((((((((((((((((((((((((((((((((((((((((((((tmp_16_reg_2890 & tmp_53_reg_3431) & tmp_21_reg_2970) & tmp_9_reg_2783) & tmp_12_reg_2829) & tmp_14_reg_2860) & tmp_20_reg_2956) & tmp_10_reg_2798) & tmp_23_reg_3001) & tmp_7_reg_2749) & tmp_19_reg_2938) & tmp_3_reg_2701) & tmp_reg_2636) & tmp_8_reg_2766) & tmp_4_reg_2718) & tmp_54_reg_3448) & tmp_11_reg_2814) & tmp_24_reg_3017) & tmp_13_reg_2845) & tmp_17_reg_2907) & tmp_18_reg_2922) & tmp_52_reg_3416) & tmp_48_reg_3400) & tmp_22_reg_2985) & tmp_42_reg_3305) & tmp_46_reg_3368) & tmp_45_reg_3351) & tmp_43_reg_3320) & tmp_27_reg_3067) & tmp_47_reg_3383) & tmp_56_reg_3483) & tmp_34_reg_3178) & tmp_1_reg_2653) & tmp_44_reg_3335) & tmp_55_reg_3466) & tmp_41_reg_3289) & tmp_38_reg_3241) & tmp_57_reg_3499) & tmp_37_reg_3225) & tmp_35_reg_3195) & tmp_39_reg_3257) & tmp_31_reg_3129) & tmp_33_reg_3162) & tmp_30_reg_3112) & trunc_ln198_reg_2669) & tmp_26_reg_3051) & tmp_40_reg_3273) & tmp_29_reg_3097);
    or_ln218_4_fu_1479_p49 <= (((((((((((((((((((((((((((((((((((((((((((((((tmp_13_reg_2845 & tmp_8_reg_2766) & tmp_48_reg_3400) & tmp_11_reg_2814) & tmp_20_reg_2956) & tmp_17_reg_2907) & tmp_14_reg_2860) & tmp_22_reg_2985) & tmp_53_reg_3431) & tmp_24_reg_3017) & tmp_reg_2636) & tmp_4_reg_2718) & tmp_25_reg_3034) & tmp_19_reg_2938) & tmp_16_reg_2890) & tmp_7_reg_2749) & tmp_10_reg_2798) & tmp_3_reg_2701) & tmp_15_reg_2875) & tmp_6_reg_2734) & tmp_12_reg_2829) & tmp_2_reg_2686) & tmp_23_reg_3001) & tmp_54_reg_3448) & tmp_36_reg_3210) & tmp_28_reg_3082) & tmp_55_reg_3466) & tmp_37_reg_3225) & tmp_57_reg_3499) & tmp_40_reg_3273) & tmp_29_reg_3097) & tmp_30_reg_3112) & tmp_31_reg_3129) & tmp_27_reg_3067) & tmp_32_reg_3146) & trunc_ln198_reg_2669) & tmp_33_reg_3162) & tmp_1_reg_2653) & tmp_42_reg_3305) & tmp_56_reg_3483) & tmp_26_reg_3051) & tmp_47_reg_3383) & tmp_41_reg_3289) & tmp_38_reg_3241) & tmp_46_reg_3368) & tmp_58_reg_3515) & tmp_45_reg_3351) & tmp_39_reg_3257);
    or_ln218_5_fu_1532_p49 <= (((((((((((((((((((((((((((((((((((((((((((((((tmp_15_reg_2875 & tmp_19_reg_2938) & tmp_23_reg_3001) & tmp_10_reg_2798) & tmp_14_reg_2860) & tmp_6_reg_2734) & tmp_17_reg_2907) & tmp_54_reg_3448) & tmp_8_reg_2766) & tmp_3_reg_2701) & tmp_25_reg_3034) & tmp_16_reg_2890) & tmp_18_reg_2922) & tmp_reg_2636) & tmp_13_reg_2845) & tmp_24_reg_3017) & tmp_22_reg_2985) & tmp_4_reg_2718) & tmp_52_reg_3416) & tmp_21_reg_2970) & tmp_20_reg_2956) & tmp_9_reg_2783) & tmp_53_reg_3431) & tmp_7_reg_2749) & tmp_44_reg_3335) & tmp_35_reg_3195) & tmp_32_reg_3146) & tmp_42_reg_3305) & tmp_1_reg_2653) & tmp_45_reg_3351) & tmp_39_reg_3257) & tmp_38_reg_3241) & tmp_47_reg_3383) & tmp_57_reg_3499) & tmp_43_reg_3320) & tmp_46_reg_3368) & tmp_41_reg_3289) & tmp_31_reg_3129) & tmp_36_reg_3210) & tmp_29_reg_3097) & tmp_58_reg_3515) & tmp_40_reg_3273) & trunc_ln198_reg_2669) & tmp_33_reg_3162) & tmp_28_reg_3082) & tmp_34_reg_3178) & tmp_55_reg_3466) & tmp_26_reg_3051);
    or_ln218_6_fu_1585_p49 <= (((((((((((((((((((((((((((((((((((((((((((((((tmp_52_reg_3416 & tmp_reg_2636) & tmp_53_reg_3431) & tmp_22_reg_2985) & tmp_17_reg_2907) & tmp_21_reg_2970) & tmp_6_reg_2734) & tmp_7_reg_2749) & tmp_19_reg_2938) & tmp_4_reg_2718) & tmp_18_reg_2922) & tmp_13_reg_2845) & tmp_12_reg_2829) & tmp_25_reg_3034) & tmp_15_reg_2875) & tmp_3_reg_2701) & tmp_54_reg_3448) & tmp_16_reg_2890) & tmp_2_reg_2686) & tmp_48_reg_3400) & tmp_14_reg_2860) & tmp_11_reg_2814) & tmp_8_reg_2766) & tmp_24_reg_3017) & tmp_27_reg_3067) & tmp_56_reg_3483) & tmp_43_reg_3320) & tmp_36_reg_3210) & tmp_31_reg_3129) & tmp_55_reg_3466) & tmp_26_reg_3051) & tmp_33_reg_3162) & tmp_40_reg_3273) & tmp_1_reg_2653) & tmp_37_reg_3225) & tmp_28_reg_3082) & trunc_ln198_reg_2669) & tmp_47_reg_3383) & tmp_44_reg_3335) & tmp_39_reg_3257) & tmp_34_reg_3178) & tmp_45_reg_3351) & tmp_46_reg_3368) & tmp_41_reg_3289) & tmp_35_reg_3195) & tmp_30_reg_3112) & tmp_32_reg_3146) & tmp_58_reg_3515);
    or_ln218_7_fu_1638_p49 <= (((((((((((((((((((((((((((((((((((((((((((((((tmp_2_reg_2686 & tmp_25_reg_3034) & tmp_8_reg_2766) & tmp_54_reg_3448) & tmp_6_reg_2734) & tmp_48_reg_3400) & tmp_21_reg_2970) & tmp_24_reg_3017) & tmp_reg_2636) & tmp_16_reg_2890) & tmp_12_reg_2829) & tmp_15_reg_2875) & tmp_20_reg_2956) & tmp_18_reg_2922) & tmp_52_reg_3416) & tmp_4_reg_2718) & tmp_7_reg_2749) & tmp_13_reg_2845) & tmp_9_reg_2783) & tmp_23_reg_3001) & tmp_17_reg_2907) & tmp_10_reg_2798) & tmp_19_reg_2938) & tmp_3_reg_2701) & tmp_57_reg_3499) & tmp_29_reg_3097) & tmp_37_reg_3225) & tmp_44_reg_3335) & tmp_47_reg_3383) & tmp_32_reg_3146) & tmp_58_reg_3515) & tmp_41_reg_3289) & tmp_45_reg_3351) & tmp_31_reg_3129) & tmp_42_reg_3305) & tmp_35_reg_3195) & tmp_46_reg_3368) & tmp_40_reg_3273) & tmp_27_reg_3067) & tmp_26_reg_3051) & tmp_30_reg_3112) & tmp_55_reg_3466) & tmp_28_reg_3082) & trunc_ln198_reg_2669) & tmp_56_reg_3483) & tmp_38_reg_3241) & tmp_43_reg_3320) & tmp_34_reg_3178);
    or_ln218_8_fu_1691_p49 <= (((((((((((((((((((((((((((((((((((((((((((((((tmp_reg_2636 & tmp_11_reg_2814) & tmp_52_reg_3416) & tmp_14_reg_2860) & tmp_3_reg_2701) & tmp_16_reg_2890) & tmp_4_reg_2718) & tmp_6_reg_2734) & tmp_9_reg_2783) & tmp_23_reg_3001) & tmp_22_reg_2985) & tmp_8_reg_2766) & tmp_54_reg_3448) & tmp_10_reg_2798) & tmp_19_reg_2938) & tmp_48_reg_3400) & tmp_17_reg_2907) & tmp_53_reg_3431) & tmp_25_reg_3034) & tmp_13_reg_2845) & tmp_24_reg_3017) & tmp_12_reg_2829) & tmp_2_reg_2686) & tmp_21_reg_2970) & trunc_ln198_reg_2669) & tmp_55_reg_3466) & tmp_34_reg_3178) & tmp_33_reg_3162) & tmp_35_reg_3195) & tmp_26_reg_3051) & tmp_37_reg_3225) & tmp_57_reg_3499) & tmp_29_reg_3097) & tmp_28_reg_3082) & tmp_30_reg_3112) & tmp_40_reg_3273) & tmp_31_reg_3129) & tmp_56_reg_3483) & tmp_41_reg_3289) & tmp_43_reg_3320) & tmp_36_reg_3210) & tmp_39_reg_3257) & tmp_47_reg_3383) & tmp_1_reg_2653) & tmp_45_reg_3351) & tmp_44_reg_3335) & tmp_58_reg_3515) & tmp_42_reg_3305);
    or_ln218_9_fu_1744_p49 <= (((((((((((((((((((((((((((((((((((((((((((((((tmp_25_reg_3034 & tmp_10_reg_2798) & tmp_2_reg_2686) & tmp_17_reg_2907) & tmp_4_reg_2718) & tmp_13_reg_2845) & tmp_16_reg_2890) & tmp_21_reg_2970) & tmp_11_reg_2814) & tmp_53_reg_3431) & tmp_54_reg_3448) & tmp_19_reg_2938) & tmp_7_reg_2749) & tmp_22_reg_2985) & tmp_reg_2636) & tmp_23_reg_3001) & tmp_6_reg_2734) & tmp_8_reg_2766) & tmp_18_reg_2922) & tmp_15_reg_2875) & tmp_3_reg_2701) & tmp_20_reg_2956) & tmp_9_reg_2783) & tmp_48_reg_3400) & tmp_46_reg_3368) & tmp_32_reg_3146) & tmp_30_reg_3112) & tmp_41_reg_3289) & tmp_56_reg_3483) & tmp_58_reg_3515) & tmp_42_reg_3305) & tmp_1_reg_2653) & tmp_39_reg_3257) & tmp_35_reg_3195) & tmp_38_reg_3241) & tmp_45_reg_3351) & tmp_47_reg_3383) & tmp_29_reg_3097) & trunc_ln198_reg_2669) & tmp_37_reg_3225) & tmp_44_reg_3335) & tmp_26_reg_3051) & tmp_40_reg_3273) & tmp_31_reg_3129) & tmp_55_reg_3466) & tmp_27_reg_3067) & tmp_34_reg_3178) & tmp_36_reg_3210);
    or_ln218_s_fu_1032_p49 <= (((((((((((((((((((((((((((((((((((((((((((((((tmp_6_fu_696_p3 & tmp_4_fu_688_p3) & tmp_7_fu_704_p3) & tmp_8_fu_712_p3) & tmp_9_fu_720_p3) & tmp_10_fu_728_p3) & tmp_11_fu_736_p3) & tmp_fu_652_p3) & tmp_3_fu_680_p3) & tmp_12_fu_744_p3) & tmp_13_fu_752_p3) & tmp_14_fu_760_p3) & tmp_15_fu_768_p3) & tmp_16_fu_776_p3) & tmp_17_fu_784_p3) & tmp_18_fu_792_p3) & tmp_19_fu_800_p3) & tmp_20_fu_808_p3) & tmp_21_fu_816_p3) & tmp_22_fu_824_p3) & tmp_2_fu_672_p3) & tmp_23_fu_832_p3) & tmp_24_fu_840_p3) & tmp_25_fu_848_p3) & tmp_26_fu_856_p3) & tmp_27_fu_864_p3) & tmp_28_fu_872_p3) & tmp_29_fu_880_p3) & tmp_30_fu_888_p3) & trunc_ln198_fu_668_p1) & tmp_31_fu_896_p3) & tmp_32_fu_904_p3) & tmp_33_fu_912_p3) & tmp_34_fu_920_p3) & tmp_35_fu_928_p3) & tmp_36_fu_936_p3) & tmp_37_fu_944_p3) & tmp_38_fu_952_p3) & tmp_39_fu_960_p3) & tmp_1_fu_660_p3) & tmp_40_fu_968_p3) & tmp_41_fu_976_p3) & tmp_42_fu_984_p3) & tmp_43_fu_992_p3) & tmp_44_fu_1000_p3) & tmp_45_fu_1008_p3) & tmp_46_fu_1016_p3) & tmp_47_fu_1024_p3);
    or_ln241_fu_2346_p2 <= (trunc_ln240_1_fu_2334_p1 or tmp_60_fu_2338_p3);
    permuted_choice_1_fu_1366_p3 <= (trunc_ln184_1_reg_2624 & trunc_ln184_fu_1362_p1);
    pre_output_fu_2127_p3 <= (temp_reg_445 & L_0_reg_455);
    s_input_fu_2187_p3 <= (trunc_ln229_1_fu_2183_p1 & trunc_ln229_fu_2179_p1);
    s_output_fu_2440_p3 <= (trunc_ln246_1_fu_2436_p1 & S_q0);
        sext_ln240_fu_2303_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln240_reg_3591),32));

        sext_ln246_1_fu_2400_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln246_fu_2396_p1),9));

        sext_ln246_2_fu_2410_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln246_fu_2404_p2),11));

        sext_ln246_3_fu_2432_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln246_1_reg_3606),64));

        sext_ln246_fu_2392_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_50_fu_2382_p4),9));

    shl_ln240_1_fu_2267_p3 <= (trunc_ln240_fu_2231_p1 & ap_const_lv2_0);
    shl_ln240_fu_2247_p2 <= std_logic_vector(shift_left(unsigned(j_2_reg_501),to_integer(unsigned('0' & ap_const_lv4_1(4-1 downto 0)))));
    shl_ln_fu_2235_p3 <= (trunc_ln240_fu_2231_p1 & ap_const_lv3_0);
    sub_ln174_fu_605_p2 <= std_logic_vector(signed(ap_const_lv7_40) - signed(trunc_ln174_fu_601_p1));
    sub_ln184_fu_1347_p2 <= std_logic_vector(signed(ap_const_lv7_40) - signed(zext_ln184_2_fu_1343_p1));
    sub_ln229_fu_2163_p2 <= std_logic_vector(signed(ap_const_lv6_20) - signed(E_q0));
    sub_ln232_fu_2152_p2 <= std_logic_vector(unsigned(ap_const_lv5_F) - unsigned(i_3_reg_466));
    sub_ln240_1_fu_2279_p2 <= std_logic_vector(signed(ap_const_lv6_2A) - signed(zext_ln240_1_fu_2253_p1));
    sub_ln240_2_fu_2285_p2 <= std_logic_vector(unsigned(sub_ln240_1_fu_2279_p2) - unsigned(zext_ln240_5_fu_2275_p1));
    sub_ln240_fu_2261_p2 <= std_logic_vector(unsigned(zext_ln240_fu_2243_p1) - unsigned(zext_ln240_2_fu_2257_p1));
    sub_ln243_1_fu_2297_p2 <= std_logic_vector(unsigned(sub_ln243_fu_2291_p2) - unsigned(zext_ln240_5_fu_2275_p1));
    sub_ln243_fu_2291_p2 <= std_logic_vector(signed(ap_const_lv6_2B) - signed(zext_ln240_1_fu_2253_p1));
    sub_ln254_fu_2480_p2 <= std_logic_vector(signed(ap_const_lv6_20) - signed(P_q0));
    sub_ln270_fu_2542_p2 <= std_logic_vector(signed(ap_const_lv7_40) - signed(trunc_ln270_fu_2538_p1));
    tmp_10_fu_728_p3 <= permuted_choice_1_0_reg_423(50 downto 50);
    tmp_11_fu_736_p3 <= permuted_choice_1_0_reg_423(52 downto 52);
    tmp_12_fu_744_p3 <= permuted_choice_1_0_reg_423(49 downto 49);
    tmp_13_fu_752_p3 <= permuted_choice_1_0_reg_423(34 downto 34);
    tmp_14_fu_760_p3 <= permuted_choice_1_0_reg_423(45 downto 45);
    tmp_15_fu_768_p3 <= permuted_choice_1_0_reg_423(32 downto 32);
    tmp_16_fu_776_p3 <= permuted_choice_1_0_reg_423(36 downto 36);
    tmp_17_fu_784_p3 <= permuted_choice_1_0_reg_423(43 downto 43);
    tmp_18_fu_792_p3 <= permuted_choice_1_0_reg_423(51 downto 51);
    tmp_19_fu_800_p3 <= permuted_choice_1_0_reg_423(29 downto 29);
    tmp_1_fu_660_p3 <= permuted_choice_1_0_reg_423(27 downto 27);
    tmp_20_fu_808_p3 <= permuted_choice_1_0_reg_423(47 downto 47);
    tmp_21_fu_816_p3 <= permuted_choice_1_0_reg_423(39 downto 39);
    tmp_22_fu_824_p3 <= permuted_choice_1_0_reg_423(48 downto 48);
    tmp_23_fu_832_p3 <= permuted_choice_1_0_reg_423(35 downto 35);
    tmp_24_fu_840_p3 <= permuted_choice_1_0_reg_423(42 downto 42);
    tmp_25_fu_848_p3 <= permuted_choice_1_0_reg_423(53 downto 53);
    tmp_26_fu_856_p3 <= permuted_choice_1_0_reg_423(14 downto 14);
    tmp_27_fu_864_p3 <= permuted_choice_1_0_reg_423(3 downto 3);
    tmp_28_fu_872_p3 <= permuted_choice_1_0_reg_423(24 downto 24);
    tmp_29_fu_880_p3 <= permuted_choice_1_0_reg_423(18 downto 18);
    tmp_2_fu_672_p3 <= permuted_choice_1_0_reg_423(28 downto 28);
    tmp_30_fu_888_p3 <= permuted_choice_1_0_reg_423(8 downto 8);
    tmp_31_fu_896_p3 <= permuted_choice_1_0_reg_423(25 downto 25);
    tmp_32_fu_904_p3 <= permuted_choice_1_0_reg_423(15 downto 15);
    tmp_33_fu_912_p3 <= permuted_choice_1_0_reg_423(4 downto 4);
    tmp_34_fu_920_p3 <= permuted_choice_1_0_reg_423(10 downto 10);
    tmp_35_fu_928_p3 <= permuted_choice_1_0_reg_423(22 downto 22);
    tmp_36_fu_936_p3 <= permuted_choice_1_0_reg_423(7 downto 7);
    tmp_37_fu_944_p3 <= permuted_choice_1_0_reg_423(11 downto 11);
    tmp_38_fu_952_p3 <= permuted_choice_1_0_reg_423(6 downto 6);
    tmp_39_fu_960_p3 <= permuted_choice_1_0_reg_423(16 downto 16);
    tmp_3_fu_680_p3 <= permuted_choice_1_0_reg_423(40 downto 40);
    tmp_40_fu_968_p3 <= permuted_choice_1_0_reg_423(21 downto 21);
    tmp_41_fu_976_p3 <= permuted_choice_1_0_reg_423(2 downto 2);
    tmp_42_fu_984_p3 <= permuted_choice_1_0_reg_423(9 downto 9);
    tmp_43_fu_992_p3 <= permuted_choice_1_0_reg_423(13 downto 13);
    tmp_44_fu_1000_p3 <= permuted_choice_1_0_reg_423(5 downto 5);
    tmp_45_fu_1008_p3 <= permuted_choice_1_0_reg_423(19 downto 19);
    tmp_46_fu_1016_p3 <= permuted_choice_1_0_reg_423(26 downto 26);
    tmp_47_fu_1024_p3 <= permuted_choice_1_0_reg_423(23 downto 23);
    tmp_48_fu_1165_p3 <= permuted_choice_1_0_reg_423(37 downto 37);
    tmp_49_fu_2352_p4 <= lshr_ln240_1_fu_2328_p2(7 downto 5);
    tmp_4_fu_688_p3 <= permuted_choice_1_0_reg_423(38 downto 38);
    tmp_50_fu_2382_p4 <= ((tmp_49_fu_2352_p4 & or_ln241_fu_2346_p2) & ap_const_lv4_0);
    tmp_51_fu_2414_p3 <= (j_2_reg_501 & ap_const_lv6_0);
    tmp_52_fu_1173_p3 <= permuted_choice_1_0_reg_423(30 downto 30);
    tmp_53_fu_1181_p3 <= permuted_choice_1_0_reg_423(33 downto 33);
    tmp_54_fu_1189_p3 <= permuted_choice_1_0_reg_423(46 downto 46);
    tmp_55_fu_1197_p3 <= permuted_choice_1_0_reg_423(17 downto 17);
    tmp_56_fu_1205_p3 <= permuted_choice_1_0_reg_423(20 downto 20);
    tmp_57_fu_1213_p3 <= permuted_choice_1_0_reg_423(1 downto 1);
    tmp_58_fu_1221_p3 <= permuted_choice_1_0_reg_423(12 downto 12);
    tmp_59_fu_1229_p3 <= or_ln212_fu_1159_p2(27 downto 27);
    tmp_5_fu_1151_p3 <= (ap_const_lv1_0 & zext_ln198_fu_1147_p1);
    tmp_60_fu_2338_p3 <= lshr_ln240_1_fu_2328_p2(4 downto 4);
    tmp_6_fu_696_p3 <= permuted_choice_1_0_reg_423(41 downto 41);
    tmp_7_fu_704_p3 <= permuted_choice_1_0_reg_423(44 downto 44);
    tmp_8_fu_712_p3 <= permuted_choice_1_0_reg_423(31 downto 31);
    tmp_9_fu_720_p3 <= permuted_choice_1_0_reg_423(54 downto 54);
    tmp_fu_652_p3 <= permuted_choice_1_0_reg_423(55 downto 55);
    trunc_ln174_1_fu_620_p1 <= lshr_ln174_fu_615_p2(1 - 1 downto 0);
    trunc_ln174_2_fu_583_p1 <= init_perm_res_0_reg_401(63 - 1 downto 0);
    trunc_ln174_fu_601_p1 <= array_temp_q0(7 - 1 downto 0);
    trunc_ln184_1_fu_648_p1 <= permuted_choice_1_0_reg_423(63 - 1 downto 0);
    trunc_ln184_fu_1362_p1 <= lshr_ln184_fu_1357_p2(1 - 1 downto 0);
    trunc_ln198_1_fu_1133_p1 <= permuted_choice_1_0_reg_423(26 - 1 downto 0);
    trunc_ln198_fu_668_p1 <= permuted_choice_1_0_reg_423(1 - 1 downto 0);
    trunc_ln198_s_fu_1137_p4 <= ((trunc_ln198_1_fu_1133_p1 & tmp_1_fu_660_p3) & ap_const_lv1_0);
    trunc_ln229_1_fu_2183_p1 <= s_input_0_reg_478(63 - 1 downto 0);
    trunc_ln229_fu_2179_p1 <= lshr_ln229_fu_2173_p2(1 - 1 downto 0);
    trunc_ln232_1_fu_2199_p1 <= s_input_0_reg_478(47 - 1 downto 0);
    trunc_ln232_2_fu_2203_p1 <= array_temp_q1(47 - 1 downto 0);
    trunc_ln232_fu_2195_p1 <= s_input_0_reg_478(48 - 1 downto 0);
    trunc_ln240_1_fu_2334_p1 <= lshr_ln240_1_fu_2328_p2(1 - 1 downto 0);
    trunc_ln240_fu_2231_p1 <= j_2_reg_501(3 - 1 downto 0);
    trunc_ln246_1_fu_2436_p1 <= s_output_1_fu_284(28 - 1 downto 0);
    trunc_ln246_fu_2396_p1 <= lshr_ln243_1_fu_2376_p2(8 - 1 downto 0);
    trunc_ln254_1_fu_2470_p1 <= f_function_res_0_reg_513(31 - 1 downto 0);
    trunc_ln254_fu_2496_p1 <= lshr_ln254_fu_2490_p2(1 - 1 downto 0);
    trunc_ln270_1_fu_2557_p1 <= lshr_ln270_fu_2552_p2(1 - 1 downto 0);
    trunc_ln270_2_fu_2534_p1 <= inv_init_perm_res_0_reg_546(63 - 1 downto 0);
    trunc_ln270_fu_2538_p1 <= array_temp_q0(7 - 1 downto 0);
    xor_ln232_1_fu_2213_p2 <= (trunc_ln232_fu_2195_p1 xor array_temp_q1);
    xor_ln232_fu_2207_p2 <= (trunc_ln232_2_fu_2203_p1 xor trunc_ln232_1_fu_2199_p1);
    zext_ln174_1_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln174_fu_572_p2),64));
    zext_ln174_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln174_fu_605_p2),64));
    zext_ln184_1_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_434),64));
    zext_ln184_2_fu_1343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(PC1_q0),7));
    zext_ln184_fu_1353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln184_fu_1347_p2),64));
    zext_ln198_fu_1147_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_46_fu_1016_p3),27));
    zext_ln229_1_fu_2169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln229_fu_2163_p2),32));
    zext_ln229_fu_2147_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_490),64));
    zext_ln232_fu_2158_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln232_fu_2152_p2),64));
    zext_ln240_1_fu_2253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln240_fu_2247_p2),6));
    zext_ln240_2_fu_2257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln240_fu_2247_p2),7));
    zext_ln240_3_fu_2306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln240_fu_2303_p1),47));
    zext_ln240_4_fu_2310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln240_fu_2303_p1),48));
    zext_ln240_5_fu_2275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln240_1_fu_2267_p3),6));
    zext_ln240_6_fu_2325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln240_2_reg_3596),48));
    zext_ln240_fu_2243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_2235_p3),7));
    zext_ln243_fu_2373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln243_1_reg_3601),47));
    zext_ln246_fu_2422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_51_fu_2414_p3),11));
    zext_ln254_1_fu_2486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln254_fu_2480_p2),32));
    zext_ln254_fu_2465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_3_reg_524),64));
    zext_ln270_1_fu_2519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_535),8));
    zext_ln270_2_fu_2529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln270_fu_2523_p2),64));
    zext_ln270_fu_2548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln270_fu_2542_p2),64));
end behav;

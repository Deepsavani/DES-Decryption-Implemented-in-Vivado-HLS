// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="des_dec,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35tl-cpg236-2L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.689625,HLS_SYN_LAT=5013,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=0,HLS_SYN_FF=1278,HLS_SYN_LUT=3156,HLS_VERSION=2019_1}" *)

module des_dec (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r,
        key,
        ap_return
);

parameter    ap_ST_fsm_state1 = 21'd1;
parameter    ap_ST_fsm_state2 = 21'd2;
parameter    ap_ST_fsm_state3 = 21'd4;
parameter    ap_ST_fsm_state4 = 21'd8;
parameter    ap_ST_fsm_state5 = 21'd16;
parameter    ap_ST_fsm_state6 = 21'd32;
parameter    ap_ST_fsm_state7 = 21'd64;
parameter    ap_ST_fsm_state8 = 21'd128;
parameter    ap_ST_fsm_state9 = 21'd256;
parameter    ap_ST_fsm_state10 = 21'd512;
parameter    ap_ST_fsm_state11 = 21'd1024;
parameter    ap_ST_fsm_state12 = 21'd2048;
parameter    ap_ST_fsm_state13 = 21'd4096;
parameter    ap_ST_fsm_state14 = 21'd8192;
parameter    ap_ST_fsm_state15 = 21'd16384;
parameter    ap_ST_fsm_state16 = 21'd32768;
parameter    ap_ST_fsm_state17 = 21'd65536;
parameter    ap_ST_fsm_state18 = 21'd131072;
parameter    ap_ST_fsm_state19 = 21'd262144;
parameter    ap_ST_fsm_state20 = 21'd524288;
parameter    ap_ST_fsm_state21 = 21'd1048576;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] input_r;
input  [63:0] key;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [20:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] IP_address0;
reg    IP_ce0;
wire   [6:0] IP_q0;
wire   [5:0] IP_address1;
reg    IP_ce1;
wire   [6:0] IP_q1;
wire   [5:0] IP_address2;
reg    IP_ce2;
wire   [6:0] IP_q2;
wire   [5:0] IP_address3;
reg    IP_ce3;
wire   [6:0] IP_q3;
wire   [5:0] PC1_address0;
reg    PC1_ce0;
wire   [5:0] PC1_q0;
wire   [5:0] PC2_address0;
reg    PC2_ce0;
wire   [5:0] PC2_q0;
wire   [5:0] E_address0;
reg    E_ce0;
wire   [5:0] E_q0;
wire   [8:0] S_address0;
reg    S_ce0;
wire   [3:0] S_q0;
wire   [4:0] P_address0;
reg    P_ce0;
wire   [5:0] P_q0;
wire   [5:0] PI_address0;
reg    PI_ce0;
wire   [6:0] PI_q0;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln171_fu_548_p2;
wire   [59:0] trunc_ln173_fu_569_p1;
reg   [59:0] trunc_ln173_reg_1471;
wire   [6:0] add_ln171_fu_600_p2;
reg   [6:0] add_ln171_reg_1491;
reg   [31:0] L_reg_1496;
wire   [31:0] R_fu_616_p1;
reg   [31:0] R_reg_1501;
wire   [63:0] or_ln_fu_696_p6;
wire    ap_CS_fsm_state3;
wire   [5:0] i_fu_715_p2;
reg   [5:0] i_reg_1514;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln182_fu_709_p2;
wire   [62:0] trunc_ln184_1_fu_726_p1;
reg   [62:0] trunc_ln184_1_reg_1524;
wire   [63:0] permuted_choice_1_fu_777_p3;
wire    ap_CS_fsm_state5;
wire   [4:0] i_6_fu_790_p2;
reg   [4:0] i_6_reg_1553;
wire    ap_CS_fsm_state6;
reg   [3:0] sub_key_addr_reg_1561;
wire   [0:0] icmp_ln192_fu_784_p2;
wire   [55:0] tmp_9_fu_952_p3;
reg   [55:0] tmp_9_reg_1573;
wire    ap_CS_fsm_state7;
wire   [5:0] j_4_fu_966_p2;
reg   [5:0] j_4_reg_1581;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln216_fu_960_p2;
wire   [62:0] trunc_ln218_1_fu_977_p1;
reg   [62:0] trunc_ln218_1_reg_1591;
wire   [63:0] or_ln1_fu_1000_p3;
wire    ap_CS_fsm_state9;
wire   [4:0] i_7_fu_1013_p2;
reg   [4:0] i_7_reg_1604;
wire    ap_CS_fsm_state10;
wire   [63:0] pre_output_fu_1019_p3;
reg   [63:0] pre_output_reg_1609;
wire   [0:0] icmp_ln223_fu_1007_p2;
wire   [5:0] j_fu_1033_p2;
reg   [5:0] j_reg_1617;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln227_fu_1027_p2;
wire   [63:0] s_input_fu_1079_p3;
wire    ap_CS_fsm_state12;
wire   [46:0] xor_ln232_fu_1103_p2;
reg   [46:0] xor_ln232_reg_1637;
wire    ap_CS_fsm_state13;
wire   [47:0] xor_ln232_1_fu_1109_p2;
reg   [47:0] xor_ln232_1_reg_1642;
wire   [3:0] j_5_fu_1121_p2;
reg   [3:0] j_5_reg_1650;
wire    ap_CS_fsm_state14;
wire   [6:0] sub_ln240_fu_1157_p2;
reg   [6:0] sub_ln240_reg_1655;
wire   [0:0] icmp_ln235_fu_1115_p2;
wire   [5:0] sub_ln240_2_fu_1181_p2;
reg   [5:0] sub_ln240_2_reg_1660;
wire   [5:0] sub_ln243_1_fu_1193_p2;
reg   [5:0] sub_ln243_1_reg_1665;
wire   [10:0] add_ln246_1_fu_1322_p2;
reg   [10:0] add_ln246_1_reg_1670;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire   [5:0] j_6_fu_1355_p2;
reg   [5:0] j_6_reg_1683;
wire    ap_CS_fsm_state18;
wire   [0:0] icmp_ln252_fu_1349_p2;
wire   [30:0] trunc_ln254_1_fu_1366_p1;
reg   [30:0] trunc_ln254_1_reg_1693;
wire   [31:0] R_1_fu_1370_p2;
wire   [31:0] f_function_res_fu_1396_p3;
wire    ap_CS_fsm_state19;
wire   [6:0] i_5_fu_1409_p2;
reg   [6:0] i_5_reg_1711;
wire    ap_CS_fsm_state20;
wire   [0:0] icmp_ln267_fu_1403_p2;
wire   [62:0] trunc_ln270_1_fu_1420_p1;
reg   [62:0] trunc_ln270_1_reg_1721;
wire   [63:0] inv_init_perm_res_fu_1443_p3;
wire    ap_CS_fsm_state21;
reg   [3:0] sub_key_address0;
reg    sub_key_ce0;
reg    sub_key_we0;
wire   [63:0] sub_key_q0;
reg   [63:0] init_perm_res_0_0_reg_349;
reg   [6:0] i_0_0_reg_360;
reg   [63:0] permuted_choice_1_0_reg_371;
reg   [5:0] i_1_reg_382;
reg   [4:0] i_2_reg_393;
reg   [63:0] sub_key_load_1_reg_404;
reg   [5:0] j_0_reg_416;
reg   [31:0] temp_reg_427;
reg   [31:0] L_0_reg_437;
reg   [4:0] i_3_reg_448;
reg   [63:0] s_input_0_reg_460;
reg   [5:0] j_1_reg_472;
reg   [3:0] j_2_reg_483;
wire    ap_CS_fsm_state17;
reg   [31:0] f_function_res_0_reg_495;
reg   [5:0] j_3_reg_506;
reg   [6:0] i_4_reg_517;
reg   [63:0] inv_init_perm_res_0_reg_528;
wire   [63:0] zext_ln174_fu_554_p1;
wire   [63:0] zext_ln174_5_fu_573_p1;
wire   [63:0] zext_ln174_6_fu_584_p1;
wire   [63:0] zext_ln174_7_fu_595_p1;
wire   [63:0] zext_ln184_1_fu_721_p1;
wire   [63:0] zext_ln214_fu_942_p1;
wire   [63:0] zext_ln218_fu_972_p1;
wire   [63:0] zext_ln229_fu_1039_p1;
wire   [63:0] zext_ln232_fu_1050_p1;
wire  signed [63:0] sext_ln246_3_fu_1328_p1;
wire   [63:0] zext_ln254_fu_1361_p1;
wire   [63:0] zext_ln270_1_fu_1415_p1;
reg   [27:0] C_1_fu_180;
wire   [27:0] C_2_fu_852_p3;
wire   [0:0] empty_18_fu_832_p2;
wire   [27:0] C_3_fu_904_p3;
reg   [27:0] D_fu_184;
wire   [27:0] D_1_fu_740_p1;
wire   [27:0] D_2_fu_874_p3;
wire   [27:0] D_3_fu_924_p3;
reg   [31:0] s_output_1_fu_188;
wire   [31:0] s_output_fu_1336_p3;
wire   [5:0] empty_9_fu_559_p1;
wire   [5:0] or_ln171_fu_563_p2;
wire   [5:0] or_ln171_1_fu_578_p2;
wire   [5:0] or_ln171_2_fu_589_p2;
wire   [6:0] sub_ln174_fu_620_p2;
wire   [63:0] zext_ln174_4_fu_626_p1;
wire   [63:0] lshr_ln174_fu_630_p2;
wire   [6:0] sub_ln174_1_fu_639_p2;
wire   [63:0] zext_ln174_1_fu_645_p1;
wire   [63:0] lshr_ln174_1_fu_649_p2;
wire   [6:0] sub_ln174_2_fu_658_p2;
wire   [63:0] zext_ln174_2_fu_664_p1;
wire   [63:0] lshr_ln174_2_fu_668_p2;
wire   [6:0] sub_ln174_3_fu_677_p2;
wire   [63:0] zext_ln174_3_fu_683_p1;
wire   [63:0] lshr_ln174_3_fu_687_p2;
wire   [0:0] trunc_ln174_fu_635_p1;
wire   [0:0] trunc_ln171_fu_654_p1;
wire   [0:0] trunc_ln174_1_fu_673_p1;
wire   [0:0] trunc_ln174_2_fu_692_p1;
wire   [6:0] zext_ln184_2_fu_754_p1;
wire   [6:0] sub_ln184_fu_758_p2;
wire   [63:0] zext_ln184_fu_764_p1;
wire   [63:0] lshr_ln184_fu_768_p2;
wire   [0:0] trunc_ln184_fu_773_p1;
wire   [0:0] empty_13_fu_802_p2;
wire   [0:0] empty_12_fu_796_p2;
wire   [0:0] empty_15_fu_814_p2;
wire   [0:0] empty_14_fu_808_p2;
wire   [0:0] empty_17_fu_826_p2;
wire   [0:0] empty_16_fu_820_p2;
wire   [25:0] trunc_ln203_fu_838_p1;
wire   [1:0] tmp_3_fu_842_p4;
wire   [25:0] trunc_ln204_fu_860_p1;
wire   [1:0] tmp_s_fu_864_p4;
wire   [26:0] trunc_ln197_fu_900_p1;
wire   [0:0] tmp_2_fu_892_p3;
wire   [26:0] trunc_ln198_fu_920_p1;
wire   [0:0] tmp_4_fu_912_p3;
wire   [5:0] sub_ln218_fu_981_p2;
wire   [55:0] zext_ln218_1_fu_987_p1;
wire   [55:0] lshr_ln218_fu_991_p2;
wire   [0:0] trunc_ln218_fu_996_p1;
wire   [4:0] sub_ln232_fu_1044_p2;
wire   [5:0] sub_ln229_fu_1055_p2;
wire   [31:0] zext_ln229_1_fu_1061_p1;
wire   [31:0] lshr_ln229_fu_1065_p2;
wire   [62:0] trunc_ln229_1_fu_1075_p1;
wire   [0:0] trunc_ln229_fu_1071_p1;
wire   [46:0] trunc_ln232_3_fu_1099_p1;
wire   [46:0] trunc_ln232_2_fu_1095_p1;
wire   [47:0] trunc_ln232_1_fu_1091_p1;
wire   [47:0] trunc_ln232_fu_1087_p1;
wire   [2:0] trunc_ln240_fu_1127_p1;
wire   [5:0] shl_ln_fu_1131_p3;
wire   [3:0] shl_ln240_fu_1143_p2;
wire   [6:0] zext_ln240_fu_1139_p1;
wire   [6:0] zext_ln240_2_fu_1153_p1;
wire   [4:0] shl_ln240_1_fu_1163_p3;
wire   [5:0] zext_ln240_1_fu_1149_p1;
wire   [5:0] sub_ln240_1_fu_1175_p2;
wire   [5:0] zext_ln240_5_fu_1171_p1;
wire   [5:0] sub_ln243_fu_1187_p2;
wire  signed [31:0] sext_ln240_fu_1199_p1;
wire   [47:0] zext_ln240_4_fu_1206_p1;
wire   [47:0] lshr_ln240_fu_1210_p2;
wire   [47:0] and_ln240_fu_1216_p2;
wire   [47:0] zext_ln240_6_fu_1221_p1;
wire   [47:0] lshr_ln240_1_fu_1224_p2;
wire   [0:0] tmp_5_fu_1234_p3;
wire   [0:0] trunc_ln240_1_fu_1230_p1;
wire   [46:0] zext_ln240_3_fu_1202_p1;
wire   [46:0] lshr_ln243_fu_1258_p2;
wire   [46:0] and_ln243_fu_1264_p2;
wire   [46:0] zext_ln243_fu_1269_p1;
wire   [2:0] tmp_6_fu_1248_p4;
wire   [0:0] or_ln241_fu_1242_p2;
wire   [7:0] tmp_7_fu_1278_p4;
wire   [46:0] lshr_ln243_1_fu_1272_p2;
wire   [7:0] trunc_ln246_fu_1292_p1;
wire  signed [8:0] sext_ln246_1_fu_1296_p1;
wire  signed [8:0] sext_ln246_fu_1288_p1;
wire   [8:0] add_ln246_fu_1300_p2;
wire   [9:0] tmp_8_fu_1310_p3;
wire  signed [10:0] sext_ln246_2_fu_1306_p1;
wire   [10:0] zext_ln246_fu_1318_p1;
wire   [27:0] trunc_ln246_1_fu_1332_p1;
wire   [5:0] sub_ln254_fu_1376_p2;
wire   [31:0] zext_ln254_1_fu_1382_p1;
wire   [31:0] lshr_ln254_fu_1386_p2;
wire   [0:0] trunc_ln254_fu_1392_p1;
wire   [6:0] sub_ln270_fu_1424_p2;
wire   [63:0] zext_ln270_fu_1430_p1;
wire   [63:0] lshr_ln270_fu_1434_p2;
wire   [0:0] trunc_ln270_fu_1439_p1;
reg   [20:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 21'd1;
end

des_dec_IP #(
    .DataWidth( 7 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
IP_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(IP_address0),
    .ce0(IP_ce0),
    .q0(IP_q0),
    .address1(IP_address1),
    .ce1(IP_ce1),
    .q1(IP_q1),
    .address2(IP_address2),
    .ce2(IP_ce2),
    .q2(IP_q2),
    .address3(IP_address3),
    .ce3(IP_ce3),
    .q3(IP_q3)
);

des_dec_PC1 #(
    .DataWidth( 6 ),
    .AddressRange( 56 ),
    .AddressWidth( 6 ))
PC1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(PC1_address0),
    .ce0(PC1_ce0),
    .q0(PC1_q0)
);

des_dec_PC2 #(
    .DataWidth( 6 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
PC2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(PC2_address0),
    .ce0(PC2_ce0),
    .q0(PC2_q0)
);

des_dec_E #(
    .DataWidth( 6 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
E_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(E_address0),
    .ce0(E_ce0),
    .q0(E_q0)
);

des_dec_S #(
    .DataWidth( 4 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
S_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(S_address0),
    .ce0(S_ce0),
    .q0(S_q0)
);

des_dec_P #(
    .DataWidth( 6 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
P_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(P_address0),
    .ce0(P_ce0),
    .q0(P_q0)
);

des_dec_PI #(
    .DataWidth( 7 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
PI_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(PI_address0),
    .ce0(PI_ce0),
    .q0(PI_q0)
);

des_dec_sub_key #(
    .DataWidth( 64 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
sub_key_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sub_key_address0),
    .ce0(sub_key_ce0),
    .we0(sub_key_we0),
    .d0(sub_key_load_1_reg_404),
    .q0(sub_key_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (empty_18_fu_832_p2 == 1'd1) & (icmp_ln192_fu_784_p2 == 1'd0))) begin
        C_1_fu_180 <= C_3_fu_904_p3;
    end else if (((1'b1 == ap_CS_fsm_state6) & (empty_18_fu_832_p2 == 1'd0) & (icmp_ln192_fu_784_p2 == 1'd0))) begin
        C_1_fu_180 <= C_2_fu_852_p3;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln182_fu_709_p2 == 1'd1))) begin
        C_1_fu_180 <= {{permuted_choice_1_0_reg_371[55:28]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (empty_18_fu_832_p2 == 1'd1) & (icmp_ln192_fu_784_p2 == 1'd0))) begin
        D_fu_184 <= D_3_fu_924_p3;
    end else if (((1'b1 == ap_CS_fsm_state6) & (empty_18_fu_832_p2 == 1'd0) & (icmp_ln192_fu_784_p2 == 1'd0))) begin
        D_fu_184 <= D_2_fu_874_p3;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln182_fu_709_p2 == 1'd1))) begin
        D_fu_184 <= D_1_fu_740_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln192_fu_784_p2 == 1'd1))) begin
        L_0_reg_437 <= L_reg_1496;
    end else if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln252_fu_1349_p2 == 1'd1))) begin
        L_0_reg_437 <= temp_reg_427;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln235_fu_1115_p2 == 1'd1))) begin
        f_function_res_0_reg_495 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        f_function_res_0_reg_495 <= f_function_res_fu_1396_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_0_reg_360 <= add_ln171_reg_1491;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_0_reg_360 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_1_reg_382 <= i_reg_1514;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln171_fu_548_p2 == 1'd1))) begin
        i_1_reg_382 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln216_fu_960_p2 == 1'd1))) begin
        i_2_reg_393 <= i_6_reg_1553;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln182_fu_709_p2 == 1'd1))) begin
        i_2_reg_393 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln192_fu_784_p2 == 1'd1))) begin
        i_3_reg_448 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln252_fu_1349_p2 == 1'd1))) begin
        i_3_reg_448 <= i_7_reg_1604;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        i_4_reg_517 <= i_5_reg_1711;
    end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln223_fu_1007_p2 == 1'd1))) begin
        i_4_reg_517 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        init_perm_res_0_0_reg_349 <= or_ln_fu_696_p6;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        init_perm_res_0_0_reg_349 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        inv_init_perm_res_0_reg_528 <= inv_init_perm_res_fu_1443_p3;
    end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln223_fu_1007_p2 == 1'd1))) begin
        inv_init_perm_res_0_reg_528 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        j_0_reg_416 <= j_4_reg_1581;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        j_0_reg_416 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        j_1_reg_472 <= j_reg_1617;
    end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln223_fu_1007_p2 == 1'd0))) begin
        j_1_reg_472 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        j_2_reg_483 <= j_5_reg_1650;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        j_2_reg_483 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln235_fu_1115_p2 == 1'd1))) begin
        j_3_reg_506 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        j_3_reg_506 <= j_6_reg_1683;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        permuted_choice_1_0_reg_371 <= permuted_choice_1_fu_777_p3;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln171_fu_548_p2 == 1'd1))) begin
        permuted_choice_1_0_reg_371 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        s_input_0_reg_460 <= s_input_fu_1079_p3;
    end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln223_fu_1007_p2 == 1'd0))) begin
        s_input_0_reg_460 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        s_output_1_fu_188 <= s_output_fu_1336_p3;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln192_fu_784_p2 == 1'd1))) begin
        s_output_1_fu_188 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sub_key_load_1_reg_404 <= or_ln1_fu_1000_p3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sub_key_load_1_reg_404 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln192_fu_784_p2 == 1'd1))) begin
        temp_reg_427 <= R_reg_1501;
    end else if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln252_fu_1349_p2 == 1'd1))) begin
        temp_reg_427 <= R_1_fu_1370_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln171_fu_548_p2 == 1'd1))) begin
        L_reg_1496 <= {{init_perm_res_0_0_reg_349[63:32]}};
        R_reg_1501 <= R_fu_616_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln171_fu_548_p2 == 1'd0))) begin
        add_ln171_reg_1491 <= add_ln171_fu_600_p2;
        trunc_ln173_reg_1471 <= trunc_ln173_fu_569_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        add_ln246_1_reg_1670 <= add_ln246_1_fu_1322_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        i_5_reg_1711 <= i_5_fu_1409_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_6_reg_1553 <= i_6_fu_790_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_7_reg_1604 <= i_7_fu_1013_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_1514 <= i_fu_715_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        j_4_reg_1581 <= j_4_fu_966_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        j_5_reg_1650 <= j_5_fu_1121_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        j_6_reg_1683 <= j_6_fu_1355_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        j_reg_1617 <= j_fu_1033_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln223_fu_1007_p2 == 1'd1))) begin
        pre_output_reg_1609 <= pre_output_fu_1019_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln192_fu_784_p2 == 1'd0))) begin
        sub_key_addr_reg_1561 <= zext_ln214_fu_942_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln235_fu_1115_p2 == 1'd0))) begin
        sub_ln240_2_reg_1660[5 : 1] <= sub_ln240_2_fu_1181_p2[5 : 1];
        sub_ln240_reg_1655[6 : 1] <= sub_ln240_fu_1157_p2[6 : 1];
        sub_ln243_1_reg_1665[5 : 1] <= sub_ln243_1_fu_1193_p2[5 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_9_reg_1573 <= tmp_9_fu_952_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln182_fu_709_p2 == 1'd0))) begin
        trunc_ln184_1_reg_1524 <= trunc_ln184_1_fu_726_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln216_fu_960_p2 == 1'd0))) begin
        trunc_ln218_1_reg_1591 <= trunc_ln218_1_fu_977_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln252_fu_1349_p2 == 1'd0))) begin
        trunc_ln254_1_reg_1693 <= trunc_ln254_1_fu_1366_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln267_fu_1403_p2 == 1'd0))) begin
        trunc_ln270_1_reg_1721 <= trunc_ln270_1_fu_1420_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        xor_ln232_1_reg_1642 <= xor_ln232_1_fu_1109_p2;
        xor_ln232_reg_1637 <= xor_ln232_fu_1103_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        E_ce0 = 1'b1;
    end else begin
        E_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        IP_ce0 = 1'b1;
    end else begin
        IP_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        IP_ce1 = 1'b1;
    end else begin
        IP_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        IP_ce2 = 1'b1;
    end else begin
        IP_ce2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        IP_ce3 = 1'b1;
    end else begin
        IP_ce3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        PC1_ce0 = 1'b1;
    end else begin
        PC1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        PC2_ce0 = 1'b1;
    end else begin
        PC2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        PI_ce0 = 1'b1;
    end else begin
        PI_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        P_ce0 = 1'b1;
    end else begin
        P_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        S_ce0 = 1'b1;
    end else begin
        S_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln267_fu_1403_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln267_fu_1403_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        sub_key_address0 = zext_ln232_fu_1050_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sub_key_address0 = sub_key_addr_reg_1561;
    end else begin
        sub_key_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8))) begin
        sub_key_ce0 = 1'b1;
    end else begin
        sub_key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sub_key_we0 = 1'b1;
    end else begin
        sub_key_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln171_fu_548_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln182_fu_709_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln192_fu_784_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln216_fu_960_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln223_fu_1007_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln227_fu_1027_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln235_fu_1115_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln252_fu_1349_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln267_fu_1403_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C_2_fu_852_p3 = {{trunc_ln203_fu_838_p1}, {tmp_3_fu_842_p4}};

assign C_3_fu_904_p3 = {{trunc_ln197_fu_900_p1}, {tmp_2_fu_892_p3}};

assign D_1_fu_740_p1 = permuted_choice_1_0_reg_371[27:0];

assign D_2_fu_874_p3 = {{trunc_ln204_fu_860_p1}, {tmp_s_fu_864_p4}};

assign D_3_fu_924_p3 = {{trunc_ln198_fu_920_p1}, {tmp_4_fu_912_p3}};

assign E_address0 = zext_ln229_fu_1039_p1;

assign IP_address0 = zext_ln174_fu_554_p1;

assign IP_address1 = zext_ln174_5_fu_573_p1;

assign IP_address2 = zext_ln174_6_fu_584_p1;

assign IP_address3 = zext_ln174_7_fu_595_p1;

assign PC1_address0 = zext_ln184_1_fu_721_p1;

assign PC2_address0 = zext_ln218_fu_972_p1;

assign PI_address0 = zext_ln270_1_fu_1415_p1;

assign P_address0 = zext_ln254_fu_1361_p1;

assign R_1_fu_1370_p2 = (f_function_res_0_reg_495 ^ L_0_reg_437);

assign R_fu_616_p1 = init_perm_res_0_0_reg_349[31:0];

assign S_address0 = sext_ln246_3_fu_1328_p1;

assign add_ln171_fu_600_p2 = (7'd4 + i_0_0_reg_360);

assign add_ln246_1_fu_1322_p2 = ($signed(sext_ln246_2_fu_1306_p1) + $signed(zext_ln246_fu_1318_p1));

assign add_ln246_fu_1300_p2 = ($signed(sext_ln246_1_fu_1296_p1) + $signed(sext_ln246_fu_1288_p1));

assign and_ln240_fu_1216_p2 = (xor_ln232_1_reg_1642 & lshr_ln240_fu_1210_p2);

assign and_ln243_fu_1264_p2 = (xor_ln232_reg_1637 & lshr_ln243_fu_1258_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = inv_init_perm_res_0_reg_528;

assign empty_12_fu_796_p2 = ((i_2_reg_393 == 5'd15) ? 1'b1 : 1'b0);

assign empty_13_fu_802_p2 = ((i_2_reg_393 == 5'd8) ? 1'b1 : 1'b0);

assign empty_14_fu_808_p2 = (empty_13_fu_802_p2 | empty_12_fu_796_p2);

assign empty_15_fu_814_p2 = ((i_2_reg_393 == 5'd1) ? 1'b1 : 1'b0);

assign empty_16_fu_820_p2 = (empty_15_fu_814_p2 | empty_14_fu_808_p2);

assign empty_17_fu_826_p2 = ((i_2_reg_393 == 5'd0) ? 1'b1 : 1'b0);

assign empty_18_fu_832_p2 = (empty_17_fu_826_p2 | empty_16_fu_820_p2);

assign empty_9_fu_559_p1 = i_0_0_reg_360[5:0];

assign f_function_res_fu_1396_p3 = {{trunc_ln254_1_reg_1693}, {trunc_ln254_fu_1392_p1}};

assign i_5_fu_1409_p2 = (i_4_reg_517 + 7'd1);

assign i_6_fu_790_p2 = (i_2_reg_393 + 5'd1);

assign i_7_fu_1013_p2 = (i_3_reg_448 + 5'd1);

assign i_fu_715_p2 = (i_1_reg_382 + 6'd1);

assign icmp_ln171_fu_548_p2 = ((i_0_0_reg_360 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln182_fu_709_p2 = ((i_1_reg_382 == 6'd56) ? 1'b1 : 1'b0);

assign icmp_ln192_fu_784_p2 = ((i_2_reg_393 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln216_fu_960_p2 = ((j_0_reg_416 == 6'd48) ? 1'b1 : 1'b0);

assign icmp_ln223_fu_1007_p2 = ((i_3_reg_448 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln227_fu_1027_p2 = ((j_1_reg_472 == 6'd48) ? 1'b1 : 1'b0);

assign icmp_ln235_fu_1115_p2 = ((j_2_reg_483 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln252_fu_1349_p2 = ((j_3_reg_506 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln267_fu_1403_p2 = ((i_4_reg_517 == 7'd64) ? 1'b1 : 1'b0);

assign inv_init_perm_res_fu_1443_p3 = {{trunc_ln270_1_reg_1721}, {trunc_ln270_fu_1439_p1}};

assign j_4_fu_966_p2 = (j_0_reg_416 + 6'd1);

assign j_5_fu_1121_p2 = (j_2_reg_483 + 4'd1);

assign j_6_fu_1355_p2 = (j_3_reg_506 + 6'd1);

assign j_fu_1033_p2 = (j_1_reg_472 + 6'd1);

assign lshr_ln174_1_fu_649_p2 = input_r >> zext_ln174_1_fu_645_p1;

assign lshr_ln174_2_fu_668_p2 = input_r >> zext_ln174_2_fu_664_p1;

assign lshr_ln174_3_fu_687_p2 = input_r >> zext_ln174_3_fu_683_p1;

assign lshr_ln174_fu_630_p2 = input_r >> zext_ln174_4_fu_626_p1;

assign lshr_ln184_fu_768_p2 = key >> zext_ln184_fu_764_p1;

assign lshr_ln218_fu_991_p2 = tmp_9_reg_1573 >> zext_ln218_1_fu_987_p1;

assign lshr_ln229_fu_1065_p2 = temp_reg_427 >> zext_ln229_1_fu_1061_p1;

assign lshr_ln240_1_fu_1224_p2 = and_ln240_fu_1216_p2 >> zext_ln240_6_fu_1221_p1;

assign lshr_ln240_fu_1210_p2 = 48'd145135534866432 >> zext_ln240_4_fu_1206_p1;

assign lshr_ln243_1_fu_1272_p2 = and_ln243_fu_1264_p2 >> zext_ln243_fu_1269_p1;

assign lshr_ln243_fu_1258_p2 = 47'd131941395333120 >> zext_ln240_3_fu_1202_p1;

assign lshr_ln254_fu_1386_p2 = s_output_1_fu_188 >> zext_ln254_1_fu_1382_p1;

assign lshr_ln270_fu_1434_p2 = pre_output_reg_1609 >> zext_ln270_fu_1430_p1;

assign or_ln171_1_fu_578_p2 = (empty_9_fu_559_p1 | 6'd2);

assign or_ln171_2_fu_589_p2 = (empty_9_fu_559_p1 | 6'd3);

assign or_ln171_fu_563_p2 = (empty_9_fu_559_p1 | 6'd1);

assign or_ln1_fu_1000_p3 = {{trunc_ln218_1_reg_1591}, {trunc_ln218_fu_996_p1}};

assign or_ln241_fu_1242_p2 = (trunc_ln240_1_fu_1230_p1 | tmp_5_fu_1234_p3);

assign or_ln_fu_696_p6 = {{{{{trunc_ln173_reg_1471}, {trunc_ln174_fu_635_p1}}, {trunc_ln171_fu_654_p1}}, {trunc_ln174_1_fu_673_p1}}, {trunc_ln174_2_fu_692_p1}};

assign permuted_choice_1_fu_777_p3 = {{trunc_ln184_1_reg_1524}, {trunc_ln184_fu_773_p1}};

assign pre_output_fu_1019_p3 = {{temp_reg_427}, {L_0_reg_437}};

assign s_input_fu_1079_p3 = {{trunc_ln229_1_fu_1075_p1}, {trunc_ln229_fu_1071_p1}};

assign s_output_fu_1336_p3 = {{trunc_ln246_1_fu_1332_p1}, {S_q0}};

assign sext_ln240_fu_1199_p1 = $signed(sub_ln240_reg_1655);

assign sext_ln246_1_fu_1296_p1 = $signed(trunc_ln246_fu_1292_p1);

assign sext_ln246_2_fu_1306_p1 = $signed(add_ln246_fu_1300_p2);

assign sext_ln246_3_fu_1328_p1 = $signed(add_ln246_1_reg_1670);

assign sext_ln246_fu_1288_p1 = $signed(tmp_7_fu_1278_p4);

assign shl_ln240_1_fu_1163_p3 = {{trunc_ln240_fu_1127_p1}, {2'd0}};

assign shl_ln240_fu_1143_p2 = j_2_reg_483 << 4'd1;

assign shl_ln_fu_1131_p3 = {{trunc_ln240_fu_1127_p1}, {3'd0}};

assign sub_ln174_1_fu_639_p2 = ($signed(7'd64) - $signed(IP_q1));

assign sub_ln174_2_fu_658_p2 = ($signed(7'd64) - $signed(IP_q2));

assign sub_ln174_3_fu_677_p2 = ($signed(7'd64) - $signed(IP_q3));

assign sub_ln174_fu_620_p2 = ($signed(7'd64) - $signed(IP_q0));

assign sub_ln184_fu_758_p2 = ($signed(7'd64) - $signed(zext_ln184_2_fu_754_p1));

assign sub_ln218_fu_981_p2 = ($signed(6'd56) - $signed(PC2_q0));

assign sub_ln229_fu_1055_p2 = ($signed(6'd32) - $signed(E_q0));

assign sub_ln232_fu_1044_p2 = (5'd15 - i_3_reg_448);

assign sub_ln240_1_fu_1175_p2 = ($signed(6'd42) - $signed(zext_ln240_1_fu_1149_p1));

assign sub_ln240_2_fu_1181_p2 = (sub_ln240_1_fu_1175_p2 - zext_ln240_5_fu_1171_p1);

assign sub_ln240_fu_1157_p2 = (zext_ln240_fu_1139_p1 - zext_ln240_2_fu_1153_p1);

assign sub_ln243_1_fu_1193_p2 = (sub_ln243_fu_1187_p2 - zext_ln240_5_fu_1171_p1);

assign sub_ln243_fu_1187_p2 = ($signed(6'd43) - $signed(zext_ln240_1_fu_1149_p1));

assign sub_ln254_fu_1376_p2 = ($signed(6'd32) - $signed(P_q0));

assign sub_ln270_fu_1424_p2 = ($signed(7'd64) - $signed(PI_q0));

assign tmp_2_fu_892_p3 = C_1_fu_180[32'd27];

assign tmp_3_fu_842_p4 = {{C_1_fu_180[27:26]}};

assign tmp_4_fu_912_p3 = D_fu_184[32'd27];

assign tmp_5_fu_1234_p3 = lshr_ln240_1_fu_1224_p2[32'd4];

assign tmp_6_fu_1248_p4 = {{lshr_ln240_1_fu_1224_p2[7:5]}};

assign tmp_7_fu_1278_p4 = {{{tmp_6_fu_1248_p4}, {or_ln241_fu_1242_p2}}, {4'd0}};

assign tmp_8_fu_1310_p3 = {{j_2_reg_483}, {6'd0}};

assign tmp_9_fu_952_p3 = {{C_1_fu_180}, {D_fu_184}};

assign tmp_s_fu_864_p4 = {{D_fu_184[27:26]}};

assign trunc_ln171_fu_654_p1 = lshr_ln174_1_fu_649_p2[0:0];

assign trunc_ln173_fu_569_p1 = init_perm_res_0_0_reg_349[59:0];

assign trunc_ln174_1_fu_673_p1 = lshr_ln174_2_fu_668_p2[0:0];

assign trunc_ln174_2_fu_692_p1 = lshr_ln174_3_fu_687_p2[0:0];

assign trunc_ln174_fu_635_p1 = lshr_ln174_fu_630_p2[0:0];

assign trunc_ln184_1_fu_726_p1 = permuted_choice_1_0_reg_371[62:0];

assign trunc_ln184_fu_773_p1 = lshr_ln184_fu_768_p2[0:0];

assign trunc_ln197_fu_900_p1 = C_1_fu_180[26:0];

assign trunc_ln198_fu_920_p1 = D_fu_184[26:0];

assign trunc_ln203_fu_838_p1 = C_1_fu_180[25:0];

assign trunc_ln204_fu_860_p1 = D_fu_184[25:0];

assign trunc_ln218_1_fu_977_p1 = sub_key_load_1_reg_404[62:0];

assign trunc_ln218_fu_996_p1 = lshr_ln218_fu_991_p2[0:0];

assign trunc_ln229_1_fu_1075_p1 = s_input_0_reg_460[62:0];

assign trunc_ln229_fu_1071_p1 = lshr_ln229_fu_1065_p2[0:0];

assign trunc_ln232_1_fu_1091_p1 = sub_key_q0[47:0];

assign trunc_ln232_2_fu_1095_p1 = s_input_0_reg_460[46:0];

assign trunc_ln232_3_fu_1099_p1 = sub_key_q0[46:0];

assign trunc_ln232_fu_1087_p1 = s_input_0_reg_460[47:0];

assign trunc_ln240_1_fu_1230_p1 = lshr_ln240_1_fu_1224_p2[0:0];

assign trunc_ln240_fu_1127_p1 = j_2_reg_483[2:0];

assign trunc_ln246_1_fu_1332_p1 = s_output_1_fu_188[27:0];

assign trunc_ln246_fu_1292_p1 = lshr_ln243_1_fu_1272_p2[7:0];

assign trunc_ln254_1_fu_1366_p1 = f_function_res_0_reg_495[30:0];

assign trunc_ln254_fu_1392_p1 = lshr_ln254_fu_1386_p2[0:0];

assign trunc_ln270_1_fu_1420_p1 = inv_init_perm_res_0_reg_528[62:0];

assign trunc_ln270_fu_1439_p1 = lshr_ln270_fu_1434_p2[0:0];

assign xor_ln232_1_fu_1109_p2 = (trunc_ln232_fu_1087_p1 ^ trunc_ln232_1_fu_1091_p1);

assign xor_ln232_fu_1103_p2 = (trunc_ln232_3_fu_1099_p1 ^ trunc_ln232_2_fu_1095_p1);

assign zext_ln174_1_fu_645_p1 = sub_ln174_1_fu_639_p2;

assign zext_ln174_2_fu_664_p1 = sub_ln174_2_fu_658_p2;

assign zext_ln174_3_fu_683_p1 = sub_ln174_3_fu_677_p2;

assign zext_ln174_4_fu_626_p1 = sub_ln174_fu_620_p2;

assign zext_ln174_5_fu_573_p1 = or_ln171_fu_563_p2;

assign zext_ln174_6_fu_584_p1 = or_ln171_1_fu_578_p2;

assign zext_ln174_7_fu_595_p1 = or_ln171_2_fu_589_p2;

assign zext_ln174_fu_554_p1 = i_0_0_reg_360;

assign zext_ln184_1_fu_721_p1 = i_1_reg_382;

assign zext_ln184_2_fu_754_p1 = PC1_q0;

assign zext_ln184_fu_764_p1 = sub_ln184_fu_758_p2;

assign zext_ln214_fu_942_p1 = i_2_reg_393;

assign zext_ln218_1_fu_987_p1 = sub_ln218_fu_981_p2;

assign zext_ln218_fu_972_p1 = j_0_reg_416;

assign zext_ln229_1_fu_1061_p1 = sub_ln229_fu_1055_p2;

assign zext_ln229_fu_1039_p1 = j_1_reg_472;

assign zext_ln232_fu_1050_p1 = sub_ln232_fu_1044_p2;

assign zext_ln240_1_fu_1149_p1 = shl_ln240_fu_1143_p2;

assign zext_ln240_2_fu_1153_p1 = shl_ln240_fu_1143_p2;

assign zext_ln240_3_fu_1202_p1 = $unsigned(sext_ln240_fu_1199_p1);

assign zext_ln240_4_fu_1206_p1 = $unsigned(sext_ln240_fu_1199_p1);

assign zext_ln240_5_fu_1171_p1 = shl_ln240_1_fu_1163_p3;

assign zext_ln240_6_fu_1221_p1 = sub_ln240_2_reg_1660;

assign zext_ln240_fu_1139_p1 = shl_ln_fu_1131_p3;

assign zext_ln243_fu_1269_p1 = sub_ln243_1_reg_1665;

assign zext_ln246_fu_1318_p1 = tmp_8_fu_1310_p3;

assign zext_ln254_1_fu_1382_p1 = sub_ln254_fu_1376_p2;

assign zext_ln254_fu_1361_p1 = j_3_reg_506;

assign zext_ln270_1_fu_1415_p1 = i_4_reg_517;

assign zext_ln270_fu_1430_p1 = sub_ln270_fu_1424_p2;

always @ (posedge ap_clk) begin
    sub_ln240_reg_1655[0] <= 1'b0;
    sub_ln240_2_reg_1660[0] <= 1'b0;
    sub_ln243_1_reg_1665[0] <= 1'b1;
end

endmodule //des_dec

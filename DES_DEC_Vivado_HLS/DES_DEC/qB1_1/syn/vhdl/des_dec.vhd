-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity des_dec is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r : IN STD_LOGIC_VECTOR (63 downto 0);
    key : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of des_dec is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "des_dec,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35tl-cpg236-2L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.117375,HLS_SYN_LAT=1976,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=927,HLS_SYN_LUT=2041,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv6_38 : STD_LOGIC_VECTOR (5 downto 0) := "111000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv11_40 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv11_80 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_const_lv11_C0 : STD_LOGIC_VECTOR (10 downto 0) := "00011000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv11_100 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_const_lv11_140 : STD_LOGIC_VECTOR (10 downto 0) := "00101000000";
    constant ap_const_lv11_180 : STD_LOGIC_VECTOR (10 downto 0) := "00110000000";
    constant ap_const_lv11_1C0 : STD_LOGIC_VECTOR (10 downto 0) := "00111000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal IP_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal IP_ce0 : STD_LOGIC;
    signal IP_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal PC1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal PC1_ce0 : STD_LOGIC;
    signal PC1_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal PC2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal PC2_ce0 : STD_LOGIC;
    signal PC2_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal S_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal S_ce0 : STD_LOGIC;
    signal S_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal S_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal S_ce1 : STD_LOGIC;
    signal S_q1 : STD_LOGIC_VECTOR (3 downto 0);
    signal S_address2 : STD_LOGIC_VECTOR (8 downto 0);
    signal S_ce2 : STD_LOGIC;
    signal S_q2 : STD_LOGIC_VECTOR (3 downto 0);
    signal S_address3 : STD_LOGIC_VECTOR (8 downto 0);
    signal S_ce3 : STD_LOGIC;
    signal S_q3 : STD_LOGIC_VECTOR (3 downto 0);
    signal S_address4 : STD_LOGIC_VECTOR (8 downto 0);
    signal S_ce4 : STD_LOGIC;
    signal S_q4 : STD_LOGIC_VECTOR (3 downto 0);
    signal S_address5 : STD_LOGIC_VECTOR (8 downto 0);
    signal S_ce5 : STD_LOGIC;
    signal S_q5 : STD_LOGIC_VECTOR (3 downto 0);
    signal S_address6 : STD_LOGIC_VECTOR (8 downto 0);
    signal S_ce6 : STD_LOGIC;
    signal S_q6 : STD_LOGIC_VECTOR (3 downto 0);
    signal S_address7 : STD_LOGIC_VECTOR (8 downto 0);
    signal S_ce7 : STD_LOGIC;
    signal S_q7 : STD_LOGIC_VECTOR (3 downto 0);
    signal PI_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal PI_ce0 : STD_LOGIC;
    signal PI_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_3_reg_591 : STD_LOGIC_VECTOR (4 downto 0);
    signal temp_reg_602 : STD_LOGIC_VECTOR (31 downto 0);
    signal L_0_reg_612 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_657_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_2676 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln171_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln174_1_fu_668_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln174_1_reg_2686 : STD_LOGIC_VECTOR (62 downto 0);
    signal L_reg_2691 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_fu_682_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_reg_2696 : STD_LOGIC_VECTOR (31 downto 0);
    signal init_perm_res_fu_705_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_5_fu_718_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_5_reg_2709 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln182_fu_712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln184_1_fu_729_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln184_1_reg_2719 : STD_LOGIC_VECTOR (62 downto 0);
    signal permuted_choice_1_fu_780_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln192_fu_787_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_8_fu_793_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_8_reg_2749 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_key_addr_reg_2757 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_23_fu_950_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_23_reg_2762 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal j_fu_964_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_2770 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln216_fu_958_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln218_1_fu_975_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln218_1_reg_2780 : STD_LOGIC_VECTOR (62 downto 0);
    signal or_ln1_fu_998_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln223_fu_1005_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln223_reg_2790 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state10_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln223_reg_2790_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_6_fu_1011_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal R_1_fu_2602_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal pre_output_fu_2608_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal pre_output_reg_2849 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal i_7_fu_2622_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_7_reg_2857 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal icmp_ln267_fu_2616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln270_1_fu_2633_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln270_1_reg_2867 : STD_LOGIC_VECTOR (62 downto 0);
    signal inv_init_perm_res_fu_2656_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal sub_key_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_key_ce0 : STD_LOGIC;
    signal sub_key_we0 : STD_LOGIC;
    signal sub_key_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal init_perm_res_0_reg_513 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_0_reg_524 : STD_LOGIC_VECTOR (6 downto 0);
    signal permuted_choice_1_0_reg_535 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_reg_546 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_2_reg_557 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_key_load_1_reg_568 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_0_reg_580 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_temp_phi_fu_605_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_4_reg_623 : STD_LOGIC_VECTOR (6 downto 0);
    signal inv_init_perm_res_0_reg_634 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln174_1_fu_663_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln184_1_fu_724_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln214_fu_945_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln218_fu_970_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln232_fu_1023_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln246_1_fu_1884_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln246_fu_1943_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln246_1_fu_2002_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln246_2_fu_2061_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln246_3_fu_2120_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln246_4_fu_2179_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln246_5_fu_2238_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln246_6_fu_2305_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln270_1_fu_2628_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal C_1_fu_326 : STD_LOGIC_VECTOR (27 downto 0);
    signal C_2_fu_855_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal empty_33_fu_835_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal C_3_fu_907_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal D_fu_330 : STD_LOGIC_VECTOR (27 downto 0);
    signal D_1_fu_743_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal D_2_fu_877_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal D_3_fu_927_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal sub_ln174_fu_686_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln174_fu_692_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln174_fu_696_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln174_fu_701_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln184_2_fu_757_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln184_fu_761_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln184_fu_767_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln184_fu_771_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln184_fu_776_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_28_fu_805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_27_fu_799_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_30_fu_817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_29_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_32_fu_829_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_31_fu_823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln203_fu_841_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_4_fu_845_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln204_fu_863_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_5_fu_867_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln197_fu_903_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_2_fu_895_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln198_fu_923_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_3_fu_915_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln218_fu_979_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln218_1_fu_985_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal lshr_ln218_fu_989_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal trunc_ln218_fu_994_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln232_fu_1017_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln229_1_fu_1096_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_16_fu_1056_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_1108_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_21_fu_1118_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_22_fu_1128_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_24_fu_1138_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_17_fu_1064_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_1072_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_1226_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_19_fu_1080_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_1276_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_25_fu_1088_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_1320_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_29_fu_1342_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln229_fu_1036_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_1362_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_31_fu_1372_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_32_fu_1382_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_fu_1028_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_1040_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_1048_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_1528_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_34_fu_1590_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_35_fu_1632_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln232_fu_1418_p1 : STD_LOGIC_VECTOR (50 downto 0);
    signal s_input_2_cast_fu_1392_p12 : STD_LOGIC_VECTOR (50 downto 0);
    signal trunc_ln232_22_fu_1700_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln229_14_fu_1352_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln232_21_fu_1696_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln229_13_fu_1330_p5 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln232_20_fu_1692_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln229_12_fu_1310_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln232_19_fu_1688_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln229_11_fu_1300_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln232_18_fu_1684_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal trunc_ln229_10_fu_1286_p6 : STD_LOGIC_VECTOR (20 downto 0);
    signal trunc_ln232_17_fu_1680_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln229_9_fu_1264_p5 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln232_16_fu_1676_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln229_7_fu_1252_p5 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln232_15_fu_1672_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln229_5_fu_1236_p7 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln232_14_fu_1668_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln229_4_fu_1212_p6 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln232_13_fu_1664_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln229_3_fu_1198_p6 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln232_12_fu_1660_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_14_fu_1642_p8 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln232_11_fu_1628_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln229_2_fu_1182_p7 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln232_10_fu_1624_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln229_s_fu_1166_p7 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln232_9_fu_1620_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_13_fu_1600_p9 : STD_LOGIC_VECTOR (38 downto 0);
    signal trunc_ln232_8_fu_1586_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_12_fu_1568_p8 : STD_LOGIC_VECTOR (35 downto 0);
    signal trunc_ln232_7_fu_1564_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln229_8_fu_1148_p8 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln232_6_fu_1560_p1 : STD_LOGIC_VECTOR (44 downto 0);
    signal tmp_11_fu_1538_p10 : STD_LOGIC_VECTOR (44 downto 0);
    signal trunc_ln232_5_fu_1524_p1 : STD_LOGIC_VECTOR (41 downto 0);
    signal tmp_10_fu_1504_p9 : STD_LOGIC_VECTOR (41 downto 0);
    signal trunc_ln232_4_fu_1500_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_s_fu_1480_p9 : STD_LOGIC_VECTOR (36 downto 0);
    signal trunc_ln232_3_fu_1476_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_9_fu_1452_p11 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln232_2_fu_1448_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal tmp_8_fu_1426_p10 : STD_LOGIC_VECTOR (42 downto 0);
    signal xor_ln232_21_fu_1830_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal xor_ln232_20_fu_1824_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal s_input_fu_1704_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_37_fu_1844_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_1836_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln6_fu_1852_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln_fu_1862_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln246_fu_1872_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln_fu_1876_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln232_19_fu_1818_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal xor_ln232_18_fu_1812_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal xor_ln232_17_fu_1806_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal tmp_39_fu_1897_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_1889_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln243_1_fu_1905_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln246_1_fu_1915_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln246_2_fu_1925_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln246_3_cast_fu_1929_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln246_fu_1937_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal xor_ln232_16_fu_1800_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal xor_ln232_15_fu_1794_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal xor_ln232_14_fu_1788_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_41_fu_1956_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_1948_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln243_2_fu_1964_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln246_2_fu_1974_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln246_3_fu_1984_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln246_5_cast_fu_1988_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln246_1_fu_1996_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal xor_ln232_13_fu_1782_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal xor_ln232_12_fu_1776_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal xor_ln232_11_fu_1770_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_43_fu_2015_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_2007_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln243_3_fu_2023_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln246_3_fu_2033_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln246_4_fu_2043_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln246_7_cast_fu_2047_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln246_2_fu_2055_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal xor_ln232_10_fu_1764_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal xor_ln232_9_fu_1758_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln232_8_fu_1752_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_45_fu_2074_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_fu_2066_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln243_4_fu_2082_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln246_4_fu_2092_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln246_5_fu_2102_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln246_9_cast_fu_2106_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln246_3_fu_2114_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal xor_ln232_7_fu_1746_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal xor_ln232_6_fu_1740_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal xor_ln232_5_fu_1734_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_47_fu_2133_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_fu_2125_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln243_5_fu_2141_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln246_5_fu_2151_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln246_6_fu_2161_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln246_11_cast_fu_2165_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln246_4_fu_2173_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal xor_ln232_4_fu_1728_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln232_3_fu_1722_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal xor_ln232_2_fu_1716_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_49_fu_2192_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_fu_2184_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln243_6_fu_2200_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln246_6_fu_2210_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln246_7_fu_2220_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln246_13_cast_fu_2224_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln246_5_fu_2232_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln232_1_fu_1422_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln229_6_fu_1100_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln240_fu_2243_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln240_fu_2247_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln232_1_fu_1710_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_50_fu_2259_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln241_fu_2253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln243_7_fu_2267_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln246_7_fu_2277_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln246_8_fu_2287_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln246_15_cast_fu_2291_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln246_6_fu_2299_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln253_1_fu_2326_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_51_fu_2314_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln254_fu_2322_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_fu_2330_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_fu_2338_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln254_1_fu_2346_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln253_2_fu_2350_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_fu_2354_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_55_fu_2362_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_fu_2370_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_fu_2386_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_fu_2378_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_59_fu_2394_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_60_fu_2402_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_62_fu_2418_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_61_fu_2410_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_63_fu_2430_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln253_fu_2310_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln253_4_fu_2438_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_64_fu_2442_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln253_5_fu_2450_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_65_fu_2454_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_67_fu_2470_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_66_fu_2462_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_68_fu_2478_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_69_fu_2486_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_70_fu_2494_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_71_fu_2502_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_72_fu_2510_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_73_fu_2518_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln253_3_fu_2426_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_74_fu_2526_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln254_9_fu_2534_p33 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln270_fu_2637_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln270_fu_2643_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln270_fu_2647_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln270_fu_2652_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component des_dec_IP IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component des_dec_PC1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component des_dec_PC2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component des_dec_S IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address2 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address3 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address4 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address5 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address6 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address7 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component des_dec_PI IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component des_dec_sub_key IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    IP_U : component des_dec_IP
    generic map (
        DataWidth => 7,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => IP_address0,
        ce0 => IP_ce0,
        q0 => IP_q0);

    PC1_U : component des_dec_PC1
    generic map (
        DataWidth => 6,
        AddressRange => 56,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => PC1_address0,
        ce0 => PC1_ce0,
        q0 => PC1_q0);

    PC2_U : component des_dec_PC2
    generic map (
        DataWidth => 6,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => PC2_address0,
        ce0 => PC2_ce0,
        q0 => PC2_q0);

    S_U : component des_dec_S
    generic map (
        DataWidth => 4,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => S_address0,
        ce0 => S_ce0,
        q0 => S_q0,
        address1 => S_address1,
        ce1 => S_ce1,
        q1 => S_q1,
        address2 => S_address2,
        ce2 => S_ce2,
        q2 => S_q2,
        address3 => S_address3,
        ce3 => S_ce3,
        q3 => S_q3,
        address4 => S_address4,
        ce4 => S_ce4,
        q4 => S_q4,
        address5 => S_address5,
        ce5 => S_ce5,
        q5 => S_q5,
        address6 => S_address6,
        ce6 => S_ce6,
        q6 => S_q6,
        address7 => S_address7,
        ce7 => S_ce7,
        q7 => S_q7);

    PI_U : component des_dec_PI
    generic map (
        DataWidth => 7,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => PI_address0,
        ce0 => PI_ce0,
        q0 => PI_q0);

    sub_key_U : component des_dec_sub_key
    generic map (
        DataWidth => 64,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sub_key_address0,
        ce0 => sub_key_ce0,
        we0 => sub_key_we0,
        d0 => sub_key_load_1_reg_568,
        q0 => sub_key_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln223_fu_1005_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln192_fu_787_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln192_fu_787_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    C_1_fu_326_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (empty_33_fu_835_p2 = ap_const_lv1_1) and (icmp_ln192_fu_787_p2 = ap_const_lv1_0))) then 
                C_1_fu_326 <= C_3_fu_907_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (empty_33_fu_835_p2 = ap_const_lv1_0) and (icmp_ln192_fu_787_p2 = ap_const_lv1_0))) then 
                C_1_fu_326 <= C_2_fu_855_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln182_fu_712_p2 = ap_const_lv1_1))) then 
                C_1_fu_326 <= permuted_choice_1_0_reg_535(55 downto 28);
            end if; 
        end if;
    end process;

    D_fu_330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (empty_33_fu_835_p2 = ap_const_lv1_1) and (icmp_ln192_fu_787_p2 = ap_const_lv1_0))) then 
                D_fu_330 <= D_3_fu_927_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (empty_33_fu_835_p2 = ap_const_lv1_0) and (icmp_ln192_fu_787_p2 = ap_const_lv1_0))) then 
                D_fu_330 <= D_2_fu_877_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln182_fu_712_p2 = ap_const_lv1_1))) then 
                D_fu_330 <= D_1_fu_743_p1;
            end if; 
        end if;
    end process;

    L_0_reg_612_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln192_fu_787_p2 = ap_const_lv1_1))) then 
                L_0_reg_612 <= L_reg_2691;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln223_reg_2790_pp0_iter1_reg = ap_const_lv1_0))) then 
                L_0_reg_612 <= temp_reg_602;
            end if; 
        end if;
    end process;

    i_0_reg_524_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_524 <= i_reg_2676;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_524 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i_1_reg_546_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_1_reg_546 <= i_5_reg_2709;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln171_fu_651_p2 = ap_const_lv1_1))) then 
                i_1_reg_546 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_2_reg_557_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln216_fu_958_p2 = ap_const_lv1_1))) then 
                i_2_reg_557 <= i_8_reg_2749;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln182_fu_712_p2 = ap_const_lv1_1))) then 
                i_2_reg_557 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_3_reg_591_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln192_fu_787_p2 = ap_const_lv1_1))) then 
                i_3_reg_591 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln223_fu_1005_p2 = ap_const_lv1_0))) then 
                i_3_reg_591 <= i_6_fu_1011_p2;
            end if; 
        end if;
    end process;

    i_4_reg_623_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_4_reg_623 <= i_7_reg_2857;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                i_4_reg_623 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    init_perm_res_0_reg_513_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                init_perm_res_0_reg_513 <= init_perm_res_fu_705_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                init_perm_res_0_reg_513 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    inv_init_perm_res_0_reg_634_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                inv_init_perm_res_0_reg_634 <= inv_init_perm_res_fu_2656_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                inv_init_perm_res_0_reg_634 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    j_0_reg_580_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                j_0_reg_580 <= j_reg_2770;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j_0_reg_580 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    permuted_choice_1_0_reg_535_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                permuted_choice_1_0_reg_535 <= permuted_choice_1_fu_780_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln171_fu_651_p2 = ap_const_lv1_1))) then 
                permuted_choice_1_0_reg_535 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    sub_key_load_1_reg_568_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                sub_key_load_1_reg_568 <= or_ln1_fu_998_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                sub_key_load_1_reg_568 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    temp_reg_602_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln192_fu_787_p2 = ap_const_lv1_1))) then 
                temp_reg_602 <= R_reg_2696;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln223_reg_2790_pp0_iter1_reg = ap_const_lv1_0))) then 
                temp_reg_602 <= R_1_fu_2602_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln171_fu_651_p2 = ap_const_lv1_1))) then
                L_reg_2691 <= init_perm_res_0_reg_513(63 downto 32);
                R_reg_2696 <= R_fu_682_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_5_reg_2709 <= i_5_fu_718_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                i_7_reg_2857 <= i_7_fu_2622_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_8_reg_2749 <= i_8_fu_793_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_2676 <= i_fu_657_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln223_reg_2790 <= icmp_ln223_fu_1005_p2;
                icmp_ln223_reg_2790_pp0_iter1_reg <= icmp_ln223_reg_2790;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                j_reg_2770 <= j_fu_964_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                pre_output_reg_2849 <= pre_output_fu_2608_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln192_fu_787_p2 = ap_const_lv1_0))) then
                sub_key_addr_reg_2757 <= zext_ln214_fu_945_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_23_reg_2762 <= tmp_23_fu_950_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln171_fu_651_p2 = ap_const_lv1_0))) then
                trunc_ln174_1_reg_2686 <= trunc_ln174_1_fu_668_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln182_fu_712_p2 = ap_const_lv1_0))) then
                trunc_ln184_1_reg_2719 <= trunc_ln184_1_fu_729_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln216_fu_958_p2 = ap_const_lv1_0))) then
                trunc_ln218_1_reg_2780 <= trunc_ln218_1_fu_975_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln267_fu_2616_p2 = ap_const_lv1_0))) then
                trunc_ln270_1_reg_2867 <= trunc_ln270_1_fu_2633_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln171_fu_651_p2, ap_CS_fsm_state4, icmp_ln182_fu_712_p2, icmp_ln192_fu_787_p2, ap_CS_fsm_state6, ap_CS_fsm_state8, icmp_ln216_fu_958_p2, ap_enable_reg_pp0_iter2, ap_CS_fsm_state14, icmp_ln267_fu_2616_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln171_fu_651_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln182_fu_712_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln192_fu_787_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln216_fu_958_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln267_fu_2616_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    C_2_fu_855_p3 <= (trunc_ln203_fu_841_p1 & tmp_4_fu_845_p4);
    C_3_fu_907_p3 <= (trunc_ln197_fu_903_p1 & tmp_2_fu_895_p3);
    D_1_fu_743_p1 <= permuted_choice_1_0_reg_535(28 - 1 downto 0);
    D_2_fu_877_p3 <= (trunc_ln204_fu_863_p1 & tmp_5_fu_867_p4);
    D_3_fu_927_p3 <= (trunc_ln198_fu_923_p1 & tmp_3_fu_915_p3);
    IP_address0 <= zext_ln174_1_fu_663_p1(6 - 1 downto 0);

    IP_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            IP_ce0 <= ap_const_logic_1;
        else 
            IP_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    PC1_address0 <= zext_ln184_1_fu_724_p1(6 - 1 downto 0);

    PC1_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            PC1_ce0 <= ap_const_logic_1;
        else 
            PC1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    PC2_address0 <= zext_ln218_fu_970_p1(6 - 1 downto 0);

    PC2_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            PC2_ce0 <= ap_const_logic_1;
        else 
            PC2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    PI_address0 <= zext_ln270_1_fu_2628_p1(6 - 1 downto 0);

    PI_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            PI_ce0 <= ap_const_logic_1;
        else 
            PI_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    R_1_fu_2602_p2 <= (or_ln254_9_fu_2534_p33 xor L_0_reg_612);
    R_fu_682_p1 <= init_perm_res_0_reg_513(32 - 1 downto 0);
    S_address0 <= zext_ln246_1_fu_1884_p1(9 - 1 downto 0);
    S_address1 <= sext_ln246_fu_1943_p1(9 - 1 downto 0);
    S_address2 <= sext_ln246_1_fu_2002_p1(9 - 1 downto 0);
    S_address3 <= sext_ln246_2_fu_2061_p1(9 - 1 downto 0);
    S_address4 <= sext_ln246_3_fu_2120_p1(9 - 1 downto 0);
    S_address5 <= sext_ln246_4_fu_2179_p1(9 - 1 downto 0);
    S_address6 <= sext_ln246_5_fu_2238_p1(9 - 1 downto 0);
    S_address7 <= sext_ln246_6_fu_2305_p1(9 - 1 downto 0);

    S_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            S_ce0 <= ap_const_logic_1;
        else 
            S_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    S_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            S_ce1 <= ap_const_logic_1;
        else 
            S_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    S_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            S_ce2 <= ap_const_logic_1;
        else 
            S_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    S_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            S_ce3 <= ap_const_logic_1;
        else 
            S_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    S_ce4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            S_ce4 <= ap_const_logic_1;
        else 
            S_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    S_ce5_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            S_ce5 <= ap_const_logic_1;
        else 
            S_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    S_ce6_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            S_ce6 <= ap_const_logic_1;
        else 
            S_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    S_ce7_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            S_ce7 <= ap_const_logic_1;
        else 
            S_ce7 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln246_1_fu_1996_p2 <= std_logic_vector(unsigned(ap_const_lv11_80) + unsigned(zext_ln246_5_cast_fu_1988_p3));
    add_ln246_2_fu_2055_p2 <= std_logic_vector(unsigned(ap_const_lv11_C0) + unsigned(zext_ln246_7_cast_fu_2047_p3));
    add_ln246_3_fu_2114_p2 <= std_logic_vector(unsigned(ap_const_lv11_100) + unsigned(zext_ln246_9_cast_fu_2106_p3));
    add_ln246_4_fu_2173_p2 <= std_logic_vector(unsigned(ap_const_lv11_140) + unsigned(zext_ln246_11_cast_fu_2165_p3));
    add_ln246_5_fu_2232_p2 <= std_logic_vector(unsigned(ap_const_lv11_180) + unsigned(zext_ln246_13_cast_fu_2224_p3));
    add_ln246_6_fu_2299_p2 <= std_logic_vector(unsigned(ap_const_lv11_1C0) + unsigned(zext_ln246_15_cast_fu_2291_p3));
    add_ln246_fu_1937_p2 <= std_logic_vector(unsigned(ap_const_lv11_40) + unsigned(zext_ln246_3_cast_fu_1929_p3));
    add_ln_fu_1876_p3 <= (ap_const_lv24_0 & zext_ln246_fu_1872_p1);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_CS_fsm_state14, icmp_ln267_fu_2616_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln267_fu_2616_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_temp_phi_fu_605_p4_assign_proc : process(temp_reg_602, icmp_ln223_reg_2790_pp0_iter1_reg, R_1_fu_2602_p2, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln223_reg_2790_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_temp_phi_fu_605_p4 <= R_1_fu_2602_p2;
        else 
            ap_phi_mux_temp_phi_fu_605_p4 <= temp_reg_602;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14, icmp_ln267_fu_2616_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln267_fu_2616_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= inv_init_perm_res_0_reg_634;
    empty_27_fu_799_p2 <= "1" when (i_2_reg_557 = ap_const_lv5_F) else "0";
    empty_28_fu_805_p2 <= "1" when (i_2_reg_557 = ap_const_lv5_8) else "0";
    empty_29_fu_811_p2 <= (empty_28_fu_805_p2 or empty_27_fu_799_p2);
    empty_30_fu_817_p2 <= "1" when (i_2_reg_557 = ap_const_lv5_1) else "0";
    empty_31_fu_823_p2 <= (empty_30_fu_817_p2 or empty_29_fu_811_p2);
    empty_32_fu_829_p2 <= "1" when (i_2_reg_557 = ap_const_lv5_0) else "0";
    empty_33_fu_835_p2 <= (empty_32_fu_829_p2 or empty_31_fu_823_p2);
    i_5_fu_718_p2 <= std_logic_vector(unsigned(i_1_reg_546) + unsigned(ap_const_lv6_1));
    i_6_fu_1011_p2 <= std_logic_vector(unsigned(i_3_reg_591) + unsigned(ap_const_lv5_1));
    i_7_fu_2622_p2 <= std_logic_vector(unsigned(i_4_reg_623) + unsigned(ap_const_lv7_1));
    i_8_fu_793_p2 <= std_logic_vector(unsigned(i_2_reg_557) + unsigned(ap_const_lv5_1));
    i_fu_657_p2 <= std_logic_vector(unsigned(i_0_reg_524) + unsigned(ap_const_lv7_1));
    icmp_ln171_fu_651_p2 <= "1" when (i_0_reg_524 = ap_const_lv7_40) else "0";
    icmp_ln182_fu_712_p2 <= "1" when (i_1_reg_546 = ap_const_lv6_38) else "0";
    icmp_ln192_fu_787_p2 <= "1" when (i_2_reg_557 = ap_const_lv5_10) else "0";
    icmp_ln216_fu_958_p2 <= "1" when (j_0_reg_580 = ap_const_lv6_30) else "0";
    icmp_ln223_fu_1005_p2 <= "1" when (i_3_reg_591 = ap_const_lv5_10) else "0";
    icmp_ln267_fu_2616_p2 <= "1" when (i_4_reg_623 = ap_const_lv7_40) else "0";
    init_perm_res_fu_705_p3 <= (trunc_ln174_1_reg_2686 & trunc_ln174_fu_701_p1);
    inv_init_perm_res_fu_2656_p3 <= (trunc_ln270_1_reg_2867 & trunc_ln270_fu_2652_p1);
    j_fu_964_p2 <= std_logic_vector(unsigned(j_0_reg_580) + unsigned(ap_const_lv6_1));
    lshr_ln174_fu_696_p2 <= std_logic_vector(shift_right(unsigned(input_r),to_integer(unsigned('0' & zext_ln174_fu_692_p1(31-1 downto 0)))));
    lshr_ln184_fu_771_p2 <= std_logic_vector(shift_right(unsigned(key),to_integer(unsigned('0' & zext_ln184_fu_767_p1(31-1 downto 0)))));
    lshr_ln218_fu_989_p2 <= std_logic_vector(shift_right(unsigned(tmp_23_reg_2762),to_integer(unsigned('0' & zext_ln218_1_fu_985_p1(31-1 downto 0)))));
    lshr_ln270_fu_2647_p2 <= std_logic_vector(shift_right(unsigned(pre_output_reg_2849),to_integer(unsigned('0' & zext_ln270_fu_2643_p1(31-1 downto 0)))));
    or_ln1_fu_998_p3 <= (trunc_ln218_1_reg_2780 & trunc_ln218_fu_994_p1);
    or_ln246_1_fu_1915_p4 <= ((tmp_39_fu_1897_p3 & tmp_38_fu_1889_p3) & trunc_ln243_1_fu_1905_p4);
    or_ln246_2_fu_1974_p4 <= ((tmp_41_fu_1956_p3 & tmp_40_fu_1948_p3) & trunc_ln243_2_fu_1964_p4);
    or_ln246_3_fu_2033_p4 <= ((tmp_43_fu_2015_p3 & tmp_42_fu_2007_p3) & trunc_ln243_3_fu_2023_p4);
    or_ln246_4_fu_2092_p4 <= ((tmp_45_fu_2074_p3 & tmp_44_fu_2066_p3) & trunc_ln243_4_fu_2082_p4);
    or_ln246_5_fu_2151_p4 <= ((tmp_47_fu_2133_p3 & tmp_46_fu_2125_p3) & trunc_ln243_5_fu_2141_p4);
    or_ln246_6_fu_2210_p4 <= ((tmp_49_fu_2192_p3 & tmp_48_fu_2184_p3) & trunc_ln243_6_fu_2200_p4);
    or_ln246_7_fu_2277_p4 <= ((tmp_50_fu_2259_p3 & xor_ln241_fu_2253_p2) & trunc_ln243_7_fu_2267_p4);
    or_ln254_9_fu_2534_p33 <= (((((((((((((((((((((((((((((((trunc_ln253_1_fu_2326_p1 & tmp_51_fu_2314_p3) & trunc_ln254_fu_2322_p1) & tmp_52_fu_2330_p3) & tmp_53_fu_2338_p3) & trunc_ln254_1_fu_2346_p1) & trunc_ln253_2_fu_2350_p1) & tmp_54_fu_2354_p3) & tmp_55_fu_2362_p3) & tmp_56_fu_2370_p3) & tmp_58_fu_2386_p3) & tmp_57_fu_2378_p3) & tmp_59_fu_2394_p3) & tmp_60_fu_2402_p3) & tmp_62_fu_2418_p3) & tmp_61_fu_2410_p3) & tmp_63_fu_2430_p3) & trunc_ln253_fu_2310_p1) & trunc_ln253_4_fu_2438_p1) & tmp_64_fu_2442_p3) & trunc_ln253_5_fu_2450_p1) & tmp_65_fu_2454_p3) & tmp_67_fu_2470_p3) & tmp_66_fu_2462_p3) & tmp_68_fu_2478_p3) & tmp_69_fu_2486_p3) & tmp_70_fu_2494_p3) & tmp_71_fu_2502_p3) & tmp_72_fu_2510_p3) & tmp_73_fu_2518_p3) & trunc_ln253_3_fu_2426_p1) & tmp_74_fu_2526_p3);
    or_ln_fu_1862_p4 <= ((tmp_37_fu_1844_p3 & tmp_36_fu_1836_p3) & trunc_ln6_fu_1852_p4);
    permuted_choice_1_fu_780_p3 <= (trunc_ln184_1_reg_2719 & trunc_ln184_fu_776_p1);
    pre_output_fu_2608_p3 <= (temp_reg_602 & L_0_reg_612);
    s_input_2_cast_fu_1392_p12 <= ((((((((((ap_const_lv3_0 & trunc_ln229_fu_1036_p1) & tmp_30_fu_1362_p4) & tmp_31_fu_1372_p4) & tmp_32_fu_1382_p4) & tmp_20_fu_1108_p4) & tmp_21_fu_1118_p4) & tmp_22_fu_1128_p4) & tmp_24_fu_1138_p4) & trunc_ln229_1_fu_1096_p1) & tmp_6_fu_1028_p3);
    s_input_fu_1704_p2 <= (trunc_ln232_fu_1418_p1 xor s_input_2_cast_fu_1392_p12);
        sext_ln246_1_fu_2002_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln246_1_fu_1996_p2),64));

        sext_ln246_2_fu_2061_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln246_2_fu_2055_p2),64));

        sext_ln246_3_fu_2120_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln246_3_fu_2114_p2),64));

        sext_ln246_4_fu_2179_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln246_4_fu_2173_p2),64));

        sext_ln246_5_fu_2238_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln246_5_fu_2232_p2),64));

        sext_ln246_6_fu_2305_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln246_6_fu_2299_p2),64));

        sext_ln246_fu_1943_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln246_fu_1937_p2),64));


    sub_key_address0_assign_proc : process(sub_key_addr_reg_2757, ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln232_fu_1023_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sub_key_address0 <= zext_ln232_fu_1023_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sub_key_address0 <= sub_key_addr_reg_2757;
        else 
            sub_key_address0 <= "XXXX";
        end if; 
    end process;


    sub_key_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            sub_key_ce0 <= ap_const_logic_1;
        else 
            sub_key_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sub_key_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sub_key_we0 <= ap_const_logic_1;
        else 
            sub_key_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln174_fu_686_p2 <= std_logic_vector(signed(ap_const_lv7_40) - signed(IP_q0));
    sub_ln184_fu_761_p2 <= std_logic_vector(signed(ap_const_lv7_40) - signed(zext_ln184_2_fu_757_p1));
    sub_ln218_fu_979_p2 <= std_logic_vector(signed(ap_const_lv6_38) - signed(PC2_q0));
    sub_ln232_fu_1017_p2 <= std_logic_vector(unsigned(ap_const_lv5_F) - unsigned(i_3_reg_591));
    sub_ln270_fu_2637_p2 <= std_logic_vector(signed(ap_const_lv7_40) - signed(PI_q0));
    tmp_10_fu_1504_p9 <= (((((((tmp_31_fu_1372_p4 & tmp_32_fu_1382_p4) & tmp_20_fu_1108_p4) & tmp_21_fu_1118_p4) & tmp_22_fu_1128_p4) & tmp_24_fu_1138_p4) & trunc_ln229_1_fu_1096_p1) & tmp_6_fu_1028_p3);
    tmp_11_fu_1538_p10 <= ((((((((tmp_33_fu_1528_p4 & tmp_31_fu_1372_p4) & tmp_32_fu_1382_p4) & tmp_20_fu_1108_p4) & tmp_21_fu_1118_p4) & tmp_22_fu_1128_p4) & tmp_24_fu_1138_p4) & trunc_ln229_1_fu_1096_p1) & tmp_6_fu_1028_p3);
    tmp_12_fu_1568_p8 <= ((((((tmp_32_fu_1382_p4 & tmp_20_fu_1108_p4) & tmp_21_fu_1118_p4) & tmp_22_fu_1128_p4) & tmp_24_fu_1138_p4) & trunc_ln229_1_fu_1096_p1) & tmp_6_fu_1028_p3);
    tmp_13_fu_1600_p9 <= (((((((tmp_34_fu_1590_p4 & tmp_32_fu_1382_p4) & tmp_20_fu_1108_p4) & tmp_21_fu_1118_p4) & tmp_22_fu_1128_p4) & tmp_24_fu_1138_p4) & trunc_ln229_1_fu_1096_p1) & tmp_6_fu_1028_p3);
    tmp_14_fu_1642_p8 <= ((((((tmp_35_fu_1632_p4 & tmp_20_fu_1108_p4) & tmp_21_fu_1118_p4) & tmp_22_fu_1128_p4) & tmp_24_fu_1138_p4) & trunc_ln229_1_fu_1096_p1) & tmp_6_fu_1028_p3);
    tmp_15_fu_1048_p3 <= ap_phi_mux_temp_phi_fu_605_p4(23 downto 23);
    tmp_16_fu_1056_p3 <= ap_phi_mux_temp_phi_fu_605_p4(19 downto 19);
    tmp_17_fu_1064_p3 <= ap_phi_mux_temp_phi_fu_605_p4(15 downto 15);
    tmp_18_fu_1072_p3 <= ap_phi_mux_temp_phi_fu_605_p4(11 downto 11);
    tmp_19_fu_1080_p3 <= ap_phi_mux_temp_phi_fu_605_p4(7 downto 7);
    tmp_20_fu_1108_p4 <= ap_phi_mux_temp_phi_fu_605_p4(20 downto 15);
    tmp_21_fu_1118_p4 <= ap_phi_mux_temp_phi_fu_605_p4(16 downto 11);
    tmp_22_fu_1128_p4 <= ap_phi_mux_temp_phi_fu_605_p4(12 downto 7);
    tmp_23_fu_950_p3 <= (C_1_fu_326 & D_fu_330);
    tmp_24_fu_1138_p4 <= ap_phi_mux_temp_phi_fu_605_p4(8 downto 3);
    tmp_25_fu_1088_p3 <= ap_phi_mux_temp_phi_fu_605_p4(3 downto 3);
    tmp_26_fu_1226_p4 <= ap_phi_mux_temp_phi_fu_605_p4(17 downto 15);
    tmp_27_fu_1276_p4 <= ap_phi_mux_temp_phi_fu_605_p4(13 downto 11);
    tmp_28_fu_1320_p4 <= ap_phi_mux_temp_phi_fu_605_p4(9 downto 7);
    tmp_29_fu_1342_p4 <= ap_phi_mux_temp_phi_fu_605_p4(5 downto 3);
    tmp_2_fu_895_p3 <= C_1_fu_326(27 downto 27);
    tmp_30_fu_1362_p4 <= ap_phi_mux_temp_phi_fu_605_p4(31 downto 27);
    tmp_31_fu_1372_p4 <= ap_phi_mux_temp_phi_fu_605_p4(28 downto 23);
    tmp_32_fu_1382_p4 <= ap_phi_mux_temp_phi_fu_605_p4(24 downto 19);
    tmp_33_fu_1528_p4 <= ap_phi_mux_temp_phi_fu_605_p4(29 downto 27);
    tmp_34_fu_1590_p4 <= ap_phi_mux_temp_phi_fu_605_p4(25 downto 23);
    tmp_35_fu_1632_p4 <= ap_phi_mux_temp_phi_fu_605_p4(21 downto 19);
    tmp_36_fu_1836_p3 <= xor_ln232_21_fu_1830_p2(42 downto 42);
    tmp_37_fu_1844_p3 <= xor_ln232_20_fu_1824_p2(47 downto 47);
    tmp_38_fu_1889_p3 <= xor_ln232_19_fu_1818_p2(36 downto 36);
    tmp_39_fu_1897_p3 <= xor_ln232_18_fu_1812_p2(41 downto 41);
    tmp_3_fu_915_p3 <= D_fu_330(27 downto 27);
    tmp_40_fu_1948_p3 <= xor_ln232_16_fu_1800_p2(30 downto 30);
    tmp_41_fu_1956_p3 <= xor_ln232_15_fu_1794_p2(35 downto 35);
    tmp_42_fu_2007_p3 <= xor_ln232_13_fu_1782_p2(24 downto 24);
    tmp_43_fu_2015_p3 <= xor_ln232_12_fu_1776_p2(29 downto 29);
    tmp_44_fu_2066_p3 <= xor_ln232_10_fu_1764_p2(18 downto 18);
    tmp_45_fu_2074_p3 <= xor_ln232_9_fu_1758_p2(23 downto 23);
    tmp_46_fu_2125_p3 <= xor_ln232_7_fu_1746_p2(12 downto 12);
    tmp_47_fu_2133_p3 <= xor_ln232_6_fu_1740_p2(17 downto 17);
    tmp_48_fu_2184_p3 <= xor_ln232_4_fu_1728_p2(6 downto 6);
    tmp_49_fu_2192_p3 <= xor_ln232_3_fu_1722_p2(11 downto 11);
    tmp_4_fu_845_p4 <= C_1_fu_326(27 downto 26);
    tmp_50_fu_2259_p3 <= xor_ln240_fu_2247_p2(5 downto 5);
    tmp_51_fu_2314_p3 <= S_q1(1 downto 1);
    tmp_52_fu_2330_p3 <= S_q5(3 downto 3);
    tmp_53_fu_2338_p3 <= S_q7(3 downto 3);
    tmp_54_fu_2354_p3 <= S_q4(3 downto 3);
    tmp_55_fu_2362_p3 <= S_q0(3 downto 3);
    tmp_56_fu_2370_p3 <= S_q3(1 downto 1);
    tmp_57_fu_2378_p3 <= S_q6(2 downto 2);
    tmp_58_fu_2386_p3 <= S_q5(1 downto 1);
    tmp_59_fu_2394_p3 <= S_q1(3 downto 3);
    tmp_5_fu_867_p4 <= D_fu_330(27 downto 26);
    tmp_60_fu_2402_p3 <= S_q4(2 downto 2);
    tmp_61_fu_2410_p3 <= S_q2(2 downto 2);
    tmp_62_fu_2418_p3 <= S_q7(1 downto 1);
    tmp_63_fu_2430_p3 <= S_q0(2 downto 2);
    tmp_64_fu_2442_p3 <= S_q3(2 downto 2);
    tmp_65_fu_2454_p3 <= S_q6(1 downto 1);
    tmp_66_fu_2462_p3 <= S_q2(3 downto 3);
    tmp_67_fu_2470_p3 <= S_q0(1 downto 1);
    tmp_68_fu_2478_p3 <= S_q4(1 downto 1);
    tmp_69_fu_2486_p3 <= S_q3(3 downto 3);
    tmp_6_fu_1028_p3 <= ap_phi_mux_temp_phi_fu_605_p4(31 downto 31);
    tmp_70_fu_2494_p3 <= S_q7(2 downto 2);
    tmp_71_fu_2502_p3 <= S_q1(2 downto 2);
    tmp_72_fu_2510_p3 <= S_q5(2 downto 2);
    tmp_73_fu_2518_p3 <= S_q2(1 downto 1);
    tmp_74_fu_2526_p3 <= S_q6(3 downto 3);
    tmp_7_fu_1040_p3 <= ap_phi_mux_temp_phi_fu_605_p4(27 downto 27);
    tmp_8_fu_1426_p10 <= ((((((((tmp_7_fu_1040_p3 & tmp_31_fu_1372_p4) & tmp_32_fu_1382_p4) & tmp_20_fu_1108_p4) & tmp_21_fu_1118_p4) & tmp_22_fu_1128_p4) & tmp_24_fu_1138_p4) & trunc_ln229_1_fu_1096_p1) & tmp_6_fu_1028_p3);
    tmp_9_fu_1452_p11 <= (((((((((trunc_ln229_fu_1036_p1 & tmp_30_fu_1362_p4) & tmp_31_fu_1372_p4) & tmp_32_fu_1382_p4) & tmp_20_fu_1108_p4) & tmp_21_fu_1118_p4) & tmp_22_fu_1128_p4) & tmp_24_fu_1138_p4) & trunc_ln229_1_fu_1096_p1) & tmp_6_fu_1028_p3);
    tmp_s_fu_1480_p9 <= (((((((tmp_15_fu_1048_p3 & tmp_32_fu_1382_p4) & tmp_20_fu_1108_p4) & tmp_21_fu_1118_p4) & tmp_22_fu_1128_p4) & tmp_24_fu_1138_p4) & trunc_ln229_1_fu_1096_p1) & tmp_6_fu_1028_p3);
    trunc_ln174_1_fu_668_p1 <= init_perm_res_0_reg_513(63 - 1 downto 0);
    trunc_ln174_fu_701_p1 <= lshr_ln174_fu_696_p2(1 - 1 downto 0);
    trunc_ln184_1_fu_729_p1 <= permuted_choice_1_0_reg_535(63 - 1 downto 0);
    trunc_ln184_fu_776_p1 <= lshr_ln184_fu_771_p2(1 - 1 downto 0);
    trunc_ln197_fu_903_p1 <= C_1_fu_326(27 - 1 downto 0);
    trunc_ln198_fu_923_p1 <= D_fu_330(27 - 1 downto 0);
    trunc_ln203_fu_841_p1 <= C_1_fu_326(26 - 1 downto 0);
    trunc_ln204_fu_863_p1 <= D_fu_330(26 - 1 downto 0);
    trunc_ln218_1_fu_975_p1 <= sub_key_load_1_reg_568(63 - 1 downto 0);
    trunc_ln218_fu_994_p1 <= lshr_ln218_fu_989_p2(1 - 1 downto 0);
    trunc_ln229_10_fu_1286_p6 <= ((((tmp_27_fu_1276_p4 & tmp_22_fu_1128_p4) & tmp_24_fu_1138_p4) & trunc_ln229_1_fu_1096_p1) & ap_const_lv1_0);
    trunc_ln229_11_fu_1300_p4 <= ((tmp_25_fu_1088_p3 & trunc_ln229_1_fu_1096_p1) & ap_const_lv1_0);
    trunc_ln229_12_fu_1310_p4 <= ((tmp_24_fu_1138_p4 & trunc_ln229_1_fu_1096_p1) & ap_const_lv1_0);
    trunc_ln229_13_fu_1330_p5 <= (((tmp_28_fu_1320_p4 & tmp_24_fu_1138_p4) & trunc_ln229_1_fu_1096_p1) & ap_const_lv1_0);
    trunc_ln229_14_fu_1352_p4 <= ((tmp_29_fu_1342_p4 & trunc_ln229_1_fu_1096_p1) & ap_const_lv1_0);
    trunc_ln229_1_fu_1096_p1 <= ap_phi_mux_temp_phi_fu_605_p4(5 - 1 downto 0);
    trunc_ln229_2_fu_1182_p7 <= (((((tmp_20_fu_1108_p4 & tmp_21_fu_1118_p4) & tmp_22_fu_1128_p4) & tmp_24_fu_1138_p4) & trunc_ln229_1_fu_1096_p1) & ap_const_lv1_0);
    trunc_ln229_3_fu_1198_p6 <= ((((tmp_18_fu_1072_p3 & tmp_22_fu_1128_p4) & tmp_24_fu_1138_p4) & trunc_ln229_1_fu_1096_p1) & ap_const_lv1_0);
    trunc_ln229_4_fu_1212_p6 <= ((((tmp_21_fu_1118_p4 & tmp_22_fu_1128_p4) & tmp_24_fu_1138_p4) & trunc_ln229_1_fu_1096_p1) & ap_const_lv1_0);
    trunc_ln229_5_fu_1236_p7 <= (((((tmp_26_fu_1226_p4 & tmp_21_fu_1118_p4) & tmp_22_fu_1128_p4) & tmp_24_fu_1138_p4) & trunc_ln229_1_fu_1096_p1) & ap_const_lv1_0);
    trunc_ln229_6_fu_1100_p3 <= (trunc_ln229_1_fu_1096_p1 & ap_const_lv1_0);
    trunc_ln229_7_fu_1252_p5 <= (((tmp_19_fu_1080_p3 & tmp_24_fu_1138_p4) & trunc_ln229_1_fu_1096_p1) & ap_const_lv1_0);
    trunc_ln229_8_fu_1148_p8 <= ((((((tmp_16_fu_1056_p3 & tmp_20_fu_1108_p4) & tmp_21_fu_1118_p4) & tmp_22_fu_1128_p4) & tmp_24_fu_1138_p4) & trunc_ln229_1_fu_1096_p1) & ap_const_lv1_0);
    trunc_ln229_9_fu_1264_p5 <= (((tmp_22_fu_1128_p4 & tmp_24_fu_1138_p4) & trunc_ln229_1_fu_1096_p1) & ap_const_lv1_0);
    trunc_ln229_fu_1036_p1 <= ap_phi_mux_temp_phi_fu_605_p4(1 - 1 downto 0);
    trunc_ln229_s_fu_1166_p7 <= (((((tmp_17_fu_1064_p3 & tmp_21_fu_1118_p4) & tmp_22_fu_1128_p4) & tmp_24_fu_1138_p4) & trunc_ln229_1_fu_1096_p1) & ap_const_lv1_0);
    trunc_ln232_10_fu_1624_p1 <= sub_key_q0(25 - 1 downto 0);
    trunc_ln232_11_fu_1628_p1 <= sub_key_q0(30 - 1 downto 0);
    trunc_ln232_12_fu_1660_p1 <= sub_key_q0(33 - 1 downto 0);
    trunc_ln232_13_fu_1664_p1 <= sub_key_q0(19 - 1 downto 0);
    trunc_ln232_14_fu_1668_p1 <= sub_key_q0(24 - 1 downto 0);
    trunc_ln232_15_fu_1672_p1 <= sub_key_q0(27 - 1 downto 0);
    trunc_ln232_16_fu_1676_p1 <= sub_key_q0(13 - 1 downto 0);
    trunc_ln232_17_fu_1680_p1 <= sub_key_q0(18 - 1 downto 0);
    trunc_ln232_18_fu_1684_p1 <= sub_key_q0(21 - 1 downto 0);
    trunc_ln232_19_fu_1688_p1 <= sub_key_q0(7 - 1 downto 0);
    trunc_ln232_1_fu_1422_p1 <= sub_key_q0(6 - 1 downto 0);
    trunc_ln232_20_fu_1692_p1 <= sub_key_q0(12 - 1 downto 0);
    trunc_ln232_21_fu_1696_p1 <= sub_key_q0(15 - 1 downto 0);
    trunc_ln232_22_fu_1700_p1 <= sub_key_q0(9 - 1 downto 0);
    trunc_ln232_2_fu_1448_p1 <= sub_key_q0(43 - 1 downto 0);
    trunc_ln232_3_fu_1476_p1 <= sub_key_q0(48 - 1 downto 0);
    trunc_ln232_4_fu_1500_p1 <= sub_key_q0(37 - 1 downto 0);
    trunc_ln232_5_fu_1524_p1 <= sub_key_q0(42 - 1 downto 0);
    trunc_ln232_6_fu_1560_p1 <= sub_key_q0(45 - 1 downto 0);
    trunc_ln232_7_fu_1564_p1 <= sub_key_q0(31 - 1 downto 0);
    trunc_ln232_8_fu_1586_p1 <= sub_key_q0(36 - 1 downto 0);
    trunc_ln232_9_fu_1620_p1 <= sub_key_q0(39 - 1 downto 0);
    trunc_ln232_fu_1418_p1 <= sub_key_q0(51 - 1 downto 0);
    trunc_ln240_fu_2243_p1 <= sub_key_q0(1 - 1 downto 0);
    trunc_ln243_1_fu_1905_p4 <= xor_ln232_17_fu_1806_p2(40 downto 37);
    trunc_ln243_2_fu_1964_p4 <= xor_ln232_14_fu_1788_p2(34 downto 31);
    trunc_ln243_3_fu_2023_p4 <= xor_ln232_11_fu_1770_p2(28 downto 25);
    trunc_ln243_4_fu_2082_p4 <= xor_ln232_8_fu_1752_p2(22 downto 19);
    trunc_ln243_5_fu_2141_p4 <= xor_ln232_5_fu_1734_p2(16 downto 13);
    trunc_ln243_6_fu_2200_p4 <= xor_ln232_2_fu_1716_p2(10 downto 7);
    trunc_ln243_7_fu_2267_p4 <= xor_ln232_1_fu_1710_p2(4 downto 1);
    trunc_ln253_1_fu_2326_p1 <= S_q3(1 - 1 downto 0);
    trunc_ln253_2_fu_2350_p1 <= S_q6(1 - 1 downto 0);
    trunc_ln253_3_fu_2426_p1 <= S_q0(1 - 1 downto 0);
    trunc_ln253_4_fu_2438_p1 <= S_q5(1 - 1 downto 0);
    trunc_ln253_5_fu_2450_p1 <= S_q7(1 - 1 downto 0);
    trunc_ln253_fu_2310_p1 <= S_q1(1 - 1 downto 0);
    trunc_ln254_1_fu_2346_p1 <= S_q2(1 - 1 downto 0);
    trunc_ln254_fu_2322_p1 <= S_q4(1 - 1 downto 0);
    trunc_ln270_1_fu_2633_p1 <= inv_init_perm_res_0_reg_634(63 - 1 downto 0);
    trunc_ln270_fu_2652_p1 <= lshr_ln270_fu_2647_p2(1 - 1 downto 0);
    trunc_ln6_fu_1852_p4 <= s_input_fu_1704_p2(46 downto 43);
    xor_ln232_10_fu_1764_p2 <= (trunc_ln232_13_fu_1664_p1 xor trunc_ln229_3_fu_1198_p6);
    xor_ln232_11_fu_1770_p2 <= (trunc_ln232_12_fu_1660_p1 xor tmp_14_fu_1642_p8);
    xor_ln232_12_fu_1776_p2 <= (trunc_ln232_11_fu_1628_p1 xor trunc_ln229_2_fu_1182_p7);
    xor_ln232_13_fu_1782_p2 <= (trunc_ln232_10_fu_1624_p1 xor trunc_ln229_s_fu_1166_p7);
    xor_ln232_14_fu_1788_p2 <= (trunc_ln232_9_fu_1620_p1 xor tmp_13_fu_1600_p9);
    xor_ln232_15_fu_1794_p2 <= (trunc_ln232_8_fu_1586_p1 xor tmp_12_fu_1568_p8);
    xor_ln232_16_fu_1800_p2 <= (trunc_ln232_7_fu_1564_p1 xor trunc_ln229_8_fu_1148_p8);
    xor_ln232_17_fu_1806_p2 <= (trunc_ln232_6_fu_1560_p1 xor tmp_11_fu_1538_p10);
    xor_ln232_18_fu_1812_p2 <= (trunc_ln232_5_fu_1524_p1 xor tmp_10_fu_1504_p9);
    xor_ln232_19_fu_1818_p2 <= (trunc_ln232_4_fu_1500_p1 xor tmp_s_fu_1480_p9);
    xor_ln232_1_fu_1710_p2 <= (trunc_ln232_22_fu_1700_p1 xor trunc_ln229_14_fu_1352_p4);
    xor_ln232_20_fu_1824_p2 <= (trunc_ln232_3_fu_1476_p1 xor tmp_9_fu_1452_p11);
    xor_ln232_21_fu_1830_p2 <= (trunc_ln232_2_fu_1448_p1 xor tmp_8_fu_1426_p10);
    xor_ln232_2_fu_1716_p2 <= (trunc_ln232_21_fu_1696_p1 xor trunc_ln229_13_fu_1330_p5);
    xor_ln232_3_fu_1722_p2 <= (trunc_ln232_20_fu_1692_p1 xor trunc_ln229_12_fu_1310_p4);
    xor_ln232_4_fu_1728_p2 <= (trunc_ln232_19_fu_1688_p1 xor trunc_ln229_11_fu_1300_p4);
    xor_ln232_5_fu_1734_p2 <= (trunc_ln232_18_fu_1684_p1 xor trunc_ln229_10_fu_1286_p6);
    xor_ln232_6_fu_1740_p2 <= (trunc_ln232_17_fu_1680_p1 xor trunc_ln229_9_fu_1264_p5);
    xor_ln232_7_fu_1746_p2 <= (trunc_ln232_16_fu_1676_p1 xor trunc_ln229_7_fu_1252_p5);
    xor_ln232_8_fu_1752_p2 <= (trunc_ln232_15_fu_1672_p1 xor trunc_ln229_5_fu_1236_p7);
    xor_ln232_9_fu_1758_p2 <= (trunc_ln232_14_fu_1668_p1 xor trunc_ln229_4_fu_1212_p6);
    xor_ln240_fu_2247_p2 <= (trunc_ln232_1_fu_1422_p1 xor trunc_ln229_6_fu_1100_p3);
    xor_ln241_fu_2253_p2 <= (trunc_ln240_fu_2243_p1 xor tmp_6_fu_1028_p3);
    zext_ln174_1_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_524),64));
    zext_ln174_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln174_fu_686_p2),64));
    zext_ln184_1_fu_724_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_546),64));
    zext_ln184_2_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(PC1_q0),7));
    zext_ln184_fu_767_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln184_fu_761_p2),64));
    zext_ln214_fu_945_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_557),64));
    zext_ln218_1_fu_985_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln218_fu_979_p2),56));
    zext_ln218_fu_970_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_580),64));
    zext_ln232_fu_1023_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln232_fu_1017_p2),64));
    zext_ln246_11_cast_fu_2165_p3 <= (ap_const_lv3_0 & zext_ln246_6_fu_2161_p1);
    zext_ln246_13_cast_fu_2224_p3 <= (ap_const_lv3_0 & zext_ln246_7_fu_2220_p1);
    zext_ln246_15_cast_fu_2291_p3 <= (ap_const_lv3_0 & zext_ln246_8_fu_2287_p1);
    zext_ln246_1_fu_1884_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln_fu_1876_p3),64));
    zext_ln246_2_fu_1925_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln246_1_fu_1915_p4),8));
    zext_ln246_3_cast_fu_1929_p3 <= (ap_const_lv3_0 & zext_ln246_2_fu_1925_p1);
    zext_ln246_3_fu_1984_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln246_2_fu_1974_p4),8));
    zext_ln246_4_fu_2043_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln246_3_fu_2033_p4),8));
    zext_ln246_5_cast_fu_1988_p3 <= (ap_const_lv3_0 & zext_ln246_3_fu_1984_p1);
    zext_ln246_5_fu_2102_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln246_4_fu_2092_p4),8));
    zext_ln246_6_fu_2161_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln246_5_fu_2151_p4),8));
    zext_ln246_7_cast_fu_2047_p3 <= (ap_const_lv3_0 & zext_ln246_4_fu_2043_p1);
    zext_ln246_7_fu_2220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln246_6_fu_2210_p4),8));
    zext_ln246_8_fu_2287_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln246_7_fu_2277_p4),8));
    zext_ln246_9_cast_fu_2106_p3 <= (ap_const_lv3_0 & zext_ln246_5_fu_2102_p1);
    zext_ln246_fu_1872_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_1862_p4),8));
    zext_ln270_1_fu_2628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_623),64));
    zext_ln270_fu_2643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln270_fu_2637_p2),64));
end behav;

// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="des_dec,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35tl-cpg236-2L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.689625,HLS_SYN_LAT=5045,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=0,HLS_SYN_FF=1266,HLS_SYN_LUT=2750,HLS_VERSION=2019_1}" *)

module des_dec (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r,
        key,
        ap_return
);

parameter    ap_ST_fsm_state1 = 21'd1;
parameter    ap_ST_fsm_state2 = 21'd2;
parameter    ap_ST_fsm_state3 = 21'd4;
parameter    ap_ST_fsm_state4 = 21'd8;
parameter    ap_ST_fsm_state5 = 21'd16;
parameter    ap_ST_fsm_state6 = 21'd32;
parameter    ap_ST_fsm_state7 = 21'd64;
parameter    ap_ST_fsm_state8 = 21'd128;
parameter    ap_ST_fsm_state9 = 21'd256;
parameter    ap_ST_fsm_state10 = 21'd512;
parameter    ap_ST_fsm_state11 = 21'd1024;
parameter    ap_ST_fsm_state12 = 21'd2048;
parameter    ap_ST_fsm_state13 = 21'd4096;
parameter    ap_ST_fsm_state14 = 21'd8192;
parameter    ap_ST_fsm_state15 = 21'd16384;
parameter    ap_ST_fsm_state16 = 21'd32768;
parameter    ap_ST_fsm_state17 = 21'd65536;
parameter    ap_ST_fsm_state18 = 21'd131072;
parameter    ap_ST_fsm_state19 = 21'd262144;
parameter    ap_ST_fsm_state20 = 21'd524288;
parameter    ap_ST_fsm_state21 = 21'd1048576;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] input_r;
input  [63:0] key;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [20:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] IP_address0;
reg    IP_ce0;
wire   [6:0] IP_q0;
wire   [5:0] IP_address1;
reg    IP_ce1;
wire   [6:0] IP_q1;
wire   [5:0] PC1_address0;
reg    PC1_ce0;
wire   [5:0] PC1_q0;
wire   [5:0] PC2_address0;
reg    PC2_ce0;
wire   [5:0] PC2_q0;
wire   [5:0] E_address0;
reg    E_ce0;
wire   [5:0] E_q0;
wire   [8:0] S_address0;
reg    S_ce0;
wire   [3:0] S_q0;
wire   [4:0] P_address0;
reg    P_ce0;
wire   [5:0] P_q0;
wire   [5:0] PI_address0;
reg    PI_ce0;
wire   [6:0] PI_q0;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln171_fu_520_p2;
wire   [61:0] trunc_ln173_fu_541_p1;
reg   [61:0] trunc_ln173_reg_1377;
wire   [6:0] add_ln171_fu_550_p2;
reg   [6:0] add_ln171_reg_1387;
reg   [31:0] L_reg_1392;
wire   [31:0] R_fu_566_p1;
reg   [31:0] R_reg_1397;
wire   [63:0] or_ln_fu_608_p4;
wire    ap_CS_fsm_state3;
wire   [5:0] i_fu_623_p2;
reg   [5:0] i_reg_1410;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln182_fu_617_p2;
wire   [62:0] trunc_ln184_1_fu_634_p1;
reg   [62:0] trunc_ln184_1_reg_1420;
wire   [63:0] permuted_choice_1_fu_685_p3;
wire    ap_CS_fsm_state5;
wire   [4:0] i_6_fu_698_p2;
reg   [4:0] i_6_reg_1449;
wire    ap_CS_fsm_state6;
reg   [3:0] sub_key_addr_reg_1457;
wire   [0:0] icmp_ln192_fu_692_p2;
wire   [55:0] tmp_9_fu_860_p3;
reg   [55:0] tmp_9_reg_1469;
wire    ap_CS_fsm_state7;
wire   [5:0] j_4_fu_874_p2;
reg   [5:0] j_4_reg_1477;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln216_fu_868_p2;
wire   [62:0] trunc_ln218_1_fu_885_p1;
reg   [62:0] trunc_ln218_1_reg_1487;
wire   [63:0] or_ln1_fu_908_p3;
wire    ap_CS_fsm_state9;
wire   [4:0] i_7_fu_921_p2;
reg   [4:0] i_7_reg_1500;
wire    ap_CS_fsm_state10;
wire   [63:0] pre_output_fu_927_p3;
reg   [63:0] pre_output_reg_1505;
wire   [0:0] icmp_ln223_fu_915_p2;
wire   [5:0] j_fu_941_p2;
reg   [5:0] j_reg_1513;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln227_fu_935_p2;
wire   [63:0] s_input_fu_987_p3;
wire    ap_CS_fsm_state12;
wire   [46:0] xor_ln232_fu_1011_p2;
reg   [46:0] xor_ln232_reg_1533;
wire    ap_CS_fsm_state13;
wire   [47:0] xor_ln232_1_fu_1017_p2;
reg   [47:0] xor_ln232_1_reg_1538;
wire   [3:0] j_5_fu_1029_p2;
reg   [3:0] j_5_reg_1546;
wire    ap_CS_fsm_state14;
wire   [6:0] sub_ln240_fu_1065_p2;
reg   [6:0] sub_ln240_reg_1551;
wire   [0:0] icmp_ln235_fu_1023_p2;
wire   [5:0] sub_ln240_2_fu_1089_p2;
reg   [5:0] sub_ln240_2_reg_1556;
wire   [5:0] sub_ln243_1_fu_1101_p2;
reg   [5:0] sub_ln243_1_reg_1561;
wire   [10:0] add_ln246_1_fu_1230_p2;
reg   [10:0] add_ln246_1_reg_1566;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire   [5:0] j_6_fu_1263_p2;
reg   [5:0] j_6_reg_1579;
wire    ap_CS_fsm_state18;
wire   [0:0] icmp_ln252_fu_1257_p2;
wire   [30:0] trunc_ln254_1_fu_1274_p1;
reg   [30:0] trunc_ln254_1_reg_1589;
wire   [31:0] R_1_fu_1278_p2;
wire   [31:0] f_function_res_fu_1304_p3;
wire    ap_CS_fsm_state19;
wire   [6:0] i_5_fu_1317_p2;
reg   [6:0] i_5_reg_1607;
wire    ap_CS_fsm_state20;
wire   [0:0] icmp_ln267_fu_1311_p2;
wire   [62:0] trunc_ln270_1_fu_1328_p1;
reg   [62:0] trunc_ln270_1_reg_1617;
wire   [63:0] inv_init_perm_res_fu_1351_p3;
wire    ap_CS_fsm_state21;
reg   [3:0] sub_key_address0;
reg    sub_key_ce0;
reg    sub_key_we0;
wire   [63:0] sub_key_q0;
reg   [63:0] init_perm_res_0_0_reg_321;
reg   [6:0] i_0_0_reg_332;
reg   [63:0] permuted_choice_1_0_reg_343;
reg   [5:0] i_1_reg_354;
reg   [4:0] i_2_reg_365;
reg   [63:0] sub_key_load_1_reg_376;
reg   [5:0] j_0_reg_388;
reg   [31:0] temp_reg_399;
reg   [31:0] L_0_reg_409;
reg   [4:0] i_3_reg_420;
reg   [63:0] s_input_0_reg_432;
reg   [5:0] j_1_reg_444;
reg   [3:0] j_2_reg_455;
wire    ap_CS_fsm_state17;
reg   [31:0] f_function_res_0_reg_467;
reg   [5:0] j_3_reg_478;
reg   [6:0] i_4_reg_489;
reg   [63:0] inv_init_perm_res_0_reg_500;
wire   [63:0] zext_ln174_fu_526_p1;
wire   [63:0] zext_ln174_3_fu_545_p1;
wire   [63:0] zext_ln184_1_fu_629_p1;
wire   [63:0] zext_ln214_fu_850_p1;
wire   [63:0] zext_ln218_fu_880_p1;
wire   [63:0] zext_ln229_fu_947_p1;
wire   [63:0] zext_ln232_fu_958_p1;
wire  signed [63:0] sext_ln246_3_fu_1236_p1;
wire   [63:0] zext_ln254_fu_1269_p1;
wire   [63:0] zext_ln270_1_fu_1323_p1;
reg   [27:0] C_1_fu_176;
wire   [27:0] C_2_fu_760_p3;
wire   [0:0] empty_18_fu_740_p2;
wire   [27:0] C_3_fu_812_p3;
reg   [27:0] D_fu_180;
wire   [27:0] D_1_fu_648_p1;
wire   [27:0] D_2_fu_782_p3;
wire   [27:0] D_3_fu_832_p3;
reg   [31:0] s_output_1_fu_184;
wire   [31:0] s_output_fu_1244_p3;
wire   [5:0] empty_9_fu_531_p1;
wire   [5:0] or_ln171_fu_535_p2;
wire   [6:0] sub_ln174_fu_570_p2;
wire   [63:0] zext_ln174_2_fu_576_p1;
wire   [63:0] lshr_ln174_fu_580_p2;
wire   [6:0] sub_ln174_1_fu_589_p2;
wire   [63:0] zext_ln174_1_fu_595_p1;
wire   [63:0] lshr_ln174_1_fu_599_p2;
wire   [0:0] trunc_ln174_fu_585_p1;
wire   [0:0] trunc_ln174_1_fu_604_p1;
wire   [6:0] zext_ln184_2_fu_662_p1;
wire   [6:0] sub_ln184_fu_666_p2;
wire   [63:0] zext_ln184_fu_672_p1;
wire   [63:0] lshr_ln184_fu_676_p2;
wire   [0:0] trunc_ln184_fu_681_p1;
wire   [0:0] empty_13_fu_710_p2;
wire   [0:0] empty_12_fu_704_p2;
wire   [0:0] empty_15_fu_722_p2;
wire   [0:0] empty_14_fu_716_p2;
wire   [0:0] empty_17_fu_734_p2;
wire   [0:0] empty_16_fu_728_p2;
wire   [25:0] trunc_ln203_fu_746_p1;
wire   [1:0] tmp_3_fu_750_p4;
wire   [25:0] trunc_ln204_fu_768_p1;
wire   [1:0] tmp_s_fu_772_p4;
wire   [26:0] trunc_ln197_fu_808_p1;
wire   [0:0] tmp_2_fu_800_p3;
wire   [26:0] trunc_ln198_fu_828_p1;
wire   [0:0] tmp_4_fu_820_p3;
wire   [5:0] sub_ln218_fu_889_p2;
wire   [55:0] zext_ln218_1_fu_895_p1;
wire   [55:0] lshr_ln218_fu_899_p2;
wire   [0:0] trunc_ln218_fu_904_p1;
wire   [4:0] sub_ln232_fu_952_p2;
wire   [5:0] sub_ln229_fu_963_p2;
wire   [31:0] zext_ln229_1_fu_969_p1;
wire   [31:0] lshr_ln229_fu_973_p2;
wire   [62:0] trunc_ln229_1_fu_983_p1;
wire   [0:0] trunc_ln229_fu_979_p1;
wire   [46:0] trunc_ln232_3_fu_1007_p1;
wire   [46:0] trunc_ln232_2_fu_1003_p1;
wire   [47:0] trunc_ln232_1_fu_999_p1;
wire   [47:0] trunc_ln232_fu_995_p1;
wire   [2:0] trunc_ln240_fu_1035_p1;
wire   [5:0] shl_ln_fu_1039_p3;
wire   [3:0] shl_ln240_fu_1051_p2;
wire   [6:0] zext_ln240_fu_1047_p1;
wire   [6:0] zext_ln240_2_fu_1061_p1;
wire   [4:0] shl_ln240_1_fu_1071_p3;
wire   [5:0] zext_ln240_1_fu_1057_p1;
wire   [5:0] sub_ln240_1_fu_1083_p2;
wire   [5:0] zext_ln240_5_fu_1079_p1;
wire   [5:0] sub_ln243_fu_1095_p2;
wire  signed [31:0] sext_ln240_fu_1107_p1;
wire   [47:0] zext_ln240_4_fu_1114_p1;
wire   [47:0] lshr_ln240_fu_1118_p2;
wire   [47:0] and_ln240_fu_1124_p2;
wire   [47:0] zext_ln240_6_fu_1129_p1;
wire   [47:0] lshr_ln240_1_fu_1132_p2;
wire   [0:0] tmp_5_fu_1142_p3;
wire   [0:0] trunc_ln240_1_fu_1138_p1;
wire   [46:0] zext_ln240_3_fu_1110_p1;
wire   [46:0] lshr_ln243_fu_1166_p2;
wire   [46:0] and_ln243_fu_1172_p2;
wire   [46:0] zext_ln243_fu_1177_p1;
wire   [2:0] tmp_6_fu_1156_p4;
wire   [0:0] or_ln241_fu_1150_p2;
wire   [7:0] tmp_7_fu_1186_p4;
wire   [46:0] lshr_ln243_1_fu_1180_p2;
wire   [7:0] trunc_ln246_fu_1200_p1;
wire  signed [8:0] sext_ln246_1_fu_1204_p1;
wire  signed [8:0] sext_ln246_fu_1196_p1;
wire   [8:0] add_ln246_fu_1208_p2;
wire   [9:0] tmp_8_fu_1218_p3;
wire  signed [10:0] sext_ln246_2_fu_1214_p1;
wire   [10:0] zext_ln246_fu_1226_p1;
wire   [27:0] trunc_ln246_1_fu_1240_p1;
wire   [5:0] sub_ln254_fu_1284_p2;
wire   [31:0] zext_ln254_1_fu_1290_p1;
wire   [31:0] lshr_ln254_fu_1294_p2;
wire   [0:0] trunc_ln254_fu_1300_p1;
wire   [6:0] sub_ln270_fu_1332_p2;
wire   [63:0] zext_ln270_fu_1338_p1;
wire   [63:0] lshr_ln270_fu_1342_p2;
wire   [0:0] trunc_ln270_fu_1347_p1;
reg   [20:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 21'd1;
end

des_dec_IP #(
    .DataWidth( 7 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
IP_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(IP_address0),
    .ce0(IP_ce0),
    .q0(IP_q0),
    .address1(IP_address1),
    .ce1(IP_ce1),
    .q1(IP_q1)
);

des_dec_PC1 #(
    .DataWidth( 6 ),
    .AddressRange( 56 ),
    .AddressWidth( 6 ))
PC1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(PC1_address0),
    .ce0(PC1_ce0),
    .q0(PC1_q0)
);

des_dec_PC2 #(
    .DataWidth( 6 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
PC2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(PC2_address0),
    .ce0(PC2_ce0),
    .q0(PC2_q0)
);

des_dec_E #(
    .DataWidth( 6 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
E_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(E_address0),
    .ce0(E_ce0),
    .q0(E_q0)
);

des_dec_S #(
    .DataWidth( 4 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
S_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(S_address0),
    .ce0(S_ce0),
    .q0(S_q0)
);

des_dec_P #(
    .DataWidth( 6 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
P_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(P_address0),
    .ce0(P_ce0),
    .q0(P_q0)
);

des_dec_PI #(
    .DataWidth( 7 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
PI_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(PI_address0),
    .ce0(PI_ce0),
    .q0(PI_q0)
);

des_dec_sub_key #(
    .DataWidth( 64 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
sub_key_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sub_key_address0),
    .ce0(sub_key_ce0),
    .we0(sub_key_we0),
    .d0(sub_key_load_1_reg_376),
    .q0(sub_key_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (empty_18_fu_740_p2 == 1'd1) & (icmp_ln192_fu_692_p2 == 1'd0))) begin
        C_1_fu_176 <= C_3_fu_812_p3;
    end else if (((1'b1 == ap_CS_fsm_state6) & (empty_18_fu_740_p2 == 1'd0) & (icmp_ln192_fu_692_p2 == 1'd0))) begin
        C_1_fu_176 <= C_2_fu_760_p3;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln182_fu_617_p2 == 1'd1))) begin
        C_1_fu_176 <= {{permuted_choice_1_0_reg_343[55:28]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (empty_18_fu_740_p2 == 1'd1) & (icmp_ln192_fu_692_p2 == 1'd0))) begin
        D_fu_180 <= D_3_fu_832_p3;
    end else if (((1'b1 == ap_CS_fsm_state6) & (empty_18_fu_740_p2 == 1'd0) & (icmp_ln192_fu_692_p2 == 1'd0))) begin
        D_fu_180 <= D_2_fu_782_p3;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln182_fu_617_p2 == 1'd1))) begin
        D_fu_180 <= D_1_fu_648_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln192_fu_692_p2 == 1'd1))) begin
        L_0_reg_409 <= L_reg_1392;
    end else if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln252_fu_1257_p2 == 1'd1))) begin
        L_0_reg_409 <= temp_reg_399;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln235_fu_1023_p2 == 1'd1))) begin
        f_function_res_0_reg_467 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        f_function_res_0_reg_467 <= f_function_res_fu_1304_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_0_reg_332 <= add_ln171_reg_1387;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_0_reg_332 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_1_reg_354 <= i_reg_1410;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln171_fu_520_p2 == 1'd1))) begin
        i_1_reg_354 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln216_fu_868_p2 == 1'd1))) begin
        i_2_reg_365 <= i_6_reg_1449;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln182_fu_617_p2 == 1'd1))) begin
        i_2_reg_365 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln192_fu_692_p2 == 1'd1))) begin
        i_3_reg_420 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln252_fu_1257_p2 == 1'd1))) begin
        i_3_reg_420 <= i_7_reg_1500;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        i_4_reg_489 <= i_5_reg_1607;
    end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln223_fu_915_p2 == 1'd1))) begin
        i_4_reg_489 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        init_perm_res_0_0_reg_321 <= or_ln_fu_608_p4;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        init_perm_res_0_0_reg_321 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        inv_init_perm_res_0_reg_500 <= inv_init_perm_res_fu_1351_p3;
    end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln223_fu_915_p2 == 1'd1))) begin
        inv_init_perm_res_0_reg_500 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        j_0_reg_388 <= j_4_reg_1477;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        j_0_reg_388 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        j_1_reg_444 <= j_reg_1513;
    end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln223_fu_915_p2 == 1'd0))) begin
        j_1_reg_444 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        j_2_reg_455 <= j_5_reg_1546;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        j_2_reg_455 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln235_fu_1023_p2 == 1'd1))) begin
        j_3_reg_478 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        j_3_reg_478 <= j_6_reg_1579;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        permuted_choice_1_0_reg_343 <= permuted_choice_1_fu_685_p3;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln171_fu_520_p2 == 1'd1))) begin
        permuted_choice_1_0_reg_343 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        s_input_0_reg_432 <= s_input_fu_987_p3;
    end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln223_fu_915_p2 == 1'd0))) begin
        s_input_0_reg_432 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        s_output_1_fu_184 <= s_output_fu_1244_p3;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln192_fu_692_p2 == 1'd1))) begin
        s_output_1_fu_184 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sub_key_load_1_reg_376 <= or_ln1_fu_908_p3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sub_key_load_1_reg_376 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln192_fu_692_p2 == 1'd1))) begin
        temp_reg_399 <= R_reg_1397;
    end else if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln252_fu_1257_p2 == 1'd1))) begin
        temp_reg_399 <= R_1_fu_1278_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln171_fu_520_p2 == 1'd1))) begin
        L_reg_1392 <= {{init_perm_res_0_0_reg_321[63:32]}};
        R_reg_1397 <= R_fu_566_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln171_fu_520_p2 == 1'd0))) begin
        add_ln171_reg_1387 <= add_ln171_fu_550_p2;
        trunc_ln173_reg_1377 <= trunc_ln173_fu_541_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        add_ln246_1_reg_1566 <= add_ln246_1_fu_1230_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        i_5_reg_1607 <= i_5_fu_1317_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_6_reg_1449 <= i_6_fu_698_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_7_reg_1500 <= i_7_fu_921_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_1410 <= i_fu_623_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        j_4_reg_1477 <= j_4_fu_874_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        j_5_reg_1546 <= j_5_fu_1029_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        j_6_reg_1579 <= j_6_fu_1263_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        j_reg_1513 <= j_fu_941_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln223_fu_915_p2 == 1'd1))) begin
        pre_output_reg_1505 <= pre_output_fu_927_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln192_fu_692_p2 == 1'd0))) begin
        sub_key_addr_reg_1457 <= zext_ln214_fu_850_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln235_fu_1023_p2 == 1'd0))) begin
        sub_ln240_2_reg_1556[5 : 1] <= sub_ln240_2_fu_1089_p2[5 : 1];
        sub_ln240_reg_1551[6 : 1] <= sub_ln240_fu_1065_p2[6 : 1];
        sub_ln243_1_reg_1561[5 : 1] <= sub_ln243_1_fu_1101_p2[5 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_9_reg_1469 <= tmp_9_fu_860_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln182_fu_617_p2 == 1'd0))) begin
        trunc_ln184_1_reg_1420 <= trunc_ln184_1_fu_634_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln216_fu_868_p2 == 1'd0))) begin
        trunc_ln218_1_reg_1487 <= trunc_ln218_1_fu_885_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln252_fu_1257_p2 == 1'd0))) begin
        trunc_ln254_1_reg_1589 <= trunc_ln254_1_fu_1274_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln267_fu_1311_p2 == 1'd0))) begin
        trunc_ln270_1_reg_1617 <= trunc_ln270_1_fu_1328_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        xor_ln232_1_reg_1538 <= xor_ln232_1_fu_1017_p2;
        xor_ln232_reg_1533 <= xor_ln232_fu_1011_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        E_ce0 = 1'b1;
    end else begin
        E_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        IP_ce0 = 1'b1;
    end else begin
        IP_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        IP_ce1 = 1'b1;
    end else begin
        IP_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        PC1_ce0 = 1'b1;
    end else begin
        PC1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        PC2_ce0 = 1'b1;
    end else begin
        PC2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        PI_ce0 = 1'b1;
    end else begin
        PI_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        P_ce0 = 1'b1;
    end else begin
        P_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        S_ce0 = 1'b1;
    end else begin
        S_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln267_fu_1311_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln267_fu_1311_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        sub_key_address0 = zext_ln232_fu_958_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sub_key_address0 = sub_key_addr_reg_1457;
    end else begin
        sub_key_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8))) begin
        sub_key_ce0 = 1'b1;
    end else begin
        sub_key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sub_key_we0 = 1'b1;
    end else begin
        sub_key_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln171_fu_520_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln182_fu_617_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln192_fu_692_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln216_fu_868_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln223_fu_915_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln227_fu_935_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln235_fu_1023_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln252_fu_1257_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln267_fu_1311_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C_2_fu_760_p3 = {{trunc_ln203_fu_746_p1}, {tmp_3_fu_750_p4}};

assign C_3_fu_812_p3 = {{trunc_ln197_fu_808_p1}, {tmp_2_fu_800_p3}};

assign D_1_fu_648_p1 = permuted_choice_1_0_reg_343[27:0];

assign D_2_fu_782_p3 = {{trunc_ln204_fu_768_p1}, {tmp_s_fu_772_p4}};

assign D_3_fu_832_p3 = {{trunc_ln198_fu_828_p1}, {tmp_4_fu_820_p3}};

assign E_address0 = zext_ln229_fu_947_p1;

assign IP_address0 = zext_ln174_fu_526_p1;

assign IP_address1 = zext_ln174_3_fu_545_p1;

assign PC1_address0 = zext_ln184_1_fu_629_p1;

assign PC2_address0 = zext_ln218_fu_880_p1;

assign PI_address0 = zext_ln270_1_fu_1323_p1;

assign P_address0 = zext_ln254_fu_1269_p1;

assign R_1_fu_1278_p2 = (f_function_res_0_reg_467 ^ L_0_reg_409);

assign R_fu_566_p1 = init_perm_res_0_0_reg_321[31:0];

assign S_address0 = sext_ln246_3_fu_1236_p1;

assign add_ln171_fu_550_p2 = (7'd2 + i_0_0_reg_332);

assign add_ln246_1_fu_1230_p2 = ($signed(sext_ln246_2_fu_1214_p1) + $signed(zext_ln246_fu_1226_p1));

assign add_ln246_fu_1208_p2 = ($signed(sext_ln246_1_fu_1204_p1) + $signed(sext_ln246_fu_1196_p1));

assign and_ln240_fu_1124_p2 = (xor_ln232_1_reg_1538 & lshr_ln240_fu_1118_p2);

assign and_ln243_fu_1172_p2 = (xor_ln232_reg_1533 & lshr_ln243_fu_1166_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = inv_init_perm_res_0_reg_500;

assign empty_12_fu_704_p2 = ((i_2_reg_365 == 5'd15) ? 1'b1 : 1'b0);

assign empty_13_fu_710_p2 = ((i_2_reg_365 == 5'd8) ? 1'b1 : 1'b0);

assign empty_14_fu_716_p2 = (empty_13_fu_710_p2 | empty_12_fu_704_p2);

assign empty_15_fu_722_p2 = ((i_2_reg_365 == 5'd1) ? 1'b1 : 1'b0);

assign empty_16_fu_728_p2 = (empty_15_fu_722_p2 | empty_14_fu_716_p2);

assign empty_17_fu_734_p2 = ((i_2_reg_365 == 5'd0) ? 1'b1 : 1'b0);

assign empty_18_fu_740_p2 = (empty_17_fu_734_p2 | empty_16_fu_728_p2);

assign empty_9_fu_531_p1 = i_0_0_reg_332[5:0];

assign f_function_res_fu_1304_p3 = {{trunc_ln254_1_reg_1589}, {trunc_ln254_fu_1300_p1}};

assign i_5_fu_1317_p2 = (i_4_reg_489 + 7'd1);

assign i_6_fu_698_p2 = (i_2_reg_365 + 5'd1);

assign i_7_fu_921_p2 = (i_3_reg_420 + 5'd1);

assign i_fu_623_p2 = (i_1_reg_354 + 6'd1);

assign icmp_ln171_fu_520_p2 = ((i_0_0_reg_332 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln182_fu_617_p2 = ((i_1_reg_354 == 6'd56) ? 1'b1 : 1'b0);

assign icmp_ln192_fu_692_p2 = ((i_2_reg_365 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln216_fu_868_p2 = ((j_0_reg_388 == 6'd48) ? 1'b1 : 1'b0);

assign icmp_ln223_fu_915_p2 = ((i_3_reg_420 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln227_fu_935_p2 = ((j_1_reg_444 == 6'd48) ? 1'b1 : 1'b0);

assign icmp_ln235_fu_1023_p2 = ((j_2_reg_455 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln252_fu_1257_p2 = ((j_3_reg_478 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln267_fu_1311_p2 = ((i_4_reg_489 == 7'd64) ? 1'b1 : 1'b0);

assign inv_init_perm_res_fu_1351_p3 = {{trunc_ln270_1_reg_1617}, {trunc_ln270_fu_1347_p1}};

assign j_4_fu_874_p2 = (j_0_reg_388 + 6'd1);

assign j_5_fu_1029_p2 = (j_2_reg_455 + 4'd1);

assign j_6_fu_1263_p2 = (j_3_reg_478 + 6'd1);

assign j_fu_941_p2 = (j_1_reg_444 + 6'd1);

assign lshr_ln174_1_fu_599_p2 = input_r >> zext_ln174_1_fu_595_p1;

assign lshr_ln174_fu_580_p2 = input_r >> zext_ln174_2_fu_576_p1;

assign lshr_ln184_fu_676_p2 = key >> zext_ln184_fu_672_p1;

assign lshr_ln218_fu_899_p2 = tmp_9_reg_1469 >> zext_ln218_1_fu_895_p1;

assign lshr_ln229_fu_973_p2 = temp_reg_399 >> zext_ln229_1_fu_969_p1;

assign lshr_ln240_1_fu_1132_p2 = and_ln240_fu_1124_p2 >> zext_ln240_6_fu_1129_p1;

assign lshr_ln240_fu_1118_p2 = 48'd145135534866432 >> zext_ln240_4_fu_1114_p1;

assign lshr_ln243_1_fu_1180_p2 = and_ln243_fu_1172_p2 >> zext_ln243_fu_1177_p1;

assign lshr_ln243_fu_1166_p2 = 47'd131941395333120 >> zext_ln240_3_fu_1110_p1;

assign lshr_ln254_fu_1294_p2 = s_output_1_fu_184 >> zext_ln254_1_fu_1290_p1;

assign lshr_ln270_fu_1342_p2 = pre_output_reg_1505 >> zext_ln270_fu_1338_p1;

assign or_ln171_fu_535_p2 = (empty_9_fu_531_p1 | 6'd1);

assign or_ln1_fu_908_p3 = {{trunc_ln218_1_reg_1487}, {trunc_ln218_fu_904_p1}};

assign or_ln241_fu_1150_p2 = (trunc_ln240_1_fu_1138_p1 | tmp_5_fu_1142_p3);

assign or_ln_fu_608_p4 = {{{trunc_ln173_reg_1377}, {trunc_ln174_fu_585_p1}}, {trunc_ln174_1_fu_604_p1}};

assign permuted_choice_1_fu_685_p3 = {{trunc_ln184_1_reg_1420}, {trunc_ln184_fu_681_p1}};

assign pre_output_fu_927_p3 = {{temp_reg_399}, {L_0_reg_409}};

assign s_input_fu_987_p3 = {{trunc_ln229_1_fu_983_p1}, {trunc_ln229_fu_979_p1}};

assign s_output_fu_1244_p3 = {{trunc_ln246_1_fu_1240_p1}, {S_q0}};

assign sext_ln240_fu_1107_p1 = $signed(sub_ln240_reg_1551);

assign sext_ln246_1_fu_1204_p1 = $signed(trunc_ln246_fu_1200_p1);

assign sext_ln246_2_fu_1214_p1 = $signed(add_ln246_fu_1208_p2);

assign sext_ln246_3_fu_1236_p1 = $signed(add_ln246_1_reg_1566);

assign sext_ln246_fu_1196_p1 = $signed(tmp_7_fu_1186_p4);

assign shl_ln240_1_fu_1071_p3 = {{trunc_ln240_fu_1035_p1}, {2'd0}};

assign shl_ln240_fu_1051_p2 = j_2_reg_455 << 4'd1;

assign shl_ln_fu_1039_p3 = {{trunc_ln240_fu_1035_p1}, {3'd0}};

assign sub_ln174_1_fu_589_p2 = ($signed(7'd64) - $signed(IP_q1));

assign sub_ln174_fu_570_p2 = ($signed(7'd64) - $signed(IP_q0));

assign sub_ln184_fu_666_p2 = ($signed(7'd64) - $signed(zext_ln184_2_fu_662_p1));

assign sub_ln218_fu_889_p2 = ($signed(6'd56) - $signed(PC2_q0));

assign sub_ln229_fu_963_p2 = ($signed(6'd32) - $signed(E_q0));

assign sub_ln232_fu_952_p2 = (5'd15 - i_3_reg_420);

assign sub_ln240_1_fu_1083_p2 = ($signed(6'd42) - $signed(zext_ln240_1_fu_1057_p1));

assign sub_ln240_2_fu_1089_p2 = (sub_ln240_1_fu_1083_p2 - zext_ln240_5_fu_1079_p1);

assign sub_ln240_fu_1065_p2 = (zext_ln240_fu_1047_p1 - zext_ln240_2_fu_1061_p1);

assign sub_ln243_1_fu_1101_p2 = (sub_ln243_fu_1095_p2 - zext_ln240_5_fu_1079_p1);

assign sub_ln243_fu_1095_p2 = ($signed(6'd43) - $signed(zext_ln240_1_fu_1057_p1));

assign sub_ln254_fu_1284_p2 = ($signed(6'd32) - $signed(P_q0));

assign sub_ln270_fu_1332_p2 = ($signed(7'd64) - $signed(PI_q0));

assign tmp_2_fu_800_p3 = C_1_fu_176[32'd27];

assign tmp_3_fu_750_p4 = {{C_1_fu_176[27:26]}};

assign tmp_4_fu_820_p3 = D_fu_180[32'd27];

assign tmp_5_fu_1142_p3 = lshr_ln240_1_fu_1132_p2[32'd4];

assign tmp_6_fu_1156_p4 = {{lshr_ln240_1_fu_1132_p2[7:5]}};

assign tmp_7_fu_1186_p4 = {{{tmp_6_fu_1156_p4}, {or_ln241_fu_1150_p2}}, {4'd0}};

assign tmp_8_fu_1218_p3 = {{j_2_reg_455}, {6'd0}};

assign tmp_9_fu_860_p3 = {{C_1_fu_176}, {D_fu_180}};

assign tmp_s_fu_772_p4 = {{D_fu_180[27:26]}};

assign trunc_ln173_fu_541_p1 = init_perm_res_0_0_reg_321[61:0];

assign trunc_ln174_1_fu_604_p1 = lshr_ln174_1_fu_599_p2[0:0];

assign trunc_ln174_fu_585_p1 = lshr_ln174_fu_580_p2[0:0];

assign trunc_ln184_1_fu_634_p1 = permuted_choice_1_0_reg_343[62:0];

assign trunc_ln184_fu_681_p1 = lshr_ln184_fu_676_p2[0:0];

assign trunc_ln197_fu_808_p1 = C_1_fu_176[26:0];

assign trunc_ln198_fu_828_p1 = D_fu_180[26:0];

assign trunc_ln203_fu_746_p1 = C_1_fu_176[25:0];

assign trunc_ln204_fu_768_p1 = D_fu_180[25:0];

assign trunc_ln218_1_fu_885_p1 = sub_key_load_1_reg_376[62:0];

assign trunc_ln218_fu_904_p1 = lshr_ln218_fu_899_p2[0:0];

assign trunc_ln229_1_fu_983_p1 = s_input_0_reg_432[62:0];

assign trunc_ln229_fu_979_p1 = lshr_ln229_fu_973_p2[0:0];

assign trunc_ln232_1_fu_999_p1 = sub_key_q0[47:0];

assign trunc_ln232_2_fu_1003_p1 = s_input_0_reg_432[46:0];

assign trunc_ln232_3_fu_1007_p1 = sub_key_q0[46:0];

assign trunc_ln232_fu_995_p1 = s_input_0_reg_432[47:0];

assign trunc_ln240_1_fu_1138_p1 = lshr_ln240_1_fu_1132_p2[0:0];

assign trunc_ln240_fu_1035_p1 = j_2_reg_455[2:0];

assign trunc_ln246_1_fu_1240_p1 = s_output_1_fu_184[27:0];

assign trunc_ln246_fu_1200_p1 = lshr_ln243_1_fu_1180_p2[7:0];

assign trunc_ln254_1_fu_1274_p1 = f_function_res_0_reg_467[30:0];

assign trunc_ln254_fu_1300_p1 = lshr_ln254_fu_1294_p2[0:0];

assign trunc_ln270_1_fu_1328_p1 = inv_init_perm_res_0_reg_500[62:0];

assign trunc_ln270_fu_1347_p1 = lshr_ln270_fu_1342_p2[0:0];

assign xor_ln232_1_fu_1017_p2 = (trunc_ln232_fu_995_p1 ^ trunc_ln232_1_fu_999_p1);

assign xor_ln232_fu_1011_p2 = (trunc_ln232_3_fu_1007_p1 ^ trunc_ln232_2_fu_1003_p1);

assign zext_ln174_1_fu_595_p1 = sub_ln174_1_fu_589_p2;

assign zext_ln174_2_fu_576_p1 = sub_ln174_fu_570_p2;

assign zext_ln174_3_fu_545_p1 = or_ln171_fu_535_p2;

assign zext_ln174_fu_526_p1 = i_0_0_reg_332;

assign zext_ln184_1_fu_629_p1 = i_1_reg_354;

assign zext_ln184_2_fu_662_p1 = PC1_q0;

assign zext_ln184_fu_672_p1 = sub_ln184_fu_666_p2;

assign zext_ln214_fu_850_p1 = i_2_reg_365;

assign zext_ln218_1_fu_895_p1 = sub_ln218_fu_889_p2;

assign zext_ln218_fu_880_p1 = j_0_reg_388;

assign zext_ln229_1_fu_969_p1 = sub_ln229_fu_963_p2;

assign zext_ln229_fu_947_p1 = j_1_reg_444;

assign zext_ln232_fu_958_p1 = sub_ln232_fu_952_p2;

assign zext_ln240_1_fu_1057_p1 = shl_ln240_fu_1051_p2;

assign zext_ln240_2_fu_1061_p1 = shl_ln240_fu_1051_p2;

assign zext_ln240_3_fu_1110_p1 = $unsigned(sext_ln240_fu_1107_p1);

assign zext_ln240_4_fu_1114_p1 = $unsigned(sext_ln240_fu_1107_p1);

assign zext_ln240_5_fu_1079_p1 = shl_ln240_1_fu_1071_p3;

assign zext_ln240_6_fu_1129_p1 = sub_ln240_2_reg_1556;

assign zext_ln240_fu_1047_p1 = shl_ln_fu_1039_p3;

assign zext_ln243_fu_1177_p1 = sub_ln243_1_reg_1561;

assign zext_ln246_fu_1226_p1 = tmp_8_fu_1218_p3;

assign zext_ln254_1_fu_1290_p1 = sub_ln254_fu_1284_p2;

assign zext_ln254_fu_1269_p1 = j_3_reg_478;

assign zext_ln270_1_fu_1323_p1 = i_4_reg_489;

assign zext_ln270_fu_1338_p1 = sub_ln270_fu_1332_p2;

always @ (posedge ap_clk) begin
    sub_ln240_reg_1551[0] <= 1'b0;
    sub_ln240_2_reg_1556[0] <= 1'b0;
    sub_ln243_1_reg_1561[0] <= 1'b1;
end

endmodule //des_dec
